
test_uart_new_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052a4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08005364  08005364  00006364  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005428  08005428  000071d8  2**0
                  CONTENTS
  4 .ARM          00000000  08005428  08005428  000071d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005428  08005428  000071d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005428  08005428  00006428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800542c  0800542c  0000642c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08005430  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e24  200001d8  08005608  000071d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ffc  08005608  00007ffc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000071d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d29b  00000000  00000000  00007200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b08  00000000  00000000  0002449b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000b608  00000000  00000000  00028fa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001308  00000000  00000000  000345b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001566  00000000  00000000  000358b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d2f8  00000000  00000000  00036e1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000213d8  00000000  00000000  00054116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000989a7  00000000  00000000  000754ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010de95  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000378c  00000000  00000000  0010ded8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000050  00000000  00000000  00111664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d8 	.word	0x200001d8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800534c 	.word	0x0800534c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001dc 	.word	0x200001dc
 8000104:	0800534c 	.word	0x0800534c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_uhi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5a09      	ldrh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800042c:	b510      	push	{r4, lr}
 800042e:	b098      	sub	sp, #96	@ 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000430:	2230      	movs	r2, #48	@ 0x30
 8000432:	2100      	movs	r1, #0
 8000434:	a80c      	add	r0, sp, #48	@ 0x30
 8000436:	f004 fca5 	bl	8004d84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800043a:	2210      	movs	r2, #16
 800043c:	2100      	movs	r1, #0
 800043e:	a801      	add	r0, sp, #4
 8000440:	f004 fca0 	bl	8004d84 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000444:	2218      	movs	r2, #24
 8000446:	2100      	movs	r1, #0
 8000448:	a805      	add	r0, sp, #20
 800044a:	f004 fc9b 	bl	8004d84 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800044e:	2401      	movs	r4, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000450:	2320      	movs	r3, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000452:	a80b      	add	r0, sp, #44	@ 0x2c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000454:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000456:	9413      	str	r4, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000458:	f001 fc56 	bl	8001d08 <HAL_RCC_OscConfig>
 800045c:	2800      	cmp	r0, #0
 800045e:	d001      	beq.n	8000464 <SystemClock_Config+0x38>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000460:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000462:	e7fe      	b.n	8000462 <SystemClock_Config+0x36>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000464:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000466:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000468:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800046a:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800046c:	3b04      	subs	r3, #4
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800046e:	0021      	movs	r1, r4
 8000470:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000472:	9302      	str	r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000474:	f001 fece 	bl	8002214 <HAL_RCC_ClockConfig>
 8000478:	2800      	cmp	r0, #0
 800047a:	d001      	beq.n	8000480 <SystemClock_Config+0x54>
 800047c:	b672      	cpsid	i
  while (1)
 800047e:	e7fe      	b.n	800047e <SystemClock_Config+0x52>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1;
 8000480:	4b06      	ldr	r3, [pc, #24]	@ (800049c <SystemClock_Config+0x70>)
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000482:	9007      	str	r0, [sp, #28]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000484:	900a      	str	r0, [sp, #40]	@ 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000486:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1;
 8000488:	9305      	str	r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800048a:	f001 ff5d 	bl	8002348 <HAL_RCCEx_PeriphCLKConfig>
 800048e:	2800      	cmp	r0, #0
 8000490:	d001      	beq.n	8000496 <SystemClock_Config+0x6a>
 8000492:	b672      	cpsid	i
  while (1)
 8000494:	e7fe      	b.n	8000494 <SystemClock_Config+0x68>
}
 8000496:	b018      	add	sp, #96	@ 0x60
 8000498:	bd10      	pop	{r4, pc}
 800049a:	46c0      	nop			@ (mov r8, r8)
 800049c:	00020001 	.word	0x00020001

080004a0 <main>:
{
 80004a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a2:	b0df      	sub	sp, #380	@ 0x17c
  HAL_Init();
 80004a4:	f000 fbaa 	bl	8000bfc <HAL_Init>
  SystemClock_Config();
 80004a8:	f7ff ffc0 	bl	800042c <SystemClock_Config>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004ac:	2180      	movs	r1, #128	@ 0x80
 80004ae:	4b68      	ldr	r3, [pc, #416]	@ (8000650 <main+0x1b0>)
 80004b0:	03c9      	lsls	r1, r1, #15
 80004b2:	695a      	ldr	r2, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80004b4:	200a      	movs	r0, #10
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004b6:	430a      	orrs	r2, r1
 80004b8:	615a      	str	r2, [r3, #20]
 80004ba:	695a      	ldr	r2, [r3, #20]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004bc:	250c      	movs	r5, #12
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004be:	400a      	ands	r2, r1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c0:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004c2:	9207      	str	r2, [sp, #28]
 80004c4:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c6:	695a      	ldr	r2, [r3, #20]
 80004c8:	0289      	lsls	r1, r1, #10
 80004ca:	430a      	orrs	r2, r1
 80004cc:	615a      	str	r2, [r3, #20]
 80004ce:	695a      	ldr	r2, [r3, #20]
 80004d0:	400a      	ands	r2, r1
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004d2:	2101      	movs	r1, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d4:	9208      	str	r2, [sp, #32]
 80004d6:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004d8:	695a      	ldr	r2, [r3, #20]
 80004da:	430a      	orrs	r2, r1
 80004dc:	615a      	str	r2, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80004de:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	400b      	ands	r3, r1
 80004e4:	9306      	str	r3, [sp, #24]
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80004e6:	0011      	movs	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004e8:	9b06      	ldr	r3, [sp, #24]
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80004ea:	f000 fba9 	bl	8000c40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80004ee:	200a      	movs	r0, #10
 80004f0:	f000 fbd0 	bl	8000c94 <HAL_NVIC_EnableIRQ>
  huart1.Instance = USART1;
 80004f4:	4c57      	ldr	r4, [pc, #348]	@ (8000654 <main+0x1b4>)
 80004f6:	4b58      	ldr	r3, [pc, #352]	@ (8000658 <main+0x1b8>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004f8:	0020      	movs	r0, r4
  huart1.Instance = USART1;
 80004fa:	6023      	str	r3, [r4, #0]
  huart1.Init.BaudRate = 115200;
 80004fc:	23e1      	movs	r3, #225	@ 0xe1
 80004fe:	025b      	lsls	r3, r3, #9
 8000500:	6063      	str	r3, [r4, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000502:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000504:	6165      	str	r5, [r4, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000506:	60a3      	str	r3, [r4, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000508:	60e3      	str	r3, [r4, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800050a:	6123      	str	r3, [r4, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800050c:	61a3      	str	r3, [r4, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800050e:	61e3      	str	r3, [r4, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000510:	6223      	str	r3, [r4, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000512:	6263      	str	r3, [r4, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000514:	f002 fd6e 	bl	8002ff4 <HAL_UART_Init>
 8000518:	1e03      	subs	r3, r0, #0
 800051a:	d001      	beq.n	8000520 <main+0x80>
 800051c:	b672      	cpsid	i
  while (1)
 800051e:	e7fe      	b.n	800051e <main+0x7e>
  huart2.Instance = USART2;
 8000520:	484e      	ldr	r0, [pc, #312]	@ (800065c <main+0x1bc>)
 8000522:	4a4f      	ldr	r2, [pc, #316]	@ (8000660 <main+0x1c0>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000524:	6083      	str	r3, [r0, #8]
  huart2.Instance = USART2;
 8000526:	6002      	str	r2, [r0, #0]
  huart2.Init.BaudRate = 38400;
 8000528:	2296      	movs	r2, #150	@ 0x96
 800052a:	0212      	lsls	r2, r2, #8
 800052c:	6042      	str	r2, [r0, #4]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800052e:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000530:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000532:	6145      	str	r5, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000534:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000536:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000538:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800053a:	6243      	str	r3, [r0, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800053c:	f002 fd5a 	bl	8002ff4 <HAL_UART_Init>
 8000540:	1e06      	subs	r6, r0, #0
 8000542:	d001      	beq.n	8000548 <main+0xa8>
 8000544:	b672      	cpsid	i
  while (1)
 8000546:	e7fe      	b.n	8000546 <main+0xa6>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000548:	0001      	movs	r1, r0
 800054a:	2210      	movs	r2, #16
 800054c:	a83e      	add	r0, sp, #248	@ 0xf8
 800054e:	f004 fc19 	bl	8004d84 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000552:	2208      	movs	r2, #8
 8000554:	0031      	movs	r1, r6
 8000556:	a822      	add	r0, sp, #136	@ 0x88
 8000558:	f004 fc14 	bl	8004d84 <memset>
  htim3.Instance = TIM3;
 800055c:	4d41      	ldr	r5, [pc, #260]	@ (8000664 <main+0x1c4>)
 800055e:	4b42      	ldr	r3, [pc, #264]	@ (8000668 <main+0x1c8>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000560:	0028      	movs	r0, r5
  htim3.Instance = TIM3;
 8000562:	602b      	str	r3, [r5, #0]
  htim3.Init.Prescaler = 48000-1;
 8000564:	4b41      	ldr	r3, [pc, #260]	@ (800066c <main+0x1cc>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000566:	60ae      	str	r6, [r5, #8]
  htim3.Init.Prescaler = 48000-1;
 8000568:	606b      	str	r3, [r5, #4]
  htim3.Init.Period = 3000-1;
 800056a:	4b41      	ldr	r3, [pc, #260]	@ (8000670 <main+0x1d0>)
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800056c:	612e      	str	r6, [r5, #16]
  htim3.Init.Period = 3000-1;
 800056e:	60eb      	str	r3, [r5, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000570:	61ae      	str	r6, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000572:	f001 fff9 	bl	8002568 <HAL_TIM_Base_Init>
 8000576:	2800      	cmp	r0, #0
 8000578:	d001      	beq.n	800057e <main+0xde>
 800057a:	b672      	cpsid	i
  while (1)
 800057c:	e7fe      	b.n	800057c <main+0xdc>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800057e:	2380      	movs	r3, #128	@ 0x80
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000580:	0028      	movs	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000582:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000584:	a93e      	add	r1, sp, #248	@ 0xf8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000586:	933e      	str	r3, [sp, #248]	@ 0xf8
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000588:	f002 f822 	bl	80025d0 <HAL_TIM_ConfigClockSource>
 800058c:	2800      	cmp	r0, #0
 800058e:	d001      	beq.n	8000594 <main+0xf4>
 8000590:	b672      	cpsid	i
  while (1)
 8000592:	e7fe      	b.n	8000592 <main+0xf2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000594:	9022      	str	r0, [sp, #136]	@ 0x88
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000596:	9023      	str	r0, [sp, #140]	@ 0x8c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000598:	a922      	add	r1, sp, #136	@ 0x88
 800059a:	0028      	movs	r0, r5
 800059c:	f002 f8ae 	bl	80026fc <HAL_TIMEx_MasterConfigSynchronization>
 80005a0:	1e06      	subs	r6, r0, #0
 80005a2:	d001      	beq.n	80005a8 <main+0x108>
 80005a4:	b672      	cpsid	i
  while (1)
 80005a6:	e7fe      	b.n	80005a6 <main+0x106>
  MX_USB_DEVICE_Init();
 80005a8:	f003 ffca 	bl	8004540 <MX_USB_DEVICE_Init>
  	init_queue(&transmit);
 80005ac:	a822      	add	r0, sp, #136	@ 0x88
 80005ae:	f000 fa4a 	bl	8000a46 <init_queue>
  	received_from_jetson.x_coord = 2.22;
 80005b2:	4a30      	ldr	r2, [pc, #192]	@ (8000674 <main+0x1d4>)
 80005b4:	4b30      	ldr	r3, [pc, #192]	@ (8000678 <main+0x1d8>)
  	enqueue(&transmit,received_from_jetson);
 80005b6:	a914      	add	r1, sp, #80	@ 0x50
  	received_from_jetson.x_coord = 2.22;
 80005b8:	9212      	str	r2, [sp, #72]	@ 0x48
 80005ba:	9313      	str	r3, [sp, #76]	@ 0x4c
  	received_from_jetson.y_coord = 1.23;
 80005bc:	4a2f      	ldr	r2, [pc, #188]	@ (800067c <main+0x1dc>)
 80005be:	4b30      	ldr	r3, [pc, #192]	@ (8000680 <main+0x1e0>)
  	received_from_jetson.x_coord = 2.22;
 80005c0:	ad12      	add	r5, sp, #72	@ 0x48
  	received_from_jetson.y_coord = 1.23;
 80005c2:	9214      	str	r2, [sp, #80]	@ 0x50
 80005c4:	9315      	str	r3, [sp, #84]	@ 0x54
  	received_from_jetson.z_coord = 4.45;
 80005c6:	4a2f      	ldr	r2, [pc, #188]	@ (8000684 <main+0x1e4>)
 80005c8:	4b2f      	ldr	r3, [pc, #188]	@ (8000688 <main+0x1e8>)
  	enqueue(&transmit,received_from_jetson);
 80005ca:	4668      	mov	r0, sp
  	received_from_jetson.z_coord = 4.45;
 80005cc:	9216      	str	r2, [sp, #88]	@ 0x58
 80005ce:	9317      	str	r3, [sp, #92]	@ 0x5c
  	received_from_jetson.control = 64;
 80005d0:	2340      	movs	r3, #64	@ 0x40
  	enqueue(&transmit,received_from_jetson);
 80005d2:	2218      	movs	r2, #24
  	received_from_jetson.control = 64;
 80005d4:	762b      	strb	r3, [r5, #24]
  	enqueue(&transmit,received_from_jetson);
 80005d6:	f004 fc60 	bl	8004e9a <memcpy>
 80005da:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80005dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80005de:	a822      	add	r0, sp, #136	@ 0x88
 80005e0:	f000 fa40 	bl	8000a64 <enqueue>
  	dequeue(&transmit, &data_transmit);
 80005e4:	a91a      	add	r1, sp, #104	@ 0x68
 80005e6:	a822      	add	r0, sp, #136	@ 0x88
 80005e8:	f000 fa60 	bl	8000aac <dequeue>
   	tx_buffer_ptr = tx_buffer;
 80005ec:	4b27      	ldr	r3, [pc, #156]	@ (800068c <main+0x1ec>)
 80005ee:	af0b      	add	r7, sp, #44	@ 0x2c
 80005f0:	601f      	str	r7, [r3, #0]
	transmitter_con.packet_size = PACKET_SIZE;
 80005f2:	4b27      	ldr	r3, [pc, #156]	@ (8000690 <main+0x1f0>)
 80005f4:	ad09      	add	r5, sp, #36	@ 0x24
 80005f6:	802b      	strh	r3, [r5, #0]
	transmitter_con.total_size = 27;
 80005f8:	231b      	movs	r3, #27
	transmitter_con.crc = calculate_crc((uint8_t *)&transmitter_con,3);
 80005fa:	2103      	movs	r1, #3
 80005fc:	0028      	movs	r0, r5
	transmitter_con.total_size = 27;
 80005fe:	70ab      	strb	r3, [r5, #2]
	transmitter_con.handshake =0;
 8000600:	712e      	strb	r6, [r5, #4]
	transmitter_con.crc = calculate_crc((uint8_t *)&transmitter_con,3);
 8000602:	f000 fa79 	bl	8000af8 <calculate_crc>
	transmitter_con_ptr = &transmitter_con;
 8000606:	4e23      	ldr	r6, [pc, #140]	@ (8000694 <main+0x1f4>)
	transmitter_con.crc = calculate_crc((uint8_t *)&transmitter_con,3);
 8000608:	70e8      	strb	r0, [r5, #3]
	dataToBuffer(data_transmit,tx_buffer);
 800060a:	2210      	movs	r2, #16
 800060c:	a91e      	add	r1, sp, #120	@ 0x78
 800060e:	4668      	mov	r0, sp
	transmitter_con_ptr = &transmitter_con;
 8000610:	6035      	str	r5, [r6, #0]
	dataToBuffer(data_transmit,tx_buffer);
 8000612:	9704      	str	r7, [sp, #16]
 8000614:	f004 fc41 	bl	8004e9a <memcpy>
 8000618:	981a      	ldr	r0, [sp, #104]	@ 0x68
 800061a:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800061c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800061e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8000620:	f000 fa76 	bl	8000b10 <dataToBuffer>
	HAL_UART_Transmit_DMA(&huart1, (uint8_t *)transmitter_con_ptr, 4);
 8000624:	2204      	movs	r2, #4
 8000626:	0020      	movs	r0, r4
 8000628:	6831      	ldr	r1, [r6, #0]
 800062a:	f002 f8c1 	bl	80027b0 <HAL_UART_Transmit_DMA>
	    if(is_full(&transmit)){
 800062e:	a822      	add	r0, sp, #136	@ 0x88
 8000630:	f000 fa11 	bl	8000a56 <is_full>
 8000634:	2800      	cmp	r0, #0
 8000636:	d0fa      	beq.n	800062e <main+0x18e>
	    	sprintf(msg, "TERMINATED: Transmission queue is full");
 8000638:	4917      	ldr	r1, [pc, #92]	@ (8000698 <main+0x1f8>)
 800063a:	a83e      	add	r0, sp, #248	@ 0xf8
 800063c:	f004 fc25 	bl	8004e8a <strcpy>
	        CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8000640:	a83e      	add	r0, sp, #248	@ 0xf8
 8000642:	f7ff fd61 	bl	8000108 <strlen>
 8000646:	b281      	uxth	r1, r0
 8000648:	a83e      	add	r0, sp, #248	@ 0xf8
 800064a:	f003 ffcb 	bl	80045e4 <CDC_Transmit_FS>
  {
 800064e:	e7ee      	b.n	800062e <main+0x18e>
 8000650:	40021000 	.word	0x40021000
 8000654:	20000314 	.word	0x20000314
 8000658:	40013800 	.word	0x40013800
 800065c:	2000028c 	.word	0x2000028c
 8000660:	40004400 	.word	0x40004400
 8000664:	2000039c 	.word	0x2000039c
 8000668:	40000400 	.word	0x40000400
 800066c:	0000bb7f 	.word	0x0000bb7f
 8000670:	00000bb7 	.word	0x00000bb7
 8000674:	5c28f5c3 	.word	0x5c28f5c3
 8000678:	4001c28f 	.word	0x4001c28f
 800067c:	7ae147ae 	.word	0x7ae147ae
 8000680:	3ff3ae14 	.word	0x3ff3ae14
 8000684:	cccccccd 	.word	0xcccccccd
 8000688:	4011cccc 	.word	0x4011cccc
 800068c:	200001fc 	.word	0x200001fc
 8000690:	00000903 	.word	0x00000903
 8000694:	200001f8 	.word	0x200001f8
 8000698:	08005364 	.word	0x08005364

0800069c <HAL_UART_TxCpltCallback>:
{
 800069c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (transmitter_con_ptr->handshake == 0){
 800069e:	4f22      	ldr	r7, [pc, #136]	@ (8000728 <HAL_UART_TxCpltCallback+0x8c>)
{
 80006a0:	b085      	sub	sp, #20
	if (transmitter_con_ptr->handshake == 0){
 80006a2:	683d      	ldr	r5, [r7, #0]
 80006a4:	792a      	ldrb	r2, [r5, #4]
 80006a6:	2a00      	cmp	r2, #0
 80006a8:	d106      	bne.n	80006b8 <HAL_UART_TxCpltCallback+0x1c>
		HAL_UART_Receive_DMA(&huart1, &receive_flag, 1 );
 80006aa:	4920      	ldr	r1, [pc, #128]	@ (800072c <HAL_UART_TxCpltCallback+0x90>)
 80006ac:	4820      	ldr	r0, [pc, #128]	@ (8000730 <HAL_UART_TxCpltCallback+0x94>)
 80006ae:	3201      	adds	r2, #1
 80006b0:	f002 fd26 	bl	8003100 <HAL_UART_Receive_DMA>
}
 80006b4:	b005      	add	sp, #20
 80006b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(transmitter_con_ptr->handshake == 1 && transmitter_con_ptr->total_size >0){
 80006b8:	78ab      	ldrb	r3, [r5, #2]
 80006ba:	2a01      	cmp	r2, #1
 80006bc:	d128      	bne.n	8000710 <HAL_UART_TxCpltCallback+0x74>
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d028      	beq.n	8000714 <HAL_UART_TxCpltCallback+0x78>
		memset(packet,0,sizeof(packet));
 80006c2:	2300      	movs	r3, #0
			memcpy(packet,current_packet,transmitter_con_ptr->total_size);
 80006c4:	4e1b      	ldr	r6, [pc, #108]	@ (8000734 <HAL_UART_TxCpltCallback+0x98>)
		memset(packet,0,sizeof(packet));
 80006c6:	9303      	str	r3, [sp, #12]
		if(transmitter_con_ptr->total_size <PACKET_SIZE){
 80006c8:	78aa      	ldrb	r2, [r5, #2]
			memcpy(packet,current_packet,transmitter_con_ptr->total_size);
 80006ca:	6833      	ldr	r3, [r6, #0]
		memset(packet,0,sizeof(packet));
 80006cc:	ac03      	add	r4, sp, #12
			memcpy(packet,current_packet,transmitter_con_ptr->total_size);
 80006ce:	9301      	str	r3, [sp, #4]
		if(transmitter_con_ptr->total_size <PACKET_SIZE){
 80006d0:	2a02      	cmp	r2, #2
 80006d2:	d805      	bhi.n	80006e0 <HAL_UART_TxCpltCallback+0x44>
			memcpy(packet,current_packet,transmitter_con_ptr->total_size);
 80006d4:	0019      	movs	r1, r3
 80006d6:	0020      	movs	r0, r4
 80006d8:	f004 fbdf 	bl	8004e9a <memcpy>
			transmitter_con_ptr->total_size =0;
 80006dc:	2300      	movs	r3, #0
 80006de:	70ab      	strb	r3, [r5, #2]
		memcpy(packet,current_packet,PACKET_SIZE);
 80006e0:	2203      	movs	r2, #3
 80006e2:	9901      	ldr	r1, [sp, #4]
 80006e4:	0020      	movs	r0, r4
 80006e6:	f004 fbd8 	bl	8004e9a <memcpy>
		packet[PACKET_SIZE]= calculate_crc(packet,PACKET_SIZE+1);
 80006ea:	2104      	movs	r1, #4
 80006ec:	0020      	movs	r0, r4
 80006ee:	f000 fa03 	bl	8000af8 <calculate_crc>
		current_packet +=PACKET_SIZE;
 80006f2:	6833      	ldr	r3, [r6, #0]
		packet[PACKET_SIZE]= calculate_crc(packet,PACKET_SIZE+1);
 80006f4:	70e0      	strb	r0, [r4, #3]
		current_packet +=PACKET_SIZE;
 80006f6:	3303      	adds	r3, #3
 80006f8:	6033      	str	r3, [r6, #0]
		 transmitter_con_ptr->total_size -=transmitter_con_ptr->packet_size;
 80006fa:	683b      	ldr	r3, [r7, #0]
		HAL_UART_Transmit_DMA(&huart1, packet , transmitter_con_ptr->packet_size +1);
 80006fc:	480c      	ldr	r0, [pc, #48]	@ (8000730 <HAL_UART_TxCpltCallback+0x94>)
		 transmitter_con_ptr->total_size -=transmitter_con_ptr->packet_size;
 80006fe:	781a      	ldrb	r2, [r3, #0]
 8000700:	7899      	ldrb	r1, [r3, #2]
 8000702:	1a89      	subs	r1, r1, r2
 8000704:	7099      	strb	r1, [r3, #2]
		HAL_UART_Transmit_DMA(&huart1, packet , transmitter_con_ptr->packet_size +1);
 8000706:	3201      	adds	r2, #1
 8000708:	0021      	movs	r1, r4
 800070a:	f002 f851 	bl	80027b0 <HAL_UART_Transmit_DMA>
	else if(transmitter_con_ptr->handshake == 1 && transmitter_con_ptr->total_size >0){
 800070e:	e7d1      	b.n	80006b4 <HAL_UART_TxCpltCallback+0x18>
	else if(transmitter_con_ptr->total_size ==0){
 8000710:	2b00      	cmp	r3, #0
 8000712:	d1cf      	bne.n	80006b4 <HAL_UART_TxCpltCallback+0x18>
		HAL_UART_Receive_DMA(&huart1, &corrupt_data, 1 );
 8000714:	2201      	movs	r2, #1
 8000716:	4908      	ldr	r1, [pc, #32]	@ (8000738 <HAL_UART_TxCpltCallback+0x9c>)
 8000718:	4805      	ldr	r0, [pc, #20]	@ (8000730 <HAL_UART_TxCpltCallback+0x94>)
 800071a:	f002 fcf1 	bl	8003100 <HAL_UART_Receive_DMA>
		HAL_TIM_Base_Start_IT(&htim3);
 800071e:	4807      	ldr	r0, [pc, #28]	@ (800073c <HAL_UART_TxCpltCallback+0xa0>)
 8000720:	f001 feaa 	bl	8002478 <HAL_TIM_Base_Start_IT>
}
 8000724:	e7c6      	b.n	80006b4 <HAL_UART_TxCpltCallback+0x18>
 8000726:	46c0      	nop			@ (mov r8, r8)
 8000728:	200001f8 	.word	0x200001f8
 800072c:	20000200 	.word	0x20000200
 8000730:	20000314 	.word	0x20000314
 8000734:	200001f4 	.word	0x200001f4
 8000738:	20000201 	.word	0x20000201
 800073c:	2000039c 	.word	0x2000039c

08000740 <HAL_UART_RxCpltCallback>:
{
 8000740:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(corrupt_data !=0){
 8000742:	4d24      	ldr	r5, [pc, #144]	@ (80007d4 <HAL_UART_RxCpltCallback+0x94>)
 8000744:	4c24      	ldr	r4, [pc, #144]	@ (80007d8 <HAL_UART_RxCpltCallback+0x98>)
 8000746:	7829      	ldrb	r1, [r5, #0]
 8000748:	2900      	cmp	r1, #0
 800074a:	d01a      	beq.n	8000782 <HAL_UART_RxCpltCallback+0x42>
	  current_packet = tx_buffer_ptr+ PACKET_SIZE*(corrupt_data-1);
 800074c:	2603      	movs	r6, #3
 800074e:	3901      	subs	r1, #1
 8000750:	4b22      	ldr	r3, [pc, #136]	@ (80007dc <HAL_UART_RxCpltCallback+0x9c>)
 8000752:	4371      	muls	r1, r6
 8000754:	681b      	ldr	r3, [r3, #0]
	  memcpy(packet,current_packet,PACKET_SIZE);
 8000756:	af01      	add	r7, sp, #4
	  current_packet = tx_buffer_ptr+ PACKET_SIZE*(corrupt_data-1);
 8000758:	1859      	adds	r1, r3, r1
 800075a:	4b21      	ldr	r3, [pc, #132]	@ (80007e0 <HAL_UART_RxCpltCallback+0xa0>)
	  memcpy(packet,current_packet,PACKET_SIZE);
 800075c:	0032      	movs	r2, r6
 800075e:	0038      	movs	r0, r7
	  current_packet = tx_buffer_ptr+ PACKET_SIZE*(corrupt_data-1);
 8000760:	6019      	str	r1, [r3, #0]
	  memcpy(packet,current_packet,PACKET_SIZE);
 8000762:	f004 fb9a 	bl	8004e9a <memcpy>
	  packet[PACKET_SIZE]= calculate_crc(packet,PACKET_SIZE);
 8000766:	0031      	movs	r1, r6
 8000768:	0038      	movs	r0, r7
 800076a:	f000 f9c5 	bl	8000af8 <calculate_crc>
	  HAL_UART_Transmit_DMA(&huart1, packet , transmitter_con_ptr->packet_size +1);
 800076e:	6823      	ldr	r3, [r4, #0]
	  packet[PACKET_SIZE]= calculate_crc(packet,PACKET_SIZE);
 8000770:	70f8      	strb	r0, [r7, #3]
	  HAL_UART_Transmit_DMA(&huart1, packet , transmitter_con_ptr->packet_size +1);
 8000772:	781a      	ldrb	r2, [r3, #0]
 8000774:	0039      	movs	r1, r7
 8000776:	481b      	ldr	r0, [pc, #108]	@ (80007e4 <HAL_UART_RxCpltCallback+0xa4>)
 8000778:	3201      	adds	r2, #1
 800077a:	f002 f819 	bl	80027b0 <HAL_UART_Transmit_DMA>
	  corrupt_data=0;
 800077e:	2300      	movs	r3, #0
 8000780:	702b      	strb	r3, [r5, #0]
  if (transmitter_con_ptr->handshake == 0){
 8000782:	6822      	ldr	r2, [r4, #0]
 8000784:	7913      	ldrb	r3, [r2, #4]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d121      	bne.n	80007ce <HAL_UART_RxCpltCallback+0x8e>
	  if(receive_flag ==0){
 800078a:	4b17      	ldr	r3, [pc, #92]	@ (80007e8 <HAL_UART_RxCpltCallback+0xa8>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d11f      	bne.n	80007d2 <HAL_UART_RxCpltCallback+0x92>
		  transmitter_con_ptr->handshake = 1;
 8000792:	3301      	adds	r3, #1
 8000794:	7113      	strb	r3, [r2, #4]
		 current_packet = tx_buffer_ptr;
 8000796:	4b11      	ldr	r3, [pc, #68]	@ (80007dc <HAL_UART_RxCpltCallback+0x9c>)
 8000798:	4e11      	ldr	r6, [pc, #68]	@ (80007e0 <HAL_UART_RxCpltCallback+0xa0>)
 800079a:	6819      	ldr	r1, [r3, #0]
		 memcpy(packet,current_packet,PACKET_SIZE);
 800079c:	ad01      	add	r5, sp, #4
 800079e:	2203      	movs	r2, #3
 80007a0:	0028      	movs	r0, r5
		 current_packet = tx_buffer_ptr;
 80007a2:	6031      	str	r1, [r6, #0]
		 memcpy(packet,current_packet,PACKET_SIZE);
 80007a4:	f004 fb79 	bl	8004e9a <memcpy>
		 packet[PACKET_SIZE]= calculate_crc(packet,PACKET_SIZE);
 80007a8:	2103      	movs	r1, #3
 80007aa:	0028      	movs	r0, r5
 80007ac:	f000 f9a4 	bl	8000af8 <calculate_crc>
		 current_packet +=PACKET_SIZE;
 80007b0:	6833      	ldr	r3, [r6, #0]
		 packet[PACKET_SIZE]= calculate_crc(packet,PACKET_SIZE);
 80007b2:	70e8      	strb	r0, [r5, #3]
		 current_packet +=PACKET_SIZE;
 80007b4:	3303      	adds	r3, #3
 80007b6:	6033      	str	r3, [r6, #0]
		 transmitter_con_ptr->total_size -=transmitter_con_ptr->packet_size;
 80007b8:	6823      	ldr	r3, [r4, #0]
		 HAL_UART_Transmit_DMA(&huart1, packet , transmitter_con_ptr->packet_size +1);
 80007ba:	480a      	ldr	r0, [pc, #40]	@ (80007e4 <HAL_UART_RxCpltCallback+0xa4>)
		 transmitter_con_ptr->total_size -=transmitter_con_ptr->packet_size;
 80007bc:	781a      	ldrb	r2, [r3, #0]
 80007be:	7899      	ldrb	r1, [r3, #2]
 80007c0:	1a89      	subs	r1, r1, r2
 80007c2:	7099      	strb	r1, [r3, #2]
		 HAL_UART_Transmit_DMA(&huart1, packet , transmitter_con_ptr->packet_size +1);
 80007c4:	3201      	adds	r2, #1
 80007c6:	0029      	movs	r1, r5
 80007c8:	f001 fff2 	bl	80027b0 <HAL_UART_Transmit_DMA>
}
 80007cc:	e001      	b.n	80007d2 <HAL_UART_RxCpltCallback+0x92>
  if(transmitter_con_ptr->handshake == 1){
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	d0e1      	beq.n	8000796 <HAL_UART_RxCpltCallback+0x56>
}
 80007d2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80007d4:	20000201 	.word	0x20000201
 80007d8:	200001f8 	.word	0x200001f8
 80007dc:	200001fc 	.word	0x200001fc
 80007e0:	200001f4 	.word	0x200001f4
 80007e4:	20000314 	.word	0x20000314
 80007e8:	20000200 	.word	0x20000200

080007ec <Error_Handler>:
 80007ec:	b672      	cpsid	i
  while (1)
 80007ee:	e7fe      	b.n	80007ee <Error_Handler+0x2>

080007f0 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f0:	2101      	movs	r1, #1
 80007f2:	4b0a      	ldr	r3, [pc, #40]	@ (800081c <HAL_MspInit+0x2c>)
{
 80007f4:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f6:	699a      	ldr	r2, [r3, #24]
 80007f8:	430a      	orrs	r2, r1
 80007fa:	619a      	str	r2, [r3, #24]
 80007fc:	699a      	ldr	r2, [r3, #24]
 80007fe:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8000800:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000802:	9200      	str	r2, [sp, #0]
 8000804:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000806:	69da      	ldr	r2, [r3, #28]
 8000808:	0549      	lsls	r1, r1, #21
 800080a:	430a      	orrs	r2, r1
 800080c:	61da      	str	r2, [r3, #28]
 800080e:	69db      	ldr	r3, [r3, #28]
 8000810:	400b      	ands	r3, r1
 8000812:	9301      	str	r3, [sp, #4]
 8000814:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000816:	b002      	add	sp, #8
 8000818:	4770      	bx	lr
 800081a:	46c0      	nop			@ (mov r8, r8)
 800081c:	40021000 	.word	0x40021000

08000820 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM3)
 8000820:	4b07      	ldr	r3, [pc, #28]	@ (8000840 <HAL_TIM_Base_MspInit+0x20>)
 8000822:	6802      	ldr	r2, [r0, #0]
{
 8000824:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM3)
 8000826:	429a      	cmp	r2, r3
 8000828:	d108      	bne.n	800083c <HAL_TIM_Base_MspInit+0x1c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800082a:	2102      	movs	r1, #2
 800082c:	4b05      	ldr	r3, [pc, #20]	@ (8000844 <HAL_TIM_Base_MspInit+0x24>)
 800082e:	69da      	ldr	r2, [r3, #28]
 8000830:	430a      	orrs	r2, r1
 8000832:	61da      	str	r2, [r3, #28]
 8000834:	69db      	ldr	r3, [r3, #28]
 8000836:	400b      	ands	r3, r1
 8000838:	9301      	str	r3, [sp, #4]
 800083a:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800083c:	b002      	add	sp, #8
 800083e:	4770      	bx	lr
 8000840:	40000400 	.word	0x40000400
 8000844:	40021000 	.word	0x40021000

08000848 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000848:	b530      	push	{r4, r5, lr}
 800084a:	0005      	movs	r5, r0
 800084c:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084e:	2214      	movs	r2, #20
 8000850:	2100      	movs	r1, #0
 8000852:	a805      	add	r0, sp, #20
 8000854:	f004 fa96 	bl	8004d84 <memset>
  if(huart->Instance==USART1)
 8000858:	682b      	ldr	r3, [r5, #0]
 800085a:	4a3d      	ldr	r2, [pc, #244]	@ (8000950 <HAL_UART_MspInit+0x108>)
 800085c:	4293      	cmp	r3, r2
 800085e:	d155      	bne.n	800090c <HAL_UART_MspInit+0xc4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000860:	2180      	movs	r1, #128	@ 0x80
 8000862:	4b3c      	ldr	r3, [pc, #240]	@ (8000954 <HAL_UART_MspInit+0x10c>)
 8000864:	01c9      	lsls	r1, r1, #7
 8000866:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000868:	2090      	movs	r0, #144	@ 0x90
    __HAL_RCC_USART1_CLK_ENABLE();
 800086a:	430a      	orrs	r2, r1
 800086c:	619a      	str	r2, [r3, #24]
 800086e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000870:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART1_CLK_ENABLE();
 8000872:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000874:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 8000876:	9201      	str	r2, [sp, #4]
 8000878:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	695a      	ldr	r2, [r3, #20]
 800087c:	0289      	lsls	r1, r1, #10
 800087e:	430a      	orrs	r2, r1
 8000880:	615a      	str	r2, [r3, #20]
 8000882:	695b      	ldr	r3, [r3, #20]
 8000884:	400b      	ands	r3, r1
 8000886:	9302      	str	r3, [sp, #8]
 8000888:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800088a:	23c0      	movs	r3, #192	@ 0xc0
 800088c:	00db      	lsls	r3, r3, #3
 800088e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000890:	2302      	movs	r3, #2
 8000892:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000894:	3301      	adds	r3, #1
 8000896:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000898:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800089a:	3b02      	subs	r3, #2
 800089c:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089e:	f000 fb15 	bl	8000ecc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 80008a2:	4c2d      	ldr	r4, [pc, #180]	@ (8000958 <HAL_UART_MspInit+0x110>)
 80008a4:	4b2d      	ldr	r3, [pc, #180]	@ (800095c <HAL_UART_MspInit+0x114>)
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80008a6:	2280      	movs	r2, #128	@ 0x80
    hdma_usart1_tx.Instance = DMA1_Channel2;
 80008a8:	6023      	str	r3, [r4, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008aa:	2310      	movs	r3, #16
 80008ac:	6063      	str	r3, [r4, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008ae:	2300      	movs	r3, #0
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80008b0:	0020      	movs	r0, r4
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008b2:	60a3      	str	r3, [r4, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80008b4:	60e2      	str	r2, [r4, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008b6:	6123      	str	r3, [r4, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008b8:	6163      	str	r3, [r4, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80008ba:	61a3      	str	r3, [r4, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80008bc:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80008be:	f000 fa0f 	bl	8000ce0 <HAL_DMA_Init>
 80008c2:	2800      	cmp	r0, #0
 80008c4:	d001      	beq.n	80008ca <HAL_UART_MspInit+0x82>
    {
      Error_Handler();
 80008c6:	f7ff ff91 	bl	80007ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 80008ca:	4b25      	ldr	r3, [pc, #148]	@ (8000960 <HAL_UART_MspInit+0x118>)
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80008cc:	672c      	str	r4, [r5, #112]	@ 0x70
 80008ce:	6265      	str	r5, [r4, #36]	@ 0x24
    hdma_usart1_rx.Instance = DMA1_Channel3;
 80008d0:	4c24      	ldr	r4, [pc, #144]	@ (8000964 <HAL_UART_MspInit+0x11c>)
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008d2:	2280      	movs	r2, #128	@ 0x80
    hdma_usart1_rx.Instance = DMA1_Channel3;
 80008d4:	6023      	str	r3, [r4, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008d6:	2300      	movs	r3, #0
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80008d8:	0020      	movs	r0, r4
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008da:	6063      	str	r3, [r4, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008dc:	60a3      	str	r3, [r4, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008de:	60e2      	str	r2, [r4, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008e0:	6123      	str	r3, [r4, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008e2:	6163      	str	r3, [r4, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80008e4:	61a3      	str	r3, [r4, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80008e6:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80008e8:	f000 f9fa 	bl	8000ce0 <HAL_DMA_Init>
 80008ec:	2800      	cmp	r0, #0
 80008ee:	d001      	beq.n	80008f4 <HAL_UART_MspInit+0xac>
    {
      Error_Handler();
 80008f0:	f7ff ff7c 	bl	80007ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80008f4:	2200      	movs	r2, #0
 80008f6:	201b      	movs	r0, #27
 80008f8:	0011      	movs	r1, r2
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80008fa:	676c      	str	r4, [r5, #116]	@ 0x74
 80008fc:	6265      	str	r5, [r4, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80008fe:	f000 f99f 	bl	8000c40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000902:	201b      	movs	r0, #27
 8000904:	f000 f9c6 	bl	8000c94 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000908:	b00b      	add	sp, #44	@ 0x2c
 800090a:	bd30      	pop	{r4, r5, pc}
  else if(huart->Instance==USART2)
 800090c:	4a16      	ldr	r2, [pc, #88]	@ (8000968 <HAL_UART_MspInit+0x120>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d1fa      	bne.n	8000908 <HAL_UART_MspInit+0xc0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000912:	2280      	movs	r2, #128	@ 0x80
 8000914:	4b0f      	ldr	r3, [pc, #60]	@ (8000954 <HAL_UART_MspInit+0x10c>)
 8000916:	0292      	lsls	r2, r2, #10
 8000918:	69d9      	ldr	r1, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091a:	2090      	movs	r0, #144	@ 0x90
    __HAL_RCC_USART2_CLK_ENABLE();
 800091c:	4311      	orrs	r1, r2
 800091e:	61d9      	str	r1, [r3, #28]
 8000920:	69d9      	ldr	r1, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000922:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_ENABLE();
 8000924:	4011      	ands	r1, r2
 8000926:	9103      	str	r1, [sp, #12]
 8000928:	9903      	ldr	r1, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092a:	6959      	ldr	r1, [r3, #20]
 800092c:	4311      	orrs	r1, r2
 800092e:	6159      	str	r1, [r3, #20]
 8000930:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000932:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000934:	4013      	ands	r3, r2
 8000936:	9304      	str	r3, [sp, #16]
 8000938:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800093a:	4b0c      	ldr	r3, [pc, #48]	@ (800096c <HAL_UART_MspInit+0x124>)
 800093c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093e:	2302      	movs	r3, #2
 8000940:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000942:	3301      	adds	r3, #1
 8000944:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000946:	3b02      	subs	r3, #2
 8000948:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094a:	f000 fabf 	bl	8000ecc <HAL_GPIO_Init>
}
 800094e:	e7db      	b.n	8000908 <HAL_UART_MspInit+0xc0>
 8000950:	40013800 	.word	0x40013800
 8000954:	40021000 	.word	0x40021000
 8000958:	20000248 	.word	0x20000248
 800095c:	4002001c 	.word	0x4002001c
 8000960:	40020030 	.word	0x40020030
 8000964:	20000204 	.word	0x20000204
 8000968:	40004400 	.word	0x40004400
 800096c:	00008004 	.word	0x00008004

08000970 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000970:	e7fe      	b.n	8000970 <NMI_Handler>

08000972 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000972:	e7fe      	b.n	8000972 <HardFault_Handler>

08000974 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000974:	4770      	bx	lr

08000976 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8000976:	4770      	bx	lr

08000978 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000978:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800097a:	f000 f94f 	bl	8000c1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800097e:	bd10      	pop	{r4, pc}

08000980 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000980:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000982:	4803      	ldr	r0, [pc, #12]	@ (8000990 <DMA1_Channel2_3_IRQHandler+0x10>)
 8000984:	f000 fa59 	bl	8000e3a <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000988:	4802      	ldr	r0, [pc, #8]	@ (8000994 <DMA1_Channel2_3_IRQHandler+0x14>)
 800098a:	f000 fa56 	bl	8000e3a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800098e:	bd10      	pop	{r4, pc}
 8000990:	20000248 	.word	0x20000248
 8000994:	20000204 	.word	0x20000204

08000998 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000998:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800099a:	4802      	ldr	r0, [pc, #8]	@ (80009a4 <USART1_IRQHandler+0xc>)
 800099c:	f001 ffc4 	bl	8002928 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009a0:	bd10      	pop	{r4, pc}
 80009a2:	46c0      	nop			@ (mov r8, r8)
 80009a4:	20000314 	.word	0x20000314

080009a8 <USB_IRQHandler>:

/**
  * @brief This function handles USB global Interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 80009a8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80009aa:	4802      	ldr	r0, [pc, #8]	@ (80009b4 <USB_IRQHandler+0xc>)
 80009ac:	f000 fbb0 	bl	8001110 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80009b0:	bd10      	pop	{r4, pc}
 80009b2:	46c0      	nop			@ (mov r8, r8)
 80009b4:	20000bd4 	.word	0x20000bd4

080009b8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009b8:	b570      	push	{r4, r5, r6, lr}
 80009ba:	000e      	movs	r6, r1
 80009bc:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009be:	2500      	movs	r5, #0
 80009c0:	42a5      	cmp	r5, r4
 80009c2:	db01      	blt.n	80009c8 <_read+0x10>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 80009c4:	0020      	movs	r0, r4
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 80009c8:	e000      	b.n	80009cc <_read+0x14>
 80009ca:	bf00      	nop
 80009cc:	5570      	strb	r0, [r6, r5]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ce:	3501      	adds	r5, #1
 80009d0:	e7f6      	b.n	80009c0 <_read+0x8>

080009d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009d2:	b570      	push	{r4, r5, r6, lr}
 80009d4:	000e      	movs	r6, r1
 80009d6:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d8:	2500      	movs	r5, #0
 80009da:	42a5      	cmp	r5, r4
 80009dc:	db01      	blt.n	80009e2 <_write+0x10>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 80009de:	0020      	movs	r0, r4
 80009e0:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 80009e2:	5d70      	ldrb	r0, [r6, r5]
 80009e4:	e000      	b.n	80009e8 <_write+0x16>
 80009e6:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e8:	3501      	adds	r5, #1
 80009ea:	e7f6      	b.n	80009da <_write+0x8>

080009ec <_close>:

int _close(int file)
{
  (void)file;
  return -1;
 80009ec:	2001      	movs	r0, #1
}
 80009ee:	4240      	negs	r0, r0
 80009f0:	4770      	bx	lr

080009f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80009f2:	2380      	movs	r3, #128	@ 0x80
 80009f4:	019b      	lsls	r3, r3, #6
  return 0;
}
 80009f6:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 80009f8:	604b      	str	r3, [r1, #4]
}
 80009fa:	4770      	bx	lr

080009fc <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80009fc:	2001      	movs	r0, #1
 80009fe:	4770      	bx	lr

08000a00 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8000a00:	2000      	movs	r0, #0
 8000a02:	4770      	bx	lr

08000a04 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a04:	490b      	ldr	r1, [pc, #44]	@ (8000a34 <_sbrk+0x30>)
 8000a06:	4a0c      	ldr	r2, [pc, #48]	@ (8000a38 <_sbrk+0x34>)
{
 8000a08:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a0a:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a0c:	490b      	ldr	r1, [pc, #44]	@ (8000a3c <_sbrk+0x38>)
{
 8000a0e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8000a10:	6808      	ldr	r0, [r1, #0]
 8000a12:	2800      	cmp	r0, #0
 8000a14:	d101      	bne.n	8000a1a <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 8000a16:	480a      	ldr	r0, [pc, #40]	@ (8000a40 <_sbrk+0x3c>)
 8000a18:	6008      	str	r0, [r1, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a1a:	6808      	ldr	r0, [r1, #0]
 8000a1c:	18c3      	adds	r3, r0, r3
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d906      	bls.n	8000a30 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 8000a22:	f004 fa05 	bl	8004e30 <__errno>
 8000a26:	230c      	movs	r3, #12
 8000a28:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000a2a:	2001      	movs	r0, #1
 8000a2c:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8000a2e:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8000a30:	600b      	str	r3, [r1, #0]
  return (void *)prev_heap_end;
 8000a32:	e7fc      	b.n	8000a2e <_sbrk+0x2a>
 8000a34:	00000400 	.word	0x00000400
 8000a38:	20001800 	.word	0x20001800
 8000a3c:	200003e4 	.word	0x200003e4
 8000a40:	20001000 	.word	0x20001000

08000a44 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000a44:	4770      	bx	lr

08000a46 <init_queue>:
 */
#include <transmit_queue.h>
#include <uart_common.h>
void init_queue(struct transmit_queue *q) {
    q->front = 0;
    q->rear = -1;
 8000a46:	2201      	movs	r2, #1
    q->front = 0;
 8000a48:	2300      	movs	r3, #0
    q->rear = -1;
 8000a4a:	4252      	negs	r2, r2
    q->front = 0;
 8000a4c:	6603      	str	r3, [r0, #96]	@ 0x60
    q->rear = -1;
 8000a4e:	6642      	str	r2, [r0, #100]	@ 0x64
    q->size = 0;
 8000a50:	3068      	adds	r0, #104	@ 0x68
 8000a52:	7003      	strb	r3, [r0, #0]
}
 8000a54:	4770      	bx	lr

08000a56 <is_full>:
    return q->size == 0;
}

// Function to check if the queue is full
bool is_full(struct transmit_queue *q) {
    return q->size == MAX_QUEUE_SIZE;
 8000a56:	3068      	adds	r0, #104	@ 0x68
 8000a58:	7800      	ldrb	r0, [r0, #0]
 8000a5a:	3803      	subs	r0, #3
 8000a5c:	4243      	negs	r3, r0
 8000a5e:	4158      	adcs	r0, r3
 8000a60:	b2c0      	uxtb	r0, r0
}
 8000a62:	4770      	bx	lr

08000a64 <enqueue>:

// Function to enqueue an element
bool enqueue(struct transmit_queue *q, struct data item) {
 8000a64:	b082      	sub	sp, #8
 8000a66:	b570      	push	{r4, r5, r6, lr}
    return q->size == MAX_QUEUE_SIZE;
 8000a68:	0006      	movs	r6, r0
bool enqueue(struct transmit_queue *q, struct data item) {
 8000a6a:	9204      	str	r2, [sp, #16]
 8000a6c:	9305      	str	r3, [sp, #20]
    return q->size == MAX_QUEUE_SIZE;
 8000a6e:	3668      	adds	r6, #104	@ 0x68
 8000a70:	7835      	ldrb	r5, [r6, #0]
bool enqueue(struct transmit_queue *q, struct data item) {
 8000a72:	0004      	movs	r4, r0
    if (is_full(q)) {
 8000a74:	2d03      	cmp	r5, #3
 8000a76:	d107      	bne.n	8000a88 <enqueue+0x24>
        printf("Queue is full!\n");
 8000a78:	480b      	ldr	r0, [pc, #44]	@ (8000aa8 <enqueue+0x44>)
 8000a7a:	f004 f88d 	bl	8004b98 <puts>
        return false;
 8000a7e:	2000      	movs	r0, #0

    q->rear = (q->rear + 1) % MAX_QUEUE_SIZE;  // Move rear to the next position
    q->queue[q->rear] = item;                 // Add the new item
    q->size++;
    return true;
}
 8000a80:	bc70      	pop	{r4, r5, r6}
 8000a82:	bc08      	pop	{r3}
 8000a84:	b002      	add	sp, #8
 8000a86:	4718      	bx	r3
    q->rear = (q->rear + 1) % MAX_QUEUE_SIZE;  // Move rear to the next position
 8000a88:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 8000a8a:	2103      	movs	r1, #3
 8000a8c:	3001      	adds	r0, #1
 8000a8e:	f7ff fcc7 	bl	8000420 <__aeabi_idivmod>
 8000a92:	6661      	str	r1, [r4, #100]	@ 0x64
    q->queue[q->rear] = item;                 // Add the new item
 8000a94:	0149      	lsls	r1, r1, #5
 8000a96:	1860      	adds	r0, r4, r1
 8000a98:	2220      	movs	r2, #32
 8000a9a:	a904      	add	r1, sp, #16
    q->size++;
 8000a9c:	3501      	adds	r5, #1
    q->queue[q->rear] = item;                 // Add the new item
 8000a9e:	f004 f9fc 	bl	8004e9a <memcpy>
    return true;
 8000aa2:	2001      	movs	r0, #1
    q->size++;
 8000aa4:	7035      	strb	r5, [r6, #0]
    return true;
 8000aa6:	e7eb      	b.n	8000a80 <enqueue+0x1c>
 8000aa8:	080053a3 	.word	0x080053a3

08000aac <dequeue>:

// Function to dequeue an element
bool dequeue(struct transmit_queue *q, struct data *item) {
 8000aac:	b570      	push	{r4, r5, r6, lr}
 8000aae:	0004      	movs	r4, r0
    return q->size == 0;
 8000ab0:	0026      	movs	r6, r4
 8000ab2:	3668      	adds	r6, #104	@ 0x68
    if (is_empty(q)) {
 8000ab4:	7835      	ldrb	r5, [r6, #0]
bool dequeue(struct transmit_queue *q, struct data *item) {
 8000ab6:	0008      	movs	r0, r1
    if (is_empty(q)) {
 8000ab8:	2d00      	cmp	r5, #0
 8000aba:	d104      	bne.n	8000ac6 <dequeue+0x1a>
        printf("Queue is empty!\n");
 8000abc:	480d      	ldr	r0, [pc, #52]	@ (8000af4 <dequeue+0x48>)
 8000abe:	f004 f86b 	bl	8004b98 <puts>
        return false;
 8000ac2:	0028      	movs	r0, r5
    *item = q->queue[q->front];              // Retrieve the front item
    memset(&q->queue[q->front], 0, sizeof(struct data));
    q->front = (q->front + 1) % MAX_QUEUE_SIZE;  // Move front to the next position
    q->size--;
    return true;
}
 8000ac4:	bd70      	pop	{r4, r5, r6, pc}
    *item = q->queue[q->front];              // Retrieve the front item
 8000ac6:	6e25      	ldr	r5, [r4, #96]	@ 0x60
 8000ac8:	2220      	movs	r2, #32
 8000aca:	016d      	lsls	r5, r5, #5
 8000acc:	1965      	adds	r5, r4, r5
 8000ace:	0029      	movs	r1, r5
 8000ad0:	f004 f9e3 	bl	8004e9a <memcpy>
    memset(&q->queue[q->front], 0, sizeof(struct data));
 8000ad4:	2220      	movs	r2, #32
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	0028      	movs	r0, r5
 8000ada:	f004 f953 	bl	8004d84 <memset>
    q->front = (q->front + 1) % MAX_QUEUE_SIZE;  // Move front to the next position
 8000ade:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8000ae0:	2103      	movs	r1, #3
 8000ae2:	3001      	adds	r0, #1
 8000ae4:	f7ff fc9c 	bl	8000420 <__aeabi_idivmod>
 8000ae8:	6621      	str	r1, [r4, #96]	@ 0x60
    q->size--;
 8000aea:	7833      	ldrb	r3, [r6, #0]
    return true;
 8000aec:	2001      	movs	r0, #1
    q->size--;
 8000aee:	3b01      	subs	r3, #1
 8000af0:	7033      	strb	r3, [r6, #0]
    return true;
 8000af2:	e7e7      	b.n	8000ac4 <dequeue+0x18>
 8000af4:	080053b2 	.word	0x080053b2

08000af8 <calculate_crc>:
     * OUTPUTS
     *         crc : uint8_t
     *         8-bit CRC checksum
    */

    uint8_t crc = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	1841      	adds	r1, r0, r1
    uint8_t *byte = buffer;

    // Sum all bytes of data
    for (int i=0; i < data_length; i++) {
 8000afc:	4288      	cmp	r0, r1
 8000afe:	d102      	bne.n	8000b06 <calculate_crc+0xe>
        crc += *byte;
        byte++;
    }

    // Take 2s complement of the sum
    crc = (~crc) + 1;
 8000b00:	4258      	negs	r0, r3

    return crc;
 8000b02:	b2c0      	uxtb	r0, r0
}
 8000b04:	4770      	bx	lr
        crc += *byte;
 8000b06:	7802      	ldrb	r2, [r0, #0]
        byte++;
 8000b08:	3001      	adds	r0, #1
        crc += *byte;
 8000b0a:	189b      	adds	r3, r3, r2
 8000b0c:	b2db      	uxtb	r3, r3
    for (int i=0; i < data_length; i++) {
 8000b0e:	e7f5      	b.n	8000afc <calculate_crc+0x4>

08000b10 <dataToBuffer>:
 *  Created on: Dec 7, 2024
 *      Author: Rahul
 */

#include <uart_transmit.h>
void dataToBuffer(struct data data,uint8_t tx_buffer[DATA_SIZE]){
 8000b10:	b084      	sub	sp, #16
 8000b12:	b510      	push	{r4, lr}
 8000b14:	9002      	str	r0, [sp, #8]
 8000b16:	9103      	str	r1, [sp, #12]
 8000b18:	9204      	str	r2, [sp, #16]
	uint8_t* ptr = &data;
	  	for (int i =0; i <DATA_SIZE; i++){
	  		tx_buffer[i]= *ptr;
 8000b1a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8000b1c:	221b      	movs	r2, #27
 8000b1e:	a902      	add	r1, sp, #8
void dataToBuffer(struct data data,uint8_t tx_buffer[DATA_SIZE]){
 8000b20:	9305      	str	r3, [sp, #20]
	  		tx_buffer[i]= *ptr;
 8000b22:	f004 f9ba 	bl	8004e9a <memcpy>
	  		ptr++;
	  	}
	  	return;
}
 8000b26:	bc10      	pop	{r4}
 8000b28:	bc08      	pop	{r3}
 8000b2a:	b004      	add	sp, #16
 8000b2c:	4718      	bx	r3
	...

08000b30 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b30:	4813      	ldr	r0, [pc, #76]	@ (8000b80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b32:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b34:	f7ff ff86 	bl	8000a44 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000b38:	4812      	ldr	r0, [pc, #72]	@ (8000b84 <LoopForever+0x6>)
    LDR R1, [R0]
 8000b3a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000b3c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000b3e:	4a12      	ldr	r2, [pc, #72]	@ (8000b88 <LoopForever+0xa>)
    CMP R1, R2
 8000b40:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000b42:	d105      	bne.n	8000b50 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000b44:	4811      	ldr	r0, [pc, #68]	@ (8000b8c <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000b46:	4912      	ldr	r1, [pc, #72]	@ (8000b90 <LoopForever+0x12>)
    STR R1, [R0]
 8000b48:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000b4a:	4812      	ldr	r0, [pc, #72]	@ (8000b94 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000b4c:	4912      	ldr	r1, [pc, #72]	@ (8000b98 <LoopForever+0x1a>)
    STR R1, [R0]
 8000b4e:	6001      	str	r1, [r0, #0]

08000b50 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b50:	4812      	ldr	r0, [pc, #72]	@ (8000b9c <LoopForever+0x1e>)
  ldr r1, =_edata
 8000b52:	4913      	ldr	r1, [pc, #76]	@ (8000ba0 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000b54:	4a13      	ldr	r2, [pc, #76]	@ (8000ba4 <LoopForever+0x26>)
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b58:	e002      	b.n	8000b60 <LoopCopyDataInit>

08000b5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b5e:	3304      	adds	r3, #4

08000b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b64:	d3f9      	bcc.n	8000b5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b66:	4a10      	ldr	r2, [pc, #64]	@ (8000ba8 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000b68:	4c10      	ldr	r4, [pc, #64]	@ (8000bac <LoopForever+0x2e>)
  movs r3, #0
 8000b6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b6c:	e001      	b.n	8000b72 <LoopFillZerobss>

08000b6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b70:	3204      	adds	r2, #4

08000b72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b74:	d3fb      	bcc.n	8000b6e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b76:	f004 f961 	bl	8004e3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b7a:	f7ff fc91 	bl	80004a0 <main>

08000b7e <LoopForever>:

LoopForever:
    b LoopForever
 8000b7e:	e7fe      	b.n	8000b7e <LoopForever>
  ldr   r0, =_estack
 8000b80:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000b84:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000b88:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000b8c:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000b90:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000b94:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000b98:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000b9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8000ba4:	08005430 	.word	0x08005430
  ldr r2, =_sbss
 8000ba8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8000bac:	20000ffc 	.word	0x20000ffc

08000bb0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bb0:	e7fe      	b.n	8000bb0 <ADC1_IRQHandler>
	...

08000bb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb4:	b570      	push	{r4, r5, r6, lr}
 8000bb6:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bb8:	20fa      	movs	r0, #250	@ 0xfa
 8000bba:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf0 <HAL_InitTick+0x3c>)
 8000bbc:	0080      	lsls	r0, r0, #2
 8000bbe:	7819      	ldrb	r1, [r3, #0]
 8000bc0:	f7ff fabe 	bl	8000140 <__udivsi3>
 8000bc4:	4c0b      	ldr	r4, [pc, #44]	@ (8000bf4 <HAL_InitTick+0x40>)
 8000bc6:	0001      	movs	r1, r0
 8000bc8:	6820      	ldr	r0, [r4, #0]
 8000bca:	f7ff fab9 	bl	8000140 <__udivsi3>
 8000bce:	f000 f86d 	bl	8000cac <HAL_SYSTICK_Config>
 8000bd2:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8000bd4:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bd6:	2c00      	cmp	r4, #0
 8000bd8:	d109      	bne.n	8000bee <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bda:	2d03      	cmp	r5, #3
 8000bdc:	d807      	bhi.n	8000bee <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bde:	3802      	subs	r0, #2
 8000be0:	0022      	movs	r2, r4
 8000be2:	0029      	movs	r1, r5
 8000be4:	f000 f82c 	bl	8000c40 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000be8:	0020      	movs	r0, r4
 8000bea:	4b03      	ldr	r3, [pc, #12]	@ (8000bf8 <HAL_InitTick+0x44>)
 8000bec:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8000bee:	bd70      	pop	{r4, r5, r6, pc}
 8000bf0:	20000004 	.word	0x20000004
 8000bf4:	20000000 	.word	0x20000000
 8000bf8:	20000008 	.word	0x20000008

08000bfc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bfc:	2310      	movs	r3, #16
 8000bfe:	4a06      	ldr	r2, [pc, #24]	@ (8000c18 <HAL_Init+0x1c>)
{
 8000c00:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c02:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c04:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c06:	430b      	orrs	r3, r1
 8000c08:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c0a:	f7ff ffd3 	bl	8000bb4 <HAL_InitTick>
  HAL_MspInit();
 8000c0e:	f7ff fdef 	bl	80007f0 <HAL_MspInit>
}
 8000c12:	2000      	movs	r0, #0
 8000c14:	bd10      	pop	{r4, pc}
 8000c16:	46c0      	nop			@ (mov r8, r8)
 8000c18:	40022000 	.word	0x40022000

08000c1c <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000c1c:	4a03      	ldr	r2, [pc, #12]	@ (8000c2c <HAL_IncTick+0x10>)
 8000c1e:	4b04      	ldr	r3, [pc, #16]	@ (8000c30 <HAL_IncTick+0x14>)
 8000c20:	6811      	ldr	r1, [r2, #0]
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	185b      	adds	r3, r3, r1
 8000c26:	6013      	str	r3, [r2, #0]
}
 8000c28:	4770      	bx	lr
 8000c2a:	46c0      	nop			@ (mov r8, r8)
 8000c2c:	200003e8 	.word	0x200003e8
 8000c30:	20000004 	.word	0x20000004

08000c34 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000c34:	4b01      	ldr	r3, [pc, #4]	@ (8000c3c <HAL_GetTick+0x8>)
 8000c36:	6818      	ldr	r0, [r3, #0]
}
 8000c38:	4770      	bx	lr
 8000c3a:	46c0      	nop			@ (mov r8, r8)
 8000c3c:	200003e8 	.word	0x200003e8

08000c40 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c40:	b510      	push	{r4, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c42:	24ff      	movs	r4, #255	@ 0xff
 8000c44:	2203      	movs	r2, #3
 8000c46:	000b      	movs	r3, r1
 8000c48:	0021      	movs	r1, r4
 8000c4a:	4002      	ands	r2, r0
 8000c4c:	00d2      	lsls	r2, r2, #3
 8000c4e:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c50:	019b      	lsls	r3, r3, #6
 8000c52:	4023      	ands	r3, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c54:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c56:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
 8000c58:	2800      	cmp	r0, #0
 8000c5a:	db0a      	blt.n	8000c72 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c5c:	24c0      	movs	r4, #192	@ 0xc0
 8000c5e:	4a0b      	ldr	r2, [pc, #44]	@ (8000c8c <HAL_NVIC_SetPriority+0x4c>)
 8000c60:	0880      	lsrs	r0, r0, #2
 8000c62:	0080      	lsls	r0, r0, #2
 8000c64:	1880      	adds	r0, r0, r2
 8000c66:	00a4      	lsls	r4, r4, #2
 8000c68:	5902      	ldr	r2, [r0, r4]
 8000c6a:	400a      	ands	r2, r1
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	5103      	str	r3, [r0, r4]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000c70:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c72:	220f      	movs	r2, #15
 8000c74:	4010      	ands	r0, r2
 8000c76:	3808      	subs	r0, #8
 8000c78:	4a05      	ldr	r2, [pc, #20]	@ (8000c90 <HAL_NVIC_SetPriority+0x50>)
 8000c7a:	0880      	lsrs	r0, r0, #2
 8000c7c:	0080      	lsls	r0, r0, #2
 8000c7e:	1880      	adds	r0, r0, r2
 8000c80:	69c2      	ldr	r2, [r0, #28]
 8000c82:	4011      	ands	r1, r2
 8000c84:	4319      	orrs	r1, r3
 8000c86:	61c1      	str	r1, [r0, #28]
 8000c88:	e7f2      	b.n	8000c70 <HAL_NVIC_SetPriority+0x30>
 8000c8a:	46c0      	nop			@ (mov r8, r8)
 8000c8c:	e000e100 	.word	0xe000e100
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000c94:	2800      	cmp	r0, #0
 8000c96:	db05      	blt.n	8000ca4 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c98:	231f      	movs	r3, #31
 8000c9a:	4018      	ands	r0, r3
 8000c9c:	3b1e      	subs	r3, #30
 8000c9e:	4083      	lsls	r3, r0
 8000ca0:	4a01      	ldr	r2, [pc, #4]	@ (8000ca8 <HAL_NVIC_EnableIRQ+0x14>)
 8000ca2:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000ca4:	4770      	bx	lr
 8000ca6:	46c0      	nop			@ (mov r8, r8)
 8000ca8:	e000e100 	.word	0xe000e100

08000cac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cac:	2280      	movs	r2, #128	@ 0x80
 8000cae:	1e43      	subs	r3, r0, #1
 8000cb0:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cb2:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d20d      	bcs.n	8000cd4 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cb8:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cba:	4a07      	ldr	r2, [pc, #28]	@ (8000cd8 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cbc:	4807      	ldr	r0, [pc, #28]	@ (8000cdc <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cbe:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cc0:	6a03      	ldr	r3, [r0, #32]
 8000cc2:	0609      	lsls	r1, r1, #24
 8000cc4:	021b      	lsls	r3, r3, #8
 8000cc6:	0a1b      	lsrs	r3, r3, #8
 8000cc8:	430b      	orrs	r3, r1
 8000cca:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ccc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cce:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cd0:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cd2:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000cd4:	4770      	bx	lr
 8000cd6:	46c0      	nop			@ (mov r8, r8)
 8000cd8:	e000e010 	.word	0xe000e010
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ce0:	b570      	push	{r4, r5, r6, lr}
 8000ce2:	0004      	movs	r4, r0
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if (NULL == hdma)
  {
    return HAL_ERROR;
 8000ce4:	2001      	movs	r0, #1
  if (NULL == hdma)
 8000ce6:	2c00      	cmp	r4, #0
 8000ce8:	d024      	beq.n	8000d34 <HAL_DMA_Init+0x54>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000cea:	2302      	movs	r3, #2
 8000cec:	1ca5      	adds	r5, r4, #2
 8000cee:	77eb      	strb	r3, [r5, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000cf0:	6820      	ldr	r0, [r4, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000cf2:	4b11      	ldr	r3, [pc, #68]	@ (8000d38 <HAL_DMA_Init+0x58>)
  tmp = hdma->Instance->CCR;
 8000cf4:	6802      	ldr	r2, [r0, #0]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000cf6:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000cf8:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8000cfa:	6863      	ldr	r3, [r4, #4]
 8000cfc:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cfe:	68e1      	ldr	r1, [r4, #12]
 8000d00:	430b      	orrs	r3, r1
 8000d02:	6921      	ldr	r1, [r4, #16]
 8000d04:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d06:	6961      	ldr	r1, [r4, #20]
 8000d08:	430b      	orrs	r3, r1
 8000d0a:	69a1      	ldr	r1, [r4, #24]
 8000d0c:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d0e:	69e1      	ldr	r1, [r4, #28]
 8000d10:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 8000d12:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000d14:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000d16:	4b09      	ldr	r3, [pc, #36]	@ (8000d3c <HAL_DMA_Init+0x5c>)
 8000d18:	2114      	movs	r1, #20
 8000d1a:	18c0      	adds	r0, r0, r3
 8000d1c:	f7ff fa10 	bl	8000140 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <HAL_DMA_Init+0x60>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000d22:	0080      	lsls	r0, r0, #2
 8000d24:	6420      	str	r0, [r4, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8000d26:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d28:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000d2a:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d2c:	63a0      	str	r0, [r4, #56]	@ 0x38
  hdma->Lock = HAL_UNLOCKED;
 8000d2e:	18e4      	adds	r4, r4, r3
  hdma->State = HAL_DMA_STATE_READY;
 8000d30:	77eb      	strb	r3, [r5, #31]
  hdma->Lock = HAL_UNLOCKED;
 8000d32:	77e0      	strb	r0, [r4, #31]
}
 8000d34:	bd70      	pop	{r4, r5, r6, pc}
 8000d36:	46c0      	nop			@ (mov r8, r8)
 8000d38:	ffffc00f 	.word	0xffffc00f
 8000d3c:	bffdfff8 	.word	0xbffdfff8
 8000d40:	40020000 	.word	0x40020000

08000d44 <HAL_DMA_Start_IT>:
{
 8000d44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8000d46:	1c44      	adds	r4, r0, #1
{
 8000d48:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 8000d4a:	7fe5      	ldrb	r5, [r4, #31]
 8000d4c:	2d01      	cmp	r5, #1
 8000d4e:	d033      	beq.n	8000db8 <HAL_DMA_Start_IT+0x74>
 8000d50:	2501      	movs	r5, #1
  if (HAL_DMA_STATE_READY == hdma->State)
 8000d52:	1c87      	adds	r7, r0, #2
  __HAL_LOCK(hdma);
 8000d54:	77e5      	strb	r5, [r4, #31]
  if (HAL_DMA_STATE_READY == hdma->State)
 8000d56:	7ffd      	ldrb	r5, [r7, #31]
 8000d58:	2600      	movs	r6, #0
 8000d5a:	46ac      	mov	ip, r5
 8000d5c:	4663      	mov	r3, ip
 8000d5e:	b2ed      	uxtb	r5, r5
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d128      	bne.n	8000db6 <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d64:	2402      	movs	r4, #2
 8000d66:	77fc      	strb	r4, [r7, #31]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d68:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d6a:	6386      	str	r6, [r0, #56]	@ 0x38
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d6c:	6826      	ldr	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000d6e:	6c07      	ldr	r7, [r0, #64]	@ 0x40
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d70:	43ae      	bics	r6, r5
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000d72:	40bd      	lsls	r5, r7
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d74:	6026      	str	r6, [r4, #0]
  hdma->Instance->CNDTR = DataLength;
 8000d76:	9b01      	ldr	r3, [sp, #4]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000d78:	6bc6      	ldr	r6, [r0, #60]	@ 0x3c
 8000d7a:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 8000d7c:	6063      	str	r3, [r4, #4]
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000d7e:	6843      	ldr	r3, [r0, #4]
 8000d80:	2b10      	cmp	r3, #16
 8000d82:	d10e      	bne.n	8000da2 <HAL_DMA_Start_IT+0x5e>
    hdma->Instance->CPAR = DstAddress;
 8000d84:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000d86:	60e1      	str	r1, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 8000d88:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d8a:	6822      	ldr	r2, [r4, #0]
    if (NULL != hdma->XferHalfCpltCallback)
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d00b      	beq.n	8000da8 <HAL_DMA_Start_IT+0x64>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d90:	230e      	movs	r3, #14
 8000d92:	4313      	orrs	r3, r2
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000d94:	6023      	str	r3, [r4, #0]
    hdma->Instance->CCR |= DMA_CCR_EN;
 8000d96:	2301      	movs	r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8000d98:	2000      	movs	r0, #0
    hdma->Instance->CCR |= DMA_CCR_EN;
 8000d9a:	6822      	ldr	r2, [r4, #0]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	6023      	str	r3, [r4, #0]
}
 8000da0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = SrcAddress;
 8000da2:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 8000da4:	60e2      	str	r2, [r4, #12]
 8000da6:	e7ef      	b.n	8000d88 <HAL_DMA_Start_IT+0x44>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000da8:	230a      	movs	r3, #10
 8000daa:	4313      	orrs	r3, r2
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000dac:	2204      	movs	r2, #4
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000dae:	6023      	str	r3, [r4, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000db0:	6823      	ldr	r3, [r4, #0]
 8000db2:	4393      	bics	r3, r2
 8000db4:	e7ee      	b.n	8000d94 <HAL_DMA_Start_IT+0x50>
    __HAL_UNLOCK(hdma);
 8000db6:	77e6      	strb	r6, [r4, #31]
  __HAL_LOCK(hdma);
 8000db8:	2002      	movs	r0, #2
 8000dba:	e7f1      	b.n	8000da0 <HAL_DMA_Start_IT+0x5c>

08000dbc <HAL_DMA_Abort>:
{
 8000dbc:	b530      	push	{r4, r5, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000dbe:	1c84      	adds	r4, r0, #2
 8000dc0:	7fe2      	ldrb	r2, [r4, #31]
{
 8000dc2:	0003      	movs	r3, r0
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000dc4:	2a02      	cmp	r2, #2
 8000dc6:	d006      	beq.n	8000dd6 <HAL_DMA_Abort+0x1a>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dc8:	2204      	movs	r2, #4
 8000dca:	6382      	str	r2, [r0, #56]	@ 0x38
    return HAL_ERROR;
 8000dcc:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	77da      	strb	r2, [r3, #31]
}
 8000dd4:	bd30      	pop	{r4, r5, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000dd6:	6802      	ldr	r2, [r0, #0]
 8000dd8:	200e      	movs	r0, #14
 8000dda:	6811      	ldr	r1, [r2, #0]
 8000ddc:	4381      	bics	r1, r0
 8000dde:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000de0:	2101      	movs	r1, #1
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000de2:	000d      	movs	r5, r1
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000de4:	6810      	ldr	r0, [r2, #0]
 8000de6:	4388      	bics	r0, r1
 8000de8:	6010      	str	r0, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000dea:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8000dec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000dee:	4085      	lsls	r5, r0
  return HAL_OK;
 8000df0:	2000      	movs	r0, #0
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000df2:	6055      	str	r5, [r2, #4]
  hdma->State = HAL_DMA_STATE_READY;
 8000df4:	77e1      	strb	r1, [r4, #31]
  return HAL_OK;
 8000df6:	e7ea      	b.n	8000dce <HAL_DMA_Abort+0x12>

08000df8 <HAL_DMA_Abort_IT>:
{
 8000df8:	b570      	push	{r4, r5, r6, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000dfa:	1c84      	adds	r4, r0, #2
 8000dfc:	7fe3      	ldrb	r3, [r4, #31]
 8000dfe:	2b02      	cmp	r3, #2
 8000e00:	d003      	beq.n	8000e0a <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e02:	2304      	movs	r3, #4
 8000e04:	6383      	str	r3, [r0, #56]	@ 0x38
    status = HAL_ERROR;
 8000e06:	2001      	movs	r0, #1
}
 8000e08:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e0a:	210e      	movs	r1, #14
 8000e0c:	6803      	ldr	r3, [r0, #0]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	438a      	bics	r2, r1
 8000e12:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e14:	2201      	movs	r2, #1
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000e16:	0015      	movs	r5, r2
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e18:	6819      	ldr	r1, [r3, #0]
 8000e1a:	4391      	bics	r1, r2
 8000e1c:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000e1e:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8000e20:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8000e22:	408d      	lsls	r5, r1
 8000e24:	605d      	str	r5, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000e26:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8000e28:	1883      	adds	r3, r0, r2
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	77da      	strb	r2, [r3, #31]
    if (hdma->XferAbortCallback != NULL)
 8000e2e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d000      	beq.n	8000e36 <HAL_DMA_Abort_IT+0x3e>
      hdma->XferAbortCallback(hdma);
 8000e34:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000e36:	2000      	movs	r0, #0
 8000e38:	e7e6      	b.n	8000e08 <HAL_DMA_Abort_IT+0x10>

08000e3a <HAL_DMA_IRQHandler>:
{
 8000e3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000e3c:	2704      	movs	r7, #4
 8000e3e:	003e      	movs	r6, r7
 8000e40:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000e42:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000e44:	408e      	lsls	r6, r1
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000e46:	6815      	ldr	r5, [r2, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000e48:	6803      	ldr	r3, [r0, #0]
 8000e4a:	681c      	ldr	r4, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000e4c:	4235      	tst	r5, r6
 8000e4e:	d00d      	beq.n	8000e6c <HAL_DMA_IRQHandler+0x32>
 8000e50:	423c      	tst	r4, r7
 8000e52:	d00b      	beq.n	8000e6c <HAL_DMA_IRQHandler+0x32>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e54:	6819      	ldr	r1, [r3, #0]
 8000e56:	0689      	lsls	r1, r1, #26
 8000e58:	d402      	bmi.n	8000e60 <HAL_DMA_IRQHandler+0x26>
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000e5a:	6819      	ldr	r1, [r3, #0]
 8000e5c:	43b9      	bics	r1, r7
 8000e5e:	6019      	str	r1, [r3, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 8000e60:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000e62:	6056      	str	r6, [r2, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d019      	beq.n	8000e9c <HAL_DMA_IRQHandler+0x62>
      hdma->XferErrorCallback(hdma);
 8000e68:	4798      	blx	r3
}
 8000e6a:	e017      	b.n	8000e9c <HAL_DMA_IRQHandler+0x62>
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000e6c:	2702      	movs	r7, #2
 8000e6e:	003e      	movs	r6, r7
 8000e70:	408e      	lsls	r6, r1
 8000e72:	4235      	tst	r5, r6
 8000e74:	d013      	beq.n	8000e9e <HAL_DMA_IRQHandler+0x64>
 8000e76:	423c      	tst	r4, r7
 8000e78:	d011      	beq.n	8000e9e <HAL_DMA_IRQHandler+0x64>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e7a:	6819      	ldr	r1, [r3, #0]
 8000e7c:	0689      	lsls	r1, r1, #26
 8000e7e:	d406      	bmi.n	8000e8e <HAL_DMA_IRQHandler+0x54>
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000e80:	240a      	movs	r4, #10
 8000e82:	6819      	ldr	r1, [r3, #0]
 8000e84:	43a1      	bics	r1, r4
 8000e86:	6019      	str	r1, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000e88:	2101      	movs	r1, #1
 8000e8a:	19c3      	adds	r3, r0, r7
 8000e8c:	77d9      	strb	r1, [r3, #31]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000e8e:	6056      	str	r6, [r2, #4]
    __HAL_UNLOCK(hdma);
 8000e90:	2200      	movs	r2, #0
 8000e92:	1c43      	adds	r3, r0, #1
 8000e94:	77da      	strb	r2, [r3, #31]
    if (hdma->XferCpltCallback != NULL)
 8000e96:	6a83      	ldr	r3, [r0, #40]	@ 0x28
    if (hdma->XferErrorCallback != NULL)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d1e5      	bne.n	8000e68 <HAL_DMA_IRQHandler+0x2e>
}
 8000e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000e9e:	2608      	movs	r6, #8
 8000ea0:	0037      	movs	r7, r6
 8000ea2:	408f      	lsls	r7, r1
 8000ea4:	423d      	tst	r5, r7
 8000ea6:	d0f9      	beq.n	8000e9c <HAL_DMA_IRQHandler+0x62>
 8000ea8:	4234      	tst	r4, r6
 8000eaa:	d0f7      	beq.n	8000e9c <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000eac:	250e      	movs	r5, #14
 8000eae:	681c      	ldr	r4, [r3, #0]
 8000eb0:	43ac      	bics	r4, r5
 8000eb2:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	001c      	movs	r4, r3
 8000eb8:	408c      	lsls	r4, r1
 8000eba:	6054      	str	r4, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000ebc:	1c82      	adds	r2, r0, #2
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000ebe:	6383      	str	r3, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8000ec0:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	18c3      	adds	r3, r0, r3
 8000ec6:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8000ec8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8000eca:	e7e5      	b.n	8000e98 <HAL_DMA_IRQHandler+0x5e>

08000ecc <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 8000ecc:	2300      	movs	r3, #0
{
 8000ece:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ed0:	b087      	sub	sp, #28
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ed2:	680a      	ldr	r2, [r1, #0]
 8000ed4:	0014      	movs	r4, r2
 8000ed6:	40dc      	lsrs	r4, r3
 8000ed8:	d101      	bne.n	8000ede <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  } 
}
 8000eda:	b007      	add	sp, #28
 8000edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ede:	2501      	movs	r5, #1
 8000ee0:	0014      	movs	r4, r2
 8000ee2:	409d      	lsls	r5, r3
 8000ee4:	402c      	ands	r4, r5
 8000ee6:	9400      	str	r4, [sp, #0]
    if (iocurrent != 0x00u)
 8000ee8:	422a      	tst	r2, r5
 8000eea:	d100      	bne.n	8000eee <HAL_GPIO_Init+0x22>
 8000eec:	e094      	b.n	8001018 <HAL_GPIO_Init+0x14c>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000eee:	684a      	ldr	r2, [r1, #4]
 8000ef0:	005f      	lsls	r7, r3, #1
 8000ef2:	4694      	mov	ip, r2
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	4664      	mov	r4, ip
 8000ef8:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000efa:	2403      	movs	r4, #3
 8000efc:	40bc      	lsls	r4, r7
 8000efe:	43e4      	mvns	r4, r4
 8000f00:	9401      	str	r4, [sp, #4]
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f02:	1e54      	subs	r4, r2, #1
 8000f04:	2c01      	cmp	r4, #1
 8000f06:	d82e      	bhi.n	8000f66 <HAL_GPIO_Init+0x9a>
        temp = GPIOx->OSPEEDR;
 8000f08:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f0a:	9c01      	ldr	r4, [sp, #4]
 8000f0c:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f0e:	68cc      	ldr	r4, [r1, #12]
 8000f10:	40bc      	lsls	r4, r7
 8000f12:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8000f14:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000f16:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f18:	2601      	movs	r6, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f1a:	43ac      	bics	r4, r5
 8000f1c:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f1e:	4664      	mov	r4, ip
 8000f20:	0924      	lsrs	r4, r4, #4
 8000f22:	4034      	ands	r4, r6
 8000f24:	409c      	lsls	r4, r3
 8000f26:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8000f28:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8000f2a:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000f2c:	9c01      	ldr	r4, [sp, #4]
 8000f2e:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f30:	688c      	ldr	r4, [r1, #8]
 8000f32:	40bc      	lsls	r4, r7
 8000f34:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8000f36:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f38:	2a02      	cmp	r2, #2
 8000f3a:	d116      	bne.n	8000f6a <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f3c:	2507      	movs	r5, #7
 8000f3e:	260f      	movs	r6, #15
 8000f40:	401d      	ands	r5, r3
 8000f42:	00ad      	lsls	r5, r5, #2
 8000f44:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3u];
 8000f46:	08dc      	lsrs	r4, r3, #3
 8000f48:	00a4      	lsls	r4, r4, #2
 8000f4a:	1904      	adds	r4, r0, r4
 8000f4c:	9402      	str	r4, [sp, #8]
 8000f4e:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f50:	9603      	str	r6, [sp, #12]
 8000f52:	0026      	movs	r6, r4
 8000f54:	9c03      	ldr	r4, [sp, #12]
 8000f56:	43a6      	bics	r6, r4
 8000f58:	0034      	movs	r4, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f5a:	690e      	ldr	r6, [r1, #16]
 8000f5c:	40ae      	lsls	r6, r5
 8000f5e:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3u] = temp;
 8000f60:	9c02      	ldr	r4, [sp, #8]
 8000f62:	6226      	str	r6, [r4, #32]
 8000f64:	e001      	b.n	8000f6a <HAL_GPIO_Init+0x9e>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f66:	2a03      	cmp	r2, #3
 8000f68:	d1df      	bne.n	8000f2a <HAL_GPIO_Init+0x5e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f6a:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8000f6c:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f6e:	9d01      	ldr	r5, [sp, #4]
 8000f70:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f72:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f74:	24c0      	movs	r4, #192	@ 0xc0
      GPIOx->MODER = temp;
 8000f76:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f78:	4662      	mov	r2, ip
 8000f7a:	02a4      	lsls	r4, r4, #10
 8000f7c:	4222      	tst	r2, r4
 8000f7e:	d04b      	beq.n	8001018 <HAL_GPIO_Init+0x14c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f80:	2501      	movs	r5, #1
 8000f82:	4a26      	ldr	r2, [pc, #152]	@ (800101c <HAL_GPIO_Init+0x150>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f84:	2790      	movs	r7, #144	@ 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f86:	6994      	ldr	r4, [r2, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f88:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8a:	432c      	orrs	r4, r5
 8000f8c:	6194      	str	r4, [r2, #24]
 8000f8e:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000f90:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f92:	402a      	ands	r2, r5
 8000f94:	9205      	str	r2, [sp, #20]
 8000f96:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000f98:	4a21      	ldr	r2, [pc, #132]	@ (8001020 <HAL_GPIO_Init+0x154>)
 8000f9a:	00a4      	lsls	r4, r4, #2
 8000f9c:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f9e:	220f      	movs	r2, #15
 8000fa0:	3502      	adds	r5, #2
 8000fa2:	401d      	ands	r5, r3
 8000fa4:	00ad      	lsls	r5, r5, #2
 8000fa6:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2u];
 8000fa8:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000faa:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fac:	2200      	movs	r2, #0
 8000fae:	42b8      	cmp	r0, r7
 8000fb0:	d008      	beq.n	8000fc4 <HAL_GPIO_Init+0xf8>
 8000fb2:	4f1c      	ldr	r7, [pc, #112]	@ (8001024 <HAL_GPIO_Init+0x158>)
 8000fb4:	3201      	adds	r2, #1
 8000fb6:	42b8      	cmp	r0, r7
 8000fb8:	d004      	beq.n	8000fc4 <HAL_GPIO_Init+0xf8>
 8000fba:	4f1b      	ldr	r7, [pc, #108]	@ (8001028 <HAL_GPIO_Init+0x15c>)
 8000fbc:	3204      	adds	r2, #4
 8000fbe:	42b8      	cmp	r0, r7
 8000fc0:	d100      	bne.n	8000fc4 <HAL_GPIO_Init+0xf8>
 8000fc2:	3a03      	subs	r2, #3
 8000fc4:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fc6:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fc8:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fca:	60a2      	str	r2, [r4, #8]
        temp = EXTI->RTSR;
 8000fcc:	4a17      	ldr	r2, [pc, #92]	@ (800102c <HAL_GPIO_Init+0x160>)
        temp &= ~(iocurrent);
 8000fce:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->RTSR;
 8000fd0:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8000fd2:	9d00      	ldr	r5, [sp, #0]
        temp &= ~(iocurrent);
 8000fd4:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8000fd6:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fd8:	02ff      	lsls	r7, r7, #11
 8000fda:	d401      	bmi.n	8000fe0 <HAL_GPIO_Init+0x114>
        temp &= ~(iocurrent);
 8000fdc:	0035      	movs	r5, r6
 8000fde:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fe0:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 8000fe2:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000fe4:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 8000fe6:	9d00      	ldr	r5, [sp, #0]
 8000fe8:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fea:	02bf      	lsls	r7, r7, #10
 8000fec:	d401      	bmi.n	8000ff2 <HAL_GPIO_Init+0x126>
        temp &= ~(iocurrent);
 8000fee:	0035      	movs	r5, r6
 8000ff0:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ff2:	4667      	mov	r7, ip
        EXTI->FTSR = temp;
 8000ff4:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 8000ff6:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8000ff8:	9d00      	ldr	r5, [sp, #0]
 8000ffa:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ffc:	03bf      	lsls	r7, r7, #14
 8000ffe:	d401      	bmi.n	8001004 <HAL_GPIO_Init+0x138>
        temp &= ~(iocurrent);
 8001000:	0035      	movs	r5, r6
 8001002:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001004:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 8001006:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 8001008:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 800100a:	9e00      	ldr	r6, [sp, #0]
 800100c:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800100e:	03ff      	lsls	r7, r7, #15
 8001010:	d401      	bmi.n	8001016 <HAL_GPIO_Init+0x14a>
        temp &= ~(iocurrent);
 8001012:	4025      	ands	r5, r4
 8001014:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 8001016:	6016      	str	r6, [r2, #0]
    position++;
 8001018:	3301      	adds	r3, #1
 800101a:	e75a      	b.n	8000ed2 <HAL_GPIO_Init+0x6>
 800101c:	40021000 	.word	0x40021000
 8001020:	40010000 	.word	0x40010000
 8001024:	48000400 	.word	0x48000400
 8001028:	48000800 	.word	0x48000800
 800102c:	40010400 	.word	0x40010400

08001030 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001030:	b570      	push	{r4, r5, r6, lr}
 8001032:	0004      	movs	r4, r0
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
  {
    return HAL_ERROR;
 8001034:	2001      	movs	r0, #1
  if (hpcd == NULL)
 8001036:	2c00      	cmp	r4, #0
 8001038:	d02b      	beq.n	8001092 <HAL_PCD_Init+0x62>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800103a:	4d22      	ldr	r5, [pc, #136]	@ (80010c4 <HAL_PCD_Init+0x94>)
 800103c:	5d63      	ldrb	r3, [r4, r5]
 800103e:	b2da      	uxtb	r2, r3
 8001040:	2b00      	cmp	r3, #0
 8001042:	d105      	bne.n	8001050 <HAL_PCD_Init+0x20>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001044:	23a4      	movs	r3, #164	@ 0xa4
 8001046:	009b      	lsls	r3, r3, #2

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001048:	0020      	movs	r0, r4
    hpcd->Lock = HAL_UNLOCKED;
 800104a:	54e2      	strb	r2, [r4, r3]
    HAL_PCD_MspInit(hpcd);
 800104c:	f003 fb64 	bl	8004718 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001050:	2303      	movs	r3, #3
 8001052:	5563      	strb	r3, [r4, r5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001054:	6820      	ldr	r0, [r4, #0]
 8001056:	f002 f88d 	bl	8003174 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800105a:	2300      	movs	r3, #0
 800105c:	0022      	movs	r2, r4
 800105e:	0019      	movs	r1, r3
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001060:	2601      	movs	r6, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001062:	7920      	ldrb	r0, [r4, #4]
 8001064:	3210      	adds	r2, #16
 8001066:	4298      	cmp	r0, r3
 8001068:	d114      	bne.n	8001094 <HAL_PCD_Init+0x64>
    hpcd->IN_ep[i].maxpacket = 0U;
    hpcd->IN_ep[i].xfer_buff = 0U;
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800106a:	2100      	movs	r1, #0
 800106c:	0022      	movs	r2, r4
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800106e:	0008      	movs	r0, r1
 8001070:	3251      	adds	r2, #81	@ 0x51
 8001072:	32ff      	adds	r2, #255	@ 0xff
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001074:	428b      	cmp	r3, r1
 8001076:	d117      	bne.n	80010a8 <HAL_PCD_Init+0x78>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001078:	6861      	ldr	r1, [r4, #4]
 800107a:	68a2      	ldr	r2, [r4, #8]
 800107c:	6820      	ldr	r0, [r4, #0]
 800107e:	f002 f883 	bl	8003188 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001082:	2300      	movs	r3, #0
 8001084:	7323      	strb	r3, [r4, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001086:	3301      	adds	r3, #1
 8001088:	5563      	strb	r3, [r4, r5]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800108a:	7aa3      	ldrb	r3, [r4, #10]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d015      	beq.n	80010bc <HAL_PCD_Init+0x8c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }

  return HAL_OK;
 8001090:	2000      	movs	r0, #0
}
 8001092:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->IN_ep[i].num = i;
 8001094:	7013      	strb	r3, [r2, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001096:	3301      	adds	r3, #1
    hpcd->IN_ep[i].is_in = 1U;
 8001098:	7056      	strb	r6, [r2, #1]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800109a:	70d1      	strb	r1, [r2, #3]
    hpcd->IN_ep[i].maxpacket = 0U;
 800109c:	6111      	str	r1, [r2, #16]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800109e:	6151      	str	r1, [r2, #20]
    hpcd->IN_ep[i].xfer_len = 0U;
 80010a0:	6191      	str	r1, [r2, #24]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	3228      	adds	r2, #40	@ 0x28
 80010a6:	e7de      	b.n	8001066 <HAL_PCD_Init+0x36>
    hpcd->OUT_ep[i].num = i;
 80010a8:	7011      	strb	r1, [r2, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010aa:	3101      	adds	r1, #1
    hpcd->OUT_ep[i].is_in = 0U;
 80010ac:	7050      	strb	r0, [r2, #1]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80010ae:	70d0      	strb	r0, [r2, #3]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80010b0:	6110      	str	r0, [r2, #16]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80010b2:	6150      	str	r0, [r2, #20]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80010b4:	6190      	str	r0, [r2, #24]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010b6:	b2c9      	uxtb	r1, r1
 80010b8:	3228      	adds	r2, #40	@ 0x28
 80010ba:	e7db      	b.n	8001074 <HAL_PCD_Init+0x44>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80010bc:	0020      	movs	r0, r4
 80010be:	f000 fe0e 	bl	8001cde <HAL_PCDEx_ActivateLPM>
 80010c2:	e7e5      	b.n	8001090 <HAL_PCD_Init+0x60>
 80010c4:	00000291 	.word	0x00000291

080010c8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80010c8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hpcd);
 80010ca:	25a4      	movs	r5, #164	@ 0xa4
 80010cc:	00ad      	lsls	r5, r5, #2
 80010ce:	5d43      	ldrb	r3, [r0, r5]
{
 80010d0:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 80010d2:	2002      	movs	r0, #2
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d009      	beq.n	80010ec <HAL_PCD_Start+0x24>
 80010d8:	2301      	movs	r3, #1
 80010da:	5563      	strb	r3, [r4, r5]
  __HAL_PCD_ENABLE(hpcd);
 80010dc:	6820      	ldr	r0, [r4, #0]
 80010de:	f002 f83f 	bl	8003160 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80010e2:	6820      	ldr	r0, [r4, #0]
 80010e4:	f002 fa49 	bl	800357a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80010e8:	2000      	movs	r0, #0
 80010ea:	5560      	strb	r0, [r4, r5]

  return HAL_OK;
}
 80010ec:	bd70      	pop	{r4, r5, r6, pc}

080010ee <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80010ee:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hpcd);
 80010f0:	25a4      	movs	r5, #164	@ 0xa4
 80010f2:	00ad      	lsls	r5, r5, #2
 80010f4:	5d43      	ldrb	r3, [r0, r5]
{
 80010f6:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 80010f8:	2002      	movs	r0, #2
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d007      	beq.n	800110e <HAL_PCD_SetAddress+0x20>
 80010fe:	2301      	movs	r3, #1
 8001100:	5563      	strb	r3, [r4, r5]
  hpcd->USB_Address = address;
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001102:	6820      	ldr	r0, [r4, #0]
  hpcd->USB_Address = address;
 8001104:	7321      	strb	r1, [r4, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001106:	f002 fa31 	bl	800356c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800110a:	2000      	movs	r0, #0
 800110c:	5560      	strb	r0, [r4, r5]

  return HAL_OK;
}
 800110e:	bd70      	pop	{r4, r5, r6, pc}

08001110 <HAL_PCD_IRQHandler>:
{
 8001110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001112:	0004      	movs	r4, r0
 8001114:	b085      	sub	sp, #20
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001116:	6800      	ldr	r0, [r0, #0]
 8001118:	f002 fa37 	bl	800358a <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800111c:	2380      	movs	r3, #128	@ 0x80
 800111e:	0005      	movs	r5, r0
 8001120:	021b      	lsls	r3, r3, #8
 8001122:	401d      	ands	r5, r3
 8001124:	4218      	tst	r0, r3
 8001126:	d101      	bne.n	800112c <HAL_PCD_IRQHandler+0x1c>
 8001128:	f000 fc27 	bl	800197a <HAL_PCD_IRQHandler+0x86a>
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800112c:	6820      	ldr	r0, [r4, #0]
 800112e:	1d82      	adds	r2, r0, #6
 8001130:	8fd3      	ldrh	r3, [r2, #62]	@ 0x3e
 8001132:	b21b      	sxth	r3, r3
 8001134:	2b00      	cmp	r3, #0
 8001136:	db01      	blt.n	800113c <HAL_PCD_IRQHandler+0x2c>
}
 8001138:	b005      	add	sp, #20
 800113a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  {
    wIstr = hpcd->Instance->ISTR;

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800113c:	210f      	movs	r1, #15
    wIstr = hpcd->Instance->ISTR;
 800113e:	8fd3      	ldrh	r3, [r2, #62]	@ 0x3e
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001140:	4019      	ands	r1, r3
 8001142:	9100      	str	r1, [sp, #0]

    if (epindex == 0U)
 8001144:	210f      	movs	r1, #15
    wIstr = hpcd->Instance->ISTR;
 8001146:	b29a      	uxth	r2, r3
    if (epindex == 0U)
 8001148:	420b      	tst	r3, r1
 800114a:	d000      	beq.n	800114e <HAL_PCD_IRQHandler+0x3e>
 800114c:	e0c0      	b.n	80012d0 <HAL_PCD_IRQHandler+0x1c0>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800114e:	2310      	movs	r3, #16
 8001150:	0011      	movs	r1, r2
 8001152:	4019      	ands	r1, r3
 8001154:	421a      	tst	r2, r3
 8001156:	d127      	bne.n	80011a8 <HAL_PCD_IRQHandler+0x98>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001158:	8803      	ldrh	r3, [r0, #0]
 800115a:	4aca      	ldr	r2, [pc, #808]	@ (8001484 <HAL_PCD_IRQHandler+0x374>)
 800115c:	4013      	ands	r3, r2
 800115e:	2280      	movs	r2, #128	@ 0x80
 8001160:	0212      	lsls	r2, r2, #8
 8001162:	4313      	orrs	r3, r2
 8001164:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001166:	0003      	movs	r3, r0
 8001168:	3350      	adds	r3, #80	@ 0x50
 800116a:	881a      	ldrh	r2, [r3, #0]
 800116c:	7c23      	ldrb	r3, [r4, #16]
 800116e:	00db      	lsls	r3, r3, #3
 8001170:	18c3      	adds	r3, r0, r3
 8001172:	189b      	adds	r3, r3, r2
 8001174:	4ac4      	ldr	r2, [pc, #784]	@ (8001488 <HAL_PCD_IRQHandler+0x378>)

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001176:	0020      	movs	r0, r4
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001178:	189b      	adds	r3, r3, r2
 800117a:	881b      	ldrh	r3, [r3, #0]
        ep->xfer_buff += ep->xfer_count;
 800117c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800117e:	059b      	lsls	r3, r3, #22
 8001180:	0d9b      	lsrs	r3, r3, #22
 8001182:	62e3      	str	r3, [r4, #44]	@ 0x2c
        ep->xfer_buff += ep->xfer_count;
 8001184:	18d3      	adds	r3, r2, r3
 8001186:	6263      	str	r3, [r4, #36]	@ 0x24
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001188:	f003 faf7 	bl	800477a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800118c:	7b23      	ldrb	r3, [r4, #12]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d0cc      	beq.n	800112c <HAL_PCD_IRQHandler+0x1c>
 8001192:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001194:	6823      	ldr	r3, [r4, #0]
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001196:	2900      	cmp	r1, #0
 8001198:	d1c8      	bne.n	800112c <HAL_PCD_IRQHandler+0x1c>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800119a:	2080      	movs	r0, #128	@ 0x80
 800119c:	7b22      	ldrb	r2, [r4, #12]
 800119e:	334c      	adds	r3, #76	@ 0x4c
 80011a0:	4302      	orrs	r2, r0
 80011a2:	801a      	strh	r2, [r3, #0]
          hpcd->USB_Address = 0U;
 80011a4:	7321      	strb	r1, [r4, #12]
 80011a6:	e7c1      	b.n	800112c <HAL_PCD_IRQHandler+0x1c>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80011a8:	8802      	ldrh	r2, [r0, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80011aa:	2180      	movs	r1, #128	@ 0x80
 80011ac:	0016      	movs	r6, r2
 80011ae:	0109      	lsls	r1, r1, #4
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80011b0:	b293      	uxth	r3, r2
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80011b2:	400e      	ands	r6, r1
 80011b4:	420a      	tst	r2, r1
 80011b6:	d022      	beq.n	80011fe <HAL_PCD_IRQHandler+0xee>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80011b8:	0003      	movs	r3, r0
 80011ba:	3350      	adds	r3, #80	@ 0x50
 80011bc:	881a      	ldrh	r2, [r3, #0]
 80011be:	23a8      	movs	r3, #168	@ 0xa8
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	5ce3      	ldrb	r3, [r4, r3]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80011c4:	21a6      	movs	r1, #166	@ 0xa6
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80011c6:	00db      	lsls	r3, r3, #3
 80011c8:	18c3      	adds	r3, r0, r3
 80011ca:	189b      	adds	r3, r3, r2
 80011cc:	4aaf      	ldr	r2, [pc, #700]	@ (800148c <HAL_PCD_IRQHandler+0x37c>)
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80011ce:	0089      	lsls	r1, r1, #2
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80011d0:	189b      	adds	r3, r3, r2
 80011d2:	0022      	movs	r2, r4
 80011d4:	881b      	ldrh	r3, [r3, #0]
 80011d6:	3251      	adds	r2, #81	@ 0x51
 80011d8:	059b      	lsls	r3, r3, #22
 80011da:	0d9b      	lsrs	r3, r3, #22
 80011dc:	32ff      	adds	r2, #255	@ 0xff
 80011de:	61d3      	str	r3, [r2, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80011e0:	1861      	adds	r1, r4, r1
 80011e2:	88d2      	ldrh	r2, [r2, #6]
 80011e4:	f002 fc1c 	bl	8003a20 <USB_ReadPMA>
                      ep->pmaadress, (uint16_t)ep->xfer_count);

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80011e8:	6821      	ldr	r1, [r4, #0]
 80011ea:	4ba9      	ldr	r3, [pc, #676]	@ (8001490 <HAL_PCD_IRQHandler+0x380>)
 80011ec:	880a      	ldrh	r2, [r1, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80011ee:	0020      	movs	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80011f0:	401a      	ands	r2, r3
 80011f2:	2380      	movs	r3, #128	@ 0x80
 80011f4:	4313      	orrs	r3, r2
 80011f6:	800b      	strh	r3, [r1, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80011f8:	f003 faaa 	bl	8004750 <HAL_PCD_SetupStageCallback>
 80011fc:	e796      	b.n	800112c <HAL_PCD_IRQHandler+0x1c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80011fe:	b21b      	sxth	r3, r3
 8001200:	2b00      	cmp	r3, #0
 8001202:	db00      	blt.n	8001206 <HAL_PCD_IRQHandler+0xf6>
 8001204:	e792      	b.n	800112c <HAL_PCD_IRQHandler+0x1c>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001206:	8802      	ldrh	r2, [r0, #0]
 8001208:	4ba1      	ldr	r3, [pc, #644]	@ (8001490 <HAL_PCD_IRQHandler+0x380>)

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800120a:	0025      	movs	r5, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800120c:	401a      	ands	r2, r3
 800120e:	2380      	movs	r3, #128	@ 0x80
 8001210:	4313      	orrs	r3, r2
 8001212:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001214:	0003      	movs	r3, r0
 8001216:	3350      	adds	r3, #80	@ 0x50
 8001218:	881a      	ldrh	r2, [r3, #0]
 800121a:	23a8      	movs	r3, #168	@ 0xa8
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	5ce3      	ldrb	r3, [r4, r3]
 8001220:	3551      	adds	r5, #81	@ 0x51
 8001222:	00db      	lsls	r3, r3, #3
 8001224:	18c3      	adds	r3, r0, r3
 8001226:	189b      	adds	r3, r3, r2
 8001228:	4a98      	ldr	r2, [pc, #608]	@ (800148c <HAL_PCD_IRQHandler+0x37c>)
 800122a:	35ff      	adds	r5, #255	@ 0xff
 800122c:	189b      	adds	r3, r3, r2
 800122e:	881b      	ldrh	r3, [r3, #0]
 8001230:	059b      	lsls	r3, r3, #22
 8001232:	0d9b      	lsrs	r3, r3, #22
 8001234:	61eb      	str	r3, [r5, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001236:	d00d      	beq.n	8001254 <HAL_PCD_IRQHandler+0x144>
 8001238:	6969      	ldr	r1, [r5, #20]
 800123a:	2900      	cmp	r1, #0
 800123c:	d00a      	beq.n	8001254 <HAL_PCD_IRQHandler+0x144>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800123e:	88ea      	ldrh	r2, [r5, #6]
 8001240:	f002 fbee 	bl	8003a20 <USB_ReadPMA>
                        ep->pmaadress, (uint16_t)ep->xfer_count);

            ep->xfer_buff += ep->xfer_count;
 8001244:	696b      	ldr	r3, [r5, #20]
 8001246:	69ea      	ldr	r2, [r5, #28]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001248:	0031      	movs	r1, r6
            ep->xfer_buff += ep->xfer_count;
 800124a:	189b      	adds	r3, r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800124c:	0020      	movs	r0, r4
            ep->xfer_buff += ep->xfer_count;
 800124e:	616b      	str	r3, [r5, #20]
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001250:	f003 fa87 	bl	8004762 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001254:	6821      	ldr	r1, [r4, #0]
 8001256:	880a      	ldrh	r2, [r1, #0]
 8001258:	b293      	uxth	r3, r2

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800125a:	0512      	lsls	r2, r2, #20
 800125c:	d500      	bpl.n	8001260 <HAL_PCD_IRQHandler+0x150>
 800125e:	e765      	b.n	800112c <HAL_PCD_IRQHandler+0x1c>
 8001260:	22c0      	movs	r2, #192	@ 0xc0
 8001262:	0192      	lsls	r2, r2, #6
 8001264:	4013      	ands	r3, r2
 8001266:	4293      	cmp	r3, r2
 8001268:	d100      	bne.n	800126c <HAL_PCD_IRQHandler+0x15c>
 800126a:	e75f      	b.n	800112c <HAL_PCD_IRQHandler+0x1c>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800126c:	000b      	movs	r3, r1
 800126e:	4a87      	ldr	r2, [pc, #540]	@ (800148c <HAL_PCD_IRQHandler+0x37c>)
 8001270:	3350      	adds	r3, #80	@ 0x50
 8001272:	881b      	ldrh	r3, [r3, #0]
 8001274:	188a      	adds	r2, r1, r2
 8001276:	18d2      	adds	r2, r2, r3
 8001278:	8813      	ldrh	r3, [r2, #0]
 800127a:	059b      	lsls	r3, r3, #22
 800127c:	0d9b      	lsrs	r3, r3, #22
 800127e:	8013      	strh	r3, [r2, #0]
 8001280:	692b      	ldr	r3, [r5, #16]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d10e      	bne.n	80012a4 <HAL_PCD_IRQHandler+0x194>
 8001286:	2080      	movs	r0, #128	@ 0x80
 8001288:	8813      	ldrh	r3, [r2, #0]
 800128a:	0200      	lsls	r0, r0, #8
 800128c:	4303      	orrs	r3, r0
 800128e:	8013      	strh	r3, [r2, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001290:	880a      	ldrh	r2, [r1, #0]
 8001292:	4b80      	ldr	r3, [pc, #512]	@ (8001494 <HAL_PCD_IRQHandler+0x384>)
 8001294:	401a      	ands	r2, r3
 8001296:	23c0      	movs	r3, #192	@ 0xc0
 8001298:	019b      	lsls	r3, r3, #6
 800129a:	4053      	eors	r3, r2
 800129c:	4a7e      	ldr	r2, [pc, #504]	@ (8001498 <HAL_PCD_IRQHandler+0x388>)
 800129e:	4313      	orrs	r3, r2
 80012a0:	800b      	strh	r3, [r1, #0]
 80012a2:	e743      	b.n	800112c <HAL_PCD_IRQHandler+0x1c>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80012a4:	2b3e      	cmp	r3, #62	@ 0x3e
 80012a6:	d808      	bhi.n	80012ba <HAL_PCD_IRQHandler+0x1aa>
 80012a8:	2501      	movs	r5, #1
 80012aa:	0858      	lsrs	r0, r3, #1
 80012ac:	402b      	ands	r3, r5
 80012ae:	18c0      	adds	r0, r0, r3
 80012b0:	8813      	ldrh	r3, [r2, #0]
 80012b2:	0280      	lsls	r0, r0, #10
 80012b4:	4303      	orrs	r3, r0
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	e7e9      	b.n	800128e <HAL_PCD_IRQHandler+0x17e>
 80012ba:	251f      	movs	r5, #31
 80012bc:	0958      	lsrs	r0, r3, #5
 80012be:	402b      	ands	r3, r5
 80012c0:	425d      	negs	r5, r3
 80012c2:	416b      	adcs	r3, r5
 80012c4:	1ac0      	subs	r0, r0, r3
 80012c6:	8813      	ldrh	r3, [r2, #0]
 80012c8:	0280      	lsls	r0, r0, #10
 80012ca:	4318      	orrs	r0, r3
 80012cc:	4b73      	ldr	r3, [pc, #460]	@ (800149c <HAL_PCD_IRQHandler+0x38c>)
 80012ce:	e7f1      	b.n	80012b4 <HAL_PCD_IRQHandler+0x1a4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80012d0:	9b00      	ldr	r3, [sp, #0]
 80012d2:	009f      	lsls	r7, r3, #2
 80012d4:	19c2      	adds	r2, r0, r7
 80012d6:	8813      	ldrh	r3, [r2, #0]
 80012d8:	b299      	uxth	r1, r3

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80012da:	b21b      	sxth	r3, r3
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80012dc:	9101      	str	r1, [sp, #4]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80012de:	2b00      	cmp	r3, #0
 80012e0:	db00      	blt.n	80012e4 <HAL_PCD_IRQHandler+0x1d4>
 80012e2:	e092      	b.n	800140a <HAL_PCD_IRQHandler+0x2fa>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80012e4:	8813      	ldrh	r3, [r2, #0]
 80012e6:	496a      	ldr	r1, [pc, #424]	@ (8001490 <HAL_PCD_IRQHandler+0x380>)
 80012e8:	400b      	ands	r3, r1
 80012ea:	2180      	movs	r1, #128	@ 0x80
 80012ec:	430b      	orrs	r3, r1
 80012ee:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->OUT_ep[epindex];

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80012f0:	2328      	movs	r3, #40	@ 0x28
 80012f2:	9a00      	ldr	r2, [sp, #0]
 80012f4:	4353      	muls	r3, r2
 80012f6:	18e3      	adds	r3, r4, r3
 80012f8:	001a      	movs	r2, r3
 80012fa:	001d      	movs	r5, r3
 80012fc:	325d      	adds	r2, #93	@ 0x5d
 80012fe:	32ff      	adds	r2, #255	@ 0xff
 8001300:	7812      	ldrb	r2, [r2, #0]
 8001302:	3551      	adds	r5, #81	@ 0x51
 8001304:	35ff      	adds	r5, #255	@ 0xff
 8001306:	2a00      	cmp	r2, #0
 8001308:	d114      	bne.n	8001334 <HAL_PCD_IRQHandler+0x224>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800130a:	0002      	movs	r2, r0
 800130c:	3250      	adds	r2, #80	@ 0x50
 800130e:	8811      	ldrh	r1, [r2, #0]
 8001310:	782a      	ldrb	r2, [r5, #0]
 8001312:	00d2      	lsls	r2, r2, #3
 8001314:	1852      	adds	r2, r2, r1
 8001316:	495d      	ldr	r1, [pc, #372]	@ (800148c <HAL_PCD_IRQHandler+0x37c>)
 8001318:	1812      	adds	r2, r2, r0
 800131a:	1852      	adds	r2, r2, r1
 800131c:	8812      	ldrh	r2, [r2, #0]
 800131e:	0592      	lsls	r2, r2, #22
 8001320:	0d95      	lsrs	r5, r2, #22

          if (count != 0U)
 8001322:	2a00      	cmp	r2, #0
 8001324:	d056      	beq.n	80013d4 <HAL_PCD_IRQHandler+0x2c4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001326:	001a      	movs	r2, r3
 8001328:	3257      	adds	r2, #87	@ 0x57
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);

              if (count != 0U)
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800132a:	32ff      	adds	r2, #255	@ 0xff
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800132c:	33fc      	adds	r3, #252	@ 0xfc
 800132e:	0019      	movs	r1, r3
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001330:	8812      	ldrh	r2, [r2, #0]
 8001332:	e04b      	b.n	80013cc <HAL_PCD_IRQHandler+0x2bc>
          if (ep->type == EP_TYPE_BULK)
 8001334:	0019      	movs	r1, r3
 8001336:	3154      	adds	r1, #84	@ 0x54
 8001338:	31ff      	adds	r1, #255	@ 0xff
 800133a:	7809      	ldrb	r1, [r1, #0]

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800133c:	782a      	ldrb	r2, [r5, #0]
          if (ep->type == EP_TYPE_BULK)
 800133e:	2902      	cmp	r1, #2
 8001340:	d000      	beq.n	8001344 <HAL_PCD_IRQHandler+0x234>
 8001342:	e0e3      	b.n	800150c <HAL_PCD_IRQHandler+0x3fc>
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001344:	2680      	movs	r6, #128	@ 0x80
 8001346:	01f6      	lsls	r6, r6, #7
 8001348:	46b4      	mov	ip, r6
 800134a:	4665      	mov	r5, ip
 800134c:	9e01      	ldr	r6, [sp, #4]

    if (ep->xfer_len >= count)
 800134e:	33fc      	adds	r3, #252	@ 0xfc
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001350:	402e      	ands	r6, r5
 8001352:	9603      	str	r6, [sp, #12]
 8001354:	0006      	movs	r6, r0
 8001356:	3650      	adds	r6, #80	@ 0x50
 8001358:	9602      	str	r6, [sp, #8]
 800135a:	4666      	mov	r6, ip
 800135c:	9d01      	ldr	r5, [sp, #4]
    if (ep->xfer_len >= count)
 800135e:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001360:	4235      	tst	r5, r6
 8001362:	d100      	bne.n	8001366 <HAL_PCD_IRQHandler+0x256>
 8001364:	e0a0      	b.n	80014a8 <HAL_PCD_IRQHandler+0x398>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001366:	9d02      	ldr	r5, [sp, #8]
 8001368:	882e      	ldrh	r6, [r5, #0]
 800136a:	00d5      	lsls	r5, r2, #3
 800136c:	1986      	adds	r6, r0, r6
 800136e:	1976      	adds	r6, r6, r5
 8001370:	4d45      	ldr	r5, [pc, #276]	@ (8001488 <HAL_PCD_IRQHandler+0x378>)
 8001372:	1976      	adds	r6, r6, r5
 8001374:	8835      	ldrh	r5, [r6, #0]
 8001376:	05ad      	lsls	r5, r5, #22
 8001378:	0dad      	lsrs	r5, r5, #22
    if (ep->xfer_len >= count)
 800137a:	428d      	cmp	r5, r1
 800137c:	d90d      	bls.n	800139a <HAL_PCD_IRQHandler+0x28a>
 800137e:	2100      	movs	r1, #0
 8001380:	66d9      	str	r1, [r3, #108]	@ 0x6c
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001382:	0091      	lsls	r1, r2, #2
 8001384:	1841      	adds	r1, r0, r1
 8001386:	880e      	ldrh	r6, [r1, #0]
 8001388:	4b42      	ldr	r3, [pc, #264]	@ (8001494 <HAL_PCD_IRQHandler+0x384>)
 800138a:	401e      	ands	r6, r3
 800138c:	2380      	movs	r3, #128	@ 0x80
 800138e:	019b      	lsls	r3, r3, #6
 8001390:	4073      	eors	r3, r6
 8001392:	4e41      	ldr	r6, [pc, #260]	@ (8001498 <HAL_PCD_IRQHandler+0x388>)
 8001394:	4333      	orrs	r3, r6
 8001396:	800b      	strh	r3, [r1, #0]
 8001398:	e002      	b.n	80013a0 <HAL_PCD_IRQHandler+0x290>
      ep->xfer_len -= count;
 800139a:	1b49      	subs	r1, r1, r5
 800139c:	66d9      	str	r1, [r3, #108]	@ 0x6c
    if (ep->xfer_len == 0U)
 800139e:	d0f0      	beq.n	8001382 <HAL_PCD_IRQHandler+0x272>
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80013a0:	9b01      	ldr	r3, [sp, #4]
 80013a2:	065b      	lsls	r3, r3, #25
 80013a4:	d507      	bpl.n	80013b6 <HAL_PCD_IRQHandler+0x2a6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80013a6:	0092      	lsls	r2, r2, #2
 80013a8:	1882      	adds	r2, r0, r2
 80013aa:	8813      	ldrh	r3, [r2, #0]
 80013ac:	493c      	ldr	r1, [pc, #240]	@ (80014a0 <HAL_PCD_IRQHandler+0x390>)
 80013ae:	400b      	ands	r3, r1
 80013b0:	493c      	ldr	r1, [pc, #240]	@ (80014a4 <HAL_PCD_IRQHandler+0x394>)
 80013b2:	430b      	orrs	r3, r1
 80013b4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80013b6:	2d00      	cmp	r5, #0
 80013b8:	d00c      	beq.n	80013d4 <HAL_PCD_IRQHandler+0x2c4>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80013ba:	2328      	movs	r3, #40	@ 0x28
 80013bc:	9a00      	ldr	r2, [sp, #0]
 80013be:	4353      	muls	r3, r2
 80013c0:	18e1      	adds	r1, r4, r3
 80013c2:	000a      	movs	r2, r1
 80013c4:	3259      	adds	r2, #89	@ 0x59
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
    }

    if (count != 0U)
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80013c6:	32ff      	adds	r2, #255	@ 0xff
 80013c8:	8812      	ldrh	r2, [r2, #0]
 80013ca:	31fc      	adds	r1, #252	@ 0xfc
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80013cc:	002b      	movs	r3, r5
 80013ce:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80013d0:	f002 fb26 	bl	8003a20 <USB_ReadPMA>
        ep->xfer_count += count;
 80013d4:	2328      	movs	r3, #40	@ 0x28
 80013d6:	9900      	ldr	r1, [sp, #0]
 80013d8:	4359      	muls	r1, r3
 80013da:	1862      	adds	r2, r4, r1
 80013dc:	32fc      	adds	r2, #252	@ 0xfc
 80013de:	6f10      	ldr	r0, [r2, #112]	@ 0x70
 80013e0:	1940      	adds	r0, r0, r5
 80013e2:	6710      	str	r0, [r2, #112]	@ 0x70
        ep->xfer_buff += count;
 80013e4:	6e90      	ldr	r0, [r2, #104]	@ 0x68
 80013e6:	1940      	adds	r0, r0, r5
 80013e8:	6690      	str	r0, [r2, #104]	@ 0x68
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80013ea:	6ed0      	ldr	r0, [r2, #108]	@ 0x6c
 80013ec:	2800      	cmp	r0, #0
 80013ee:	d003      	beq.n	80013f8 <HAL_PCD_IRQHandler+0x2e8>
 80013f0:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80013f2:	4295      	cmp	r5, r2
 80013f4:	d300      	bcc.n	80013f8 <HAL_PCD_IRQHandler+0x2e8>
 80013f6:	e0b3      	b.n	8001560 <HAL_PCD_IRQHandler+0x450>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80013f8:	9a00      	ldr	r2, [sp, #0]
 80013fa:	0020      	movs	r0, r4
 80013fc:	4353      	muls	r3, r2
 80013fe:	18e3      	adds	r3, r4, r3
 8001400:	3351      	adds	r3, #81	@ 0x51
 8001402:	33ff      	adds	r3, #255	@ 0xff
 8001404:	7819      	ldrb	r1, [r3, #0]
 8001406:	f003 f9ac 	bl	8004762 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800140a:	2280      	movs	r2, #128	@ 0x80
 800140c:	9b01      	ldr	r3, [sp, #4]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800140e:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001410:	4213      	tst	r3, r2
 8001412:	d100      	bne.n	8001416 <HAL_PCD_IRQHandler+0x306>
 8001414:	e68a      	b.n	800112c <HAL_PCD_IRQHandler+0x1c>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001416:	19c2      	adds	r2, r0, r7
 8001418:	8813      	ldrh	r3, [r2, #0]
 800141a:	491a      	ldr	r1, [pc, #104]	@ (8001484 <HAL_PCD_IRQHandler+0x374>)
        if (ep->type == EP_TYPE_ISOC)
 800141c:	9e00      	ldr	r6, [sp, #0]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800141e:	400b      	ands	r3, r1
 8001420:	491e      	ldr	r1, [pc, #120]	@ (800149c <HAL_PCD_IRQHandler+0x38c>)
 8001422:	430b      	orrs	r3, r1
 8001424:	b29b      	uxth	r3, r3
 8001426:	8013      	strh	r3, [r2, #0]
        if (ep->type == EP_TYPE_ISOC)
 8001428:	2228      	movs	r2, #40	@ 0x28
 800142a:	4356      	muls	r6, r2
 800142c:	19a3      	adds	r3, r4, r6
 800142e:	7cd9      	ldrb	r1, [r3, #19]
 8001430:	2901      	cmp	r1, #1
 8001432:	d000      	beq.n	8001436 <HAL_PCD_IRQHandler+0x326>
 8001434:	e0c7      	b.n	80015c6 <HAL_PCD_IRQHandler+0x4b6>
          ep->xfer_len = 0U;
 8001436:	9900      	ldr	r1, [sp, #0]
 8001438:	3101      	adds	r1, #1
 800143a:	434a      	muls	r2, r1
 800143c:	2100      	movs	r1, #0
 800143e:	5111      	str	r1, [r2, r4]
          if (ep->doublebuffer != 0U)
 8001440:	7f1a      	ldrb	r2, [r3, #28]
 8001442:	428a      	cmp	r2, r1
 8001444:	d100      	bne.n	8001448 <HAL_PCD_IRQHandler+0x338>
 8001446:	e09e      	b.n	8001586 <HAL_PCD_IRQHandler+0x476>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001448:	2240      	movs	r2, #64	@ 0x40
 800144a:	9d01      	ldr	r5, [sp, #4]
 800144c:	9e01      	ldr	r6, [sp, #4]
 800144e:	4015      	ands	r5, r2
 8001450:	4216      	tst	r6, r2
 8001452:	d100      	bne.n	8001456 <HAL_PCD_IRQHandler+0x346>
 8001454:	e0a0      	b.n	8001598 <HAL_PCD_IRQHandler+0x488>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001456:	7c5a      	ldrb	r2, [r3, #17]
 8001458:	428a      	cmp	r2, r1
 800145a:	d000      	beq.n	800145e <HAL_PCD_IRQHandler+0x34e>
 800145c:	e087      	b.n	800156e <HAL_PCD_IRQHandler+0x45e>
 800145e:	0002      	movs	r2, r0
 8001460:	3250      	adds	r2, #80	@ 0x50
 8001462:	8811      	ldrh	r1, [r2, #0]
 8001464:	7c1a      	ldrb	r2, [r3, #16]
 8001466:	4b08      	ldr	r3, [pc, #32]	@ (8001488 <HAL_PCD_IRQHandler+0x378>)
 8001468:	00d2      	lsls	r2, r2, #3
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800146a:	18c0      	adds	r0, r0, r3
 800146c:	1841      	adds	r1, r0, r1
 800146e:	1852      	adds	r2, r2, r1
 8001470:	8813      	ldrh	r3, [r2, #0]
 8001472:	490a      	ldr	r1, [pc, #40]	@ (800149c <HAL_PCD_IRQHandler+0x38c>)
 8001474:	059b      	lsls	r3, r3, #22
 8001476:	0d9b      	lsrs	r3, r3, #22
 8001478:	8013      	strh	r3, [r2, #0]
 800147a:	8813      	ldrh	r3, [r2, #0]
 800147c:	430b      	orrs	r3, r1
 800147e:	b29b      	uxth	r3, r3
 8001480:	8013      	strh	r3, [r2, #0]
 8001482:	e080      	b.n	8001586 <HAL_PCD_IRQHandler+0x476>
 8001484:	ffff8f0f 	.word	0xffff8f0f
 8001488:	00000402 	.word	0x00000402
 800148c:	00000406 	.word	0x00000406
 8001490:	00000f8f 	.word	0x00000f8f
 8001494:	ffffbf8f 	.word	0xffffbf8f
 8001498:	00008080 	.word	0x00008080
 800149c:	ffff8000 	.word	0xffff8000
 80014a0:	ffff8f8f 	.word	0xffff8f8f
 80014a4:	000080c0 	.word	0x000080c0
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80014a8:	9d02      	ldr	r5, [sp, #8]
 80014aa:	882e      	ldrh	r6, [r5, #0]
 80014ac:	00d5      	lsls	r5, r2, #3
 80014ae:	1986      	adds	r6, r0, r6
 80014b0:	1976      	adds	r6, r6, r5
 80014b2:	4dc7      	ldr	r5, [pc, #796]	@ (80017d0 <HAL_PCD_IRQHandler+0x6c0>)
 80014b4:	1976      	adds	r6, r6, r5
 80014b6:	8835      	ldrh	r5, [r6, #0]
 80014b8:	05ad      	lsls	r5, r5, #22
 80014ba:	0dad      	lsrs	r5, r5, #22
    if (ep->xfer_len >= count)
 80014bc:	428d      	cmp	r5, r1
 80014be:	d90d      	bls.n	80014dc <HAL_PCD_IRQHandler+0x3cc>
 80014c0:	9903      	ldr	r1, [sp, #12]
 80014c2:	66d9      	str	r1, [r3, #108]	@ 0x6c
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80014c4:	0091      	lsls	r1, r2, #2
 80014c6:	1841      	adds	r1, r0, r1
 80014c8:	880e      	ldrh	r6, [r1, #0]
 80014ca:	4bc2      	ldr	r3, [pc, #776]	@ (80017d4 <HAL_PCD_IRQHandler+0x6c4>)
 80014cc:	401e      	ands	r6, r3
 80014ce:	2380      	movs	r3, #128	@ 0x80
 80014d0:	019b      	lsls	r3, r3, #6
 80014d2:	4073      	eors	r3, r6
 80014d4:	4ec0      	ldr	r6, [pc, #768]	@ (80017d8 <HAL_PCD_IRQHandler+0x6c8>)
 80014d6:	4333      	orrs	r3, r6
 80014d8:	800b      	strh	r3, [r1, #0]
 80014da:	e002      	b.n	80014e2 <HAL_PCD_IRQHandler+0x3d2>
      ep->xfer_len -= count;
 80014dc:	1b49      	subs	r1, r1, r5
 80014de:	66d9      	str	r1, [r3, #108]	@ 0x6c
    if (ep->xfer_len == 0U)
 80014e0:	d0f0      	beq.n	80014c4 <HAL_PCD_IRQHandler+0x3b4>
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80014e2:	9b01      	ldr	r3, [sp, #4]
 80014e4:	065b      	lsls	r3, r3, #25
 80014e6:	d407      	bmi.n	80014f8 <HAL_PCD_IRQHandler+0x3e8>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80014e8:	0092      	lsls	r2, r2, #2
 80014ea:	1882      	adds	r2, r0, r2
 80014ec:	8813      	ldrh	r3, [r2, #0]
 80014ee:	49bb      	ldr	r1, [pc, #748]	@ (80017dc <HAL_PCD_IRQHandler+0x6cc>)
 80014f0:	400b      	ands	r3, r1
 80014f2:	49bb      	ldr	r1, [pc, #748]	@ (80017e0 <HAL_PCD_IRQHandler+0x6d0>)
 80014f4:	430b      	orrs	r3, r1
 80014f6:	8013      	strh	r3, [r2, #0]
    if (count != 0U)
 80014f8:	2d00      	cmp	r5, #0
 80014fa:	d100      	bne.n	80014fe <HAL_PCD_IRQHandler+0x3ee>
 80014fc:	e76a      	b.n	80013d4 <HAL_PCD_IRQHandler+0x2c4>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80014fe:	2328      	movs	r3, #40	@ 0x28
 8001500:	9a00      	ldr	r2, [sp, #0]
 8001502:	4353      	muls	r3, r2
 8001504:	18e1      	adds	r1, r4, r3
 8001506:	000a      	movs	r2, r1
 8001508:	325b      	adds	r2, #91	@ 0x5b
 800150a:	e75c      	b.n	80013c6 <HAL_PCD_IRQHandler+0x2b6>
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800150c:	0092      	lsls	r2, r2, #2
 800150e:	1882      	adds	r2, r0, r2
 8001510:	8816      	ldrh	r6, [r2, #0]
 8001512:	49b2      	ldr	r1, [pc, #712]	@ (80017dc <HAL_PCD_IRQHandler+0x6cc>)
 8001514:	4031      	ands	r1, r6
 8001516:	4eb2      	ldr	r6, [pc, #712]	@ (80017e0 <HAL_PCD_IRQHandler+0x6d0>)
 8001518:	4331      	orrs	r1, r6
 800151a:	8011      	strh	r1, [r2, #0]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800151c:	782a      	ldrb	r2, [r5, #0]
 800151e:	0091      	lsls	r1, r2, #2
 8001520:	1841      	adds	r1, r0, r1
 8001522:	880d      	ldrh	r5, [r1, #0]
 8001524:	0001      	movs	r1, r0
 8001526:	3150      	adds	r1, #80	@ 0x50
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001528:	8809      	ldrh	r1, [r1, #0]
 800152a:	00d2      	lsls	r2, r2, #3
 800152c:	1852      	adds	r2, r2, r1
 800152e:	1812      	adds	r2, r2, r0
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001530:	046d      	lsls	r5, r5, #17
 8001532:	d50a      	bpl.n	800154a <HAL_PCD_IRQHandler+0x43a>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001534:	49ab      	ldr	r1, [pc, #684]	@ (80017e4 <HAL_PCD_IRQHandler+0x6d4>)
 8001536:	1852      	adds	r2, r2, r1
 8001538:	8812      	ldrh	r2, [r2, #0]
 800153a:	0592      	lsls	r2, r2, #22
 800153c:	0d95      	lsrs	r5, r2, #22
              if (count != 0U)
 800153e:	2a00      	cmp	r2, #0
 8001540:	d100      	bne.n	8001544 <HAL_PCD_IRQHandler+0x434>
 8001542:	e747      	b.n	80013d4 <HAL_PCD_IRQHandler+0x2c4>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001544:	001a      	movs	r2, r3
 8001546:	3259      	adds	r2, #89	@ 0x59
 8001548:	e6ef      	b.n	800132a <HAL_PCD_IRQHandler+0x21a>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800154a:	49a1      	ldr	r1, [pc, #644]	@ (80017d0 <HAL_PCD_IRQHandler+0x6c0>)
 800154c:	1852      	adds	r2, r2, r1
 800154e:	8812      	ldrh	r2, [r2, #0]
 8001550:	0592      	lsls	r2, r2, #22
 8001552:	0d95      	lsrs	r5, r2, #22
              if (count != 0U)
 8001554:	2a00      	cmp	r2, #0
 8001556:	d100      	bne.n	800155a <HAL_PCD_IRQHandler+0x44a>
 8001558:	e73c      	b.n	80013d4 <HAL_PCD_IRQHandler+0x2c4>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800155a:	001a      	movs	r2, r3
 800155c:	325b      	adds	r2, #91	@ 0x5b
 800155e:	e6e4      	b.n	800132a <HAL_PCD_IRQHandler+0x21a>
        ep = &hpcd->OUT_ep[epindex];
 8001560:	3151      	adds	r1, #81	@ 0x51
 8001562:	31ff      	adds	r1, #255	@ 0xff
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001564:	6820      	ldr	r0, [r4, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001566:	1861      	adds	r1, r4, r1
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001568:	f002 f828 	bl	80035bc <USB_EPStartXfer>
 800156c:	e74d      	b.n	800140a <HAL_PCD_IRQHandler+0x2fa>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800156e:	2a01      	cmp	r2, #1
 8001570:	d109      	bne.n	8001586 <HAL_PCD_IRQHandler+0x476>
 8001572:	0002      	movs	r2, r0
 8001574:	4d9b      	ldr	r5, [pc, #620]	@ (80017e4 <HAL_PCD_IRQHandler+0x6d4>)
 8001576:	3250      	adds	r2, #80	@ 0x50
 8001578:	8812      	ldrh	r2, [r2, #0]
 800157a:	7c1b      	ldrb	r3, [r3, #16]
 800157c:	1940      	adds	r0, r0, r5
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	1880      	adds	r0, r0, r2
 8001582:	181b      	adds	r3, r3, r0
 8001584:	8019      	strh	r1, [r3, #0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001586:	2328      	movs	r3, #40	@ 0x28
 8001588:	9a00      	ldr	r2, [sp, #0]
 800158a:	4353      	muls	r3, r2
 800158c:	18e3      	adds	r3, r4, r3
 800158e:	7c19      	ldrb	r1, [r3, #16]
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001590:	0020      	movs	r0, r4
 8001592:	f003 f8f2 	bl	800477a <HAL_PCD_DataInStageCallback>
 8001596:	e5c9      	b.n	800112c <HAL_PCD_IRQHandler+0x1c>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001598:	7c5a      	ldrb	r2, [r3, #17]
 800159a:	2a00      	cmp	r2, #0
 800159c:	d106      	bne.n	80015ac <HAL_PCD_IRQHandler+0x49c>
 800159e:	0002      	movs	r2, r0
 80015a0:	3250      	adds	r2, #80	@ 0x50
 80015a2:	8811      	ldrh	r1, [r2, #0]
 80015a4:	7c1a      	ldrb	r2, [r3, #16]
 80015a6:	4b8a      	ldr	r3, [pc, #552]	@ (80017d0 <HAL_PCD_IRQHandler+0x6c0>)
 80015a8:	00d2      	lsls	r2, r2, #3
 80015aa:	e75e      	b.n	800146a <HAL_PCD_IRQHandler+0x35a>
 80015ac:	2a01      	cmp	r2, #1
 80015ae:	d1ea      	bne.n	8001586 <HAL_PCD_IRQHandler+0x476>
 80015b0:	0002      	movs	r2, r0
 80015b2:	4987      	ldr	r1, [pc, #540]	@ (80017d0 <HAL_PCD_IRQHandler+0x6c0>)
 80015b4:	3250      	adds	r2, #80	@ 0x50
 80015b6:	8812      	ldrh	r2, [r2, #0]
 80015b8:	7c1b      	ldrb	r3, [r3, #16]
 80015ba:	1840      	adds	r0, r0, r1
 80015bc:	00db      	lsls	r3, r3, #3
 80015be:	1880      	adds	r0, r0, r2
 80015c0:	181b      	adds	r3, r3, r0
 80015c2:	801d      	strh	r5, [r3, #0]
 80015c4:	e7df      	b.n	8001586 <HAL_PCD_IRQHandler+0x476>
          if ((wEPVal & USB_EP_KIND) == 0U)
 80015c6:	2780      	movs	r7, #128	@ 0x80
 80015c8:	9901      	ldr	r1, [sp, #4]
 80015ca:	007f      	lsls	r7, r7, #1
 80015cc:	4039      	ands	r1, r7
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80015ce:	7c1a      	ldrb	r2, [r3, #16]
          if ((wEPVal & USB_EP_KIND) == 0U)
 80015d0:	468c      	mov	ip, r1
 80015d2:	9901      	ldr	r1, [sp, #4]
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80015d4:	9202      	str	r2, [sp, #8]
            if (ep->xfer_len > TxPctSize)
 80015d6:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80015d8:	00d2      	lsls	r2, r2, #3
          if ((wEPVal & USB_EP_KIND) == 0U)
 80015da:	4239      	tst	r1, r7
 80015dc:	d11c      	bne.n	8001618 <HAL_PCD_IRQHandler+0x508>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80015de:	0007      	movs	r7, r0
 80015e0:	3750      	adds	r7, #80	@ 0x50
 80015e2:	883f      	ldrh	r7, [r7, #0]
 80015e4:	18bf      	adds	r7, r7, r2
 80015e6:	4a7f      	ldr	r2, [pc, #508]	@ (80017e4 <HAL_PCD_IRQHandler+0x6d4>)
 80015e8:	183f      	adds	r7, r7, r0
 80015ea:	18bf      	adds	r7, r7, r2
 80015ec:	883a      	ldrh	r2, [r7, #0]
 80015ee:	0592      	lsls	r2, r2, #22
            if (ep->xfer_len > TxPctSize)
 80015f0:	0d92      	lsrs	r2, r2, #22
 80015f2:	42aa      	cmp	r2, r5
 80015f4:	d303      	bcc.n	80015fe <HAL_PCD_IRQHandler+0x4ee>
 80015f6:	4662      	mov	r2, ip
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80015f8:	9902      	ldr	r1, [sp, #8]
 80015fa:	629a      	str	r2, [r3, #40]	@ 0x28
 80015fc:	e7c8      	b.n	8001590 <HAL_PCD_IRQHandler+0x480>
              ep->xfer_buff += TxPctSize;
 80015fe:	6a59      	ldr	r1, [r3, #36]	@ 0x24
              ep->xfer_len -= TxPctSize;
 8001600:	1aad      	subs	r5, r5, r2
              ep->xfer_buff += TxPctSize;
 8001602:	1889      	adds	r1, r1, r2
 8001604:	6259      	str	r1, [r3, #36]	@ 0x24
              ep->xfer_count += TxPctSize;
 8001606:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
        ep = &hpcd->IN_ep[epindex];
 8001608:	3610      	adds	r6, #16
              ep->xfer_count += TxPctSize;
 800160a:	188a      	adds	r2, r1, r2
 800160c:	629d      	str	r5, [r3, #40]	@ 0x28
 800160e:	62da      	str	r2, [r3, #44]	@ 0x2c
        ep = &hpcd->IN_ep[epindex];
 8001610:	19a1      	adds	r1, r4, r6
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001612:	f001 ffd3 	bl	80035bc <USB_EPStartXfer>
 8001616:	e589      	b.n	800112c <HAL_PCD_IRQHandler+0x1c>
{
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001618:	2140      	movs	r1, #64	@ 0x40
 800161a:	468c      	mov	ip, r1
 800161c:	9f01      	ldr	r7, [sp, #4]
 800161e:	0006      	movs	r6, r0
 8001620:	400f      	ands	r7, r1
 8001622:	9703      	str	r7, [sp, #12]
 8001624:	4667      	mov	r7, ip
 8001626:	9901      	ldr	r1, [sp, #4]
 8001628:	3650      	adds	r6, #80	@ 0x50
 800162a:	4239      	tst	r1, r7
 800162c:	d100      	bne.n	8001630 <HAL_PCD_IRQHandler+0x520>
 800162e:	e0df      	b.n	80017f0 <HAL_PCD_IRQHandler+0x6e0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001630:	496c      	ldr	r1, [pc, #432]	@ (80017e4 <HAL_PCD_IRQHandler+0x6d4>)
 8001632:	8837      	ldrh	r7, [r6, #0]
 8001634:	1846      	adds	r6, r0, r1
    {
      ep->xfer_len -= TxPctSize;
    }
    else
    {
      ep->xfer_len = 0U;
 8001636:	2100      	movs	r1, #0
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001638:	19f7      	adds	r7, r6, r7
 800163a:	5abf      	ldrh	r7, [r7, r2]
      ep->xfer_len = 0U;
 800163c:	468c      	mov	ip, r1
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800163e:	05bf      	lsls	r7, r7, #22
    if (ep->xfer_len > TxPctSize)
 8001640:	0dbf      	lsrs	r7, r7, #22
 8001642:	42af      	cmp	r7, r5
 8001644:	d201      	bcs.n	800164a <HAL_PCD_IRQHandler+0x53a>
      ep->xfer_len -= TxPctSize;
 8001646:	1be9      	subs	r1, r5, r7
 8001648:	468c      	mov	ip, r1
 800164a:	4661      	mov	r1, ip
 800164c:	2580      	movs	r5, #128	@ 0x80
 800164e:	6299      	str	r1, [r3, #40]	@ 0x28
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001650:	9901      	ldr	r1, [sp, #4]
 8001652:	01ed      	lsls	r5, r5, #7
 8001654:	4029      	ands	r1, r5
 8001656:	000d      	movs	r5, r1
 8001658:	4661      	mov	r1, ip
 800165a:	2900      	cmp	r1, #0
 800165c:	d147      	bne.n	80016ee <HAL_PCD_IRQHandler+0x5de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800165e:	2328      	movs	r3, #40	@ 0x28
 8001660:	9900      	ldr	r1, [sp, #0]
 8001662:	434b      	muls	r3, r1
 8001664:	18e3      	adds	r3, r4, r3
 8001666:	7c5b      	ldrb	r3, [r3, #17]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d130      	bne.n	80016ce <HAL_PCD_IRQHandler+0x5be>
 800166c:	0007      	movs	r7, r0
 800166e:	3750      	adds	r7, #80	@ 0x50
 8001670:	883b      	ldrh	r3, [r7, #0]
 8001672:	495d      	ldr	r1, [pc, #372]	@ (80017e8 <HAL_PCD_IRQHandler+0x6d8>)
 8001674:	18f3      	adds	r3, r6, r3
 8001676:	189b      	adds	r3, r3, r2
 8001678:	881e      	ldrh	r6, [r3, #0]
 800167a:	05b6      	lsls	r6, r6, #22
 800167c:	0db6      	lsrs	r6, r6, #22
 800167e:	801e      	strh	r6, [r3, #0]
 8001680:	881e      	ldrh	r6, [r3, #0]
 8001682:	430e      	orrs	r6, r1
 8001684:	b2b6      	uxth	r6, r6
 8001686:	801e      	strh	r6, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001688:	4e51      	ldr	r6, [pc, #324]	@ (80017d0 <HAL_PCD_IRQHandler+0x6c0>)
 800168a:	883b      	ldrh	r3, [r7, #0]
 800168c:	1980      	adds	r0, r0, r6
 800168e:	18c0      	adds	r0, r0, r3
 8001690:	1880      	adds	r0, r0, r2
 8001692:	8803      	ldrh	r3, [r0, #0]
 8001694:	059b      	lsls	r3, r3, #22
 8001696:	0d9b      	lsrs	r3, r3, #22
 8001698:	8003      	strh	r3, [r0, #0]
 800169a:	8803      	ldrh	r3, [r0, #0]
 800169c:	430b      	orrs	r3, r1
 800169e:	b29b      	uxth	r3, r3
 80016a0:	8003      	strh	r3, [r0, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80016a2:	0020      	movs	r0, r4
 80016a4:	9902      	ldr	r1, [sp, #8]
 80016a6:	f003 f868 	bl	800477a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80016aa:	2d00      	cmp	r5, #0
 80016ac:	d100      	bne.n	80016b0 <HAL_PCD_IRQHandler+0x5a0>
 80016ae:	e0dc      	b.n	800186a <HAL_PCD_IRQHandler+0x75a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80016b0:	2328      	movs	r3, #40	@ 0x28
 80016b2:	9a00      	ldr	r2, [sp, #0]
 80016b4:	4949      	ldr	r1, [pc, #292]	@ (80017dc <HAL_PCD_IRQHandler+0x6cc>)
 80016b6:	4353      	muls	r3, r2
 80016b8:	18e3      	adds	r3, r4, r3
 80016ba:	7c1b      	ldrb	r3, [r3, #16]
 80016bc:	6822      	ldr	r2, [r4, #0]
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	18d2      	adds	r2, r2, r3
 80016c2:	8813      	ldrh	r3, [r2, #0]
 80016c4:	400b      	ands	r3, r1
 80016c6:	4949      	ldr	r1, [pc, #292]	@ (80017ec <HAL_PCD_IRQHandler+0x6dc>)
 80016c8:	430b      	orrs	r3, r1
 80016ca:	8013      	strh	r3, [r2, #0]
 80016cc:	e0cd      	b.n	800186a <HAL_PCD_IRQHandler+0x75a>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d1e7      	bne.n	80016a2 <HAL_PCD_IRQHandler+0x592>
 80016d2:	0007      	movs	r7, r0
 80016d4:	4661      	mov	r1, ip
 80016d6:	3750      	adds	r7, #80	@ 0x50
 80016d8:	883b      	ldrh	r3, [r7, #0]
 80016da:	18f3      	adds	r3, r6, r3
 80016dc:	189b      	adds	r3, r3, r2
 80016de:	8019      	strh	r1, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80016e0:	493b      	ldr	r1, [pc, #236]	@ (80017d0 <HAL_PCD_IRQHandler+0x6c0>)
 80016e2:	883b      	ldrh	r3, [r7, #0]
 80016e4:	1840      	adds	r0, r0, r1
 80016e6:	18c0      	adds	r0, r0, r3
 80016e8:	1880      	adds	r0, r0, r2
 80016ea:	4663      	mov	r3, ip
 80016ec:	e7d8      	b.n	80016a0 <HAL_PCD_IRQHandler+0x590>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80016ee:	2d00      	cmp	r5, #0
 80016f0:	d00c      	beq.n	800170c <HAL_PCD_IRQHandler+0x5fc>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80016f2:	9902      	ldr	r1, [sp, #8]
 80016f4:	0089      	lsls	r1, r1, #2
 80016f6:	1841      	adds	r1, r0, r1
 80016f8:	880d      	ldrh	r5, [r1, #0]
 80016fa:	9101      	str	r1, [sp, #4]
 80016fc:	46ac      	mov	ip, r5
 80016fe:	4661      	mov	r1, ip
 8001700:	4d36      	ldr	r5, [pc, #216]	@ (80017dc <HAL_PCD_IRQHandler+0x6cc>)
 8001702:	400d      	ands	r5, r1
 8001704:	4939      	ldr	r1, [pc, #228]	@ (80017ec <HAL_PCD_IRQHandler+0x6dc>)
 8001706:	430d      	orrs	r5, r1
 8001708:	9901      	ldr	r1, [sp, #4]
 800170a:	800d      	strh	r5, [r1, #0]
      if (ep->xfer_fill_db == 1U)
 800170c:	2528      	movs	r5, #40	@ 0x28
 800170e:	9900      	ldr	r1, [sp, #0]
 8001710:	434d      	muls	r5, r1
 8001712:	2134      	movs	r1, #52	@ 0x34
 8001714:	468c      	mov	ip, r1
 8001716:	1965      	adds	r5, r4, r5
 8001718:	44ac      	add	ip, r5
 800171a:	4661      	mov	r1, ip
 800171c:	7809      	ldrb	r1, [r1, #0]
 800171e:	2901      	cmp	r1, #1
 8001720:	d000      	beq.n	8001724 <HAL_PCD_IRQHandler+0x614>
 8001722:	e0a2      	b.n	800186a <HAL_PCD_IRQHandler+0x75a>
        ep->xfer_buff += TxPctSize;
 8001724:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8001726:	19c9      	adds	r1, r1, r7
 8001728:	6269      	str	r1, [r5, #36]	@ 0x24
 800172a:	9101      	str	r1, [sp, #4]
        ep->xfer_count += TxPctSize;
 800172c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800172e:	19c9      	adds	r1, r1, r7
 8001730:	62d9      	str	r1, [r3, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 8001732:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001734:	6a29      	ldr	r1, [r5, #32]
 8001736:	428b      	cmp	r3, r1
 8001738:	d317      	bcc.n	800176a <HAL_PCD_IRQHandler+0x65a>
          ep->xfer_len_db -= len;
 800173a:	1a5b      	subs	r3, r3, r1
 800173c:	632b      	str	r3, [r5, #48]	@ 0x30
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800173e:	2328      	movs	r3, #40	@ 0x28
 8001740:	9d00      	ldr	r5, [sp, #0]
 8001742:	436b      	muls	r3, r5
 8001744:	18e3      	adds	r3, r4, r3
 8001746:	7c5d      	ldrb	r5, [r3, #17]
 8001748:	b28b      	uxth	r3, r1
 800174a:	2d00      	cmp	r5, #0
 800174c:	d137      	bne.n	80017be <HAL_PCD_IRQHandler+0x6ae>
 800174e:	0005      	movs	r5, r0
 8001750:	3550      	adds	r5, #80	@ 0x50
 8001752:	882d      	ldrh	r5, [r5, #0]
 8001754:	1975      	adds	r5, r6, r5
 8001756:	18aa      	adds	r2, r5, r2
 8001758:	8815      	ldrh	r5, [r2, #0]
 800175a:	05ad      	lsls	r5, r5, #22
 800175c:	0dad      	lsrs	r5, r5, #22
 800175e:	8015      	strh	r5, [r2, #0]
 8001760:	2900      	cmp	r1, #0
 8001762:	d10e      	bne.n	8001782 <HAL_PCD_IRQHandler+0x672>
 8001764:	8811      	ldrh	r1, [r2, #0]
 8001766:	4d20      	ldr	r5, [pc, #128]	@ (80017e8 <HAL_PCD_IRQHandler+0x6d8>)
 8001768:	e013      	b.n	8001792 <HAL_PCD_IRQHandler+0x682>
        else if (ep->xfer_len_db == 0U)
 800176a:	2b00      	cmp	r3, #0
 800176c:	d103      	bne.n	8001776 <HAL_PCD_IRQHandler+0x666>
          ep->xfer_fill_db = 0U;
 800176e:	4661      	mov	r1, ip
 8001770:	700b      	strb	r3, [r1, #0]
    if (ep->xfer_len > TxPctSize)
 8001772:	0039      	movs	r1, r7
 8001774:	e7e3      	b.n	800173e <HAL_PCD_IRQHandler+0x62e>
          ep->xfer_fill_db = 0U;
 8001776:	2100      	movs	r1, #0
 8001778:	4667      	mov	r7, ip
 800177a:	7039      	strb	r1, [r7, #0]
          ep->xfer_len_db = 0U;
 800177c:	6329      	str	r1, [r5, #48]	@ 0x30
 800177e:	0019      	movs	r1, r3
 8001780:	e7dd      	b.n	800173e <HAL_PCD_IRQHandler+0x62e>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001782:	293e      	cmp	r1, #62	@ 0x3e
 8001784:	d811      	bhi.n	80017aa <HAL_PCD_IRQHandler+0x69a>
 8001786:	2601      	movs	r6, #1
 8001788:	084d      	lsrs	r5, r1, #1
 800178a:	400e      	ands	r6, r1
 800178c:	19ad      	adds	r5, r5, r6
 800178e:	8811      	ldrh	r1, [r2, #0]
 8001790:	02ad      	lsls	r5, r5, #10
 8001792:	4329      	orrs	r1, r5
 8001794:	b289      	uxth	r1, r1
 8001796:	8011      	strh	r1, [r2, #0]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001798:	2228      	movs	r2, #40	@ 0x28
 800179a:	9900      	ldr	r1, [sp, #0]
 800179c:	434a      	muls	r2, r1
 800179e:	18a2      	adds	r2, r4, r2
 80017a0:	8b12      	ldrh	r2, [r2, #24]
 80017a2:	9901      	ldr	r1, [sp, #4]

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80017a4:	f001 fef5 	bl	8003592 <USB_WritePMA>
 80017a8:	e05f      	b.n	800186a <HAL_PCD_IRQHandler+0x75a>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80017aa:	261f      	movs	r6, #31
 80017ac:	094d      	lsrs	r5, r1, #5
 80017ae:	4031      	ands	r1, r6
 80017b0:	424e      	negs	r6, r1
 80017b2:	4171      	adcs	r1, r6
 80017b4:	1a6d      	subs	r5, r5, r1
 80017b6:	8811      	ldrh	r1, [r2, #0]
 80017b8:	02ad      	lsls	r5, r5, #10
 80017ba:	4329      	orrs	r1, r5
 80017bc:	e7d3      	b.n	8001766 <HAL_PCD_IRQHandler+0x656>
 80017be:	2d01      	cmp	r5, #1
 80017c0:	d1ea      	bne.n	8001798 <HAL_PCD_IRQHandler+0x688>
 80017c2:	0001      	movs	r1, r0
 80017c4:	3150      	adds	r1, #80	@ 0x50
 80017c6:	8809      	ldrh	r1, [r1, #0]
 80017c8:	1876      	adds	r6, r6, r1
 80017ca:	18b6      	adds	r6, r6, r2
 80017cc:	8033      	strh	r3, [r6, #0]
 80017ce:	e7e3      	b.n	8001798 <HAL_PCD_IRQHandler+0x688>
 80017d0:	00000406 	.word	0x00000406
 80017d4:	ffffbf8f 	.word	0xffffbf8f
 80017d8:	00008080 	.word	0x00008080
 80017dc:	ffff8f8f 	.word	0xffff8f8f
 80017e0:	000080c0 	.word	0x000080c0
 80017e4:	00000402 	.word	0x00000402
 80017e8:	ffff8000 	.word	0xffff8000
 80017ec:	0000c080 	.word	0x0000c080
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80017f0:	49ac      	ldr	r1, [pc, #688]	@ (8001aa4 <HAL_PCD_IRQHandler+0x994>)
 80017f2:	8836      	ldrh	r6, [r6, #0]
 80017f4:	468c      	mov	ip, r1
 80017f6:	4484      	add	ip, r0
 80017f8:	4466      	add	r6, ip
 80017fa:	5ab6      	ldrh	r6, [r6, r2]
      ep->xfer_len = 0U;
 80017fc:	9f03      	ldr	r7, [sp, #12]
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80017fe:	05b6      	lsls	r6, r6, #22
    if (ep->xfer_len >= TxPctSize)
 8001800:	0db6      	lsrs	r6, r6, #22
 8001802:	42ae      	cmp	r6, r5
 8001804:	d800      	bhi.n	8001808 <HAL_PCD_IRQHandler+0x6f8>
      ep->xfer_len -= TxPctSize;
 8001806:	1baf      	subs	r7, r5, r6
 8001808:	2580      	movs	r5, #128	@ 0x80
 800180a:	9901      	ldr	r1, [sp, #4]
 800180c:	01ed      	lsls	r5, r5, #7
 800180e:	4029      	ands	r1, r5
 8001810:	000d      	movs	r5, r1
 8001812:	629f      	str	r7, [r3, #40]	@ 0x28
    if (ep->xfer_len == 0U)
 8001814:	2f00      	cmp	r7, #0
 8001816:	d149      	bne.n	80018ac <HAL_PCD_IRQHandler+0x79c>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001818:	2328      	movs	r3, #40	@ 0x28
 800181a:	9900      	ldr	r1, [sp, #0]
 800181c:	434b      	muls	r3, r1
 800181e:	18e3      	adds	r3, r4, r3
 8001820:	7c5b      	ldrb	r3, [r3, #17]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d133      	bne.n	800188e <HAL_PCD_IRQHandler+0x77e>
 8001826:	0003      	movs	r3, r0
 8001828:	499f      	ldr	r1, [pc, #636]	@ (8001aa8 <HAL_PCD_IRQHandler+0x998>)
 800182a:	3350      	adds	r3, #80	@ 0x50
 800182c:	881e      	ldrh	r6, [r3, #0]
 800182e:	1840      	adds	r0, r0, r1
 8001830:	1980      	adds	r0, r0, r6
 8001832:	1880      	adds	r0, r0, r2
 8001834:	8806      	ldrh	r6, [r0, #0]
 8001836:	499d      	ldr	r1, [pc, #628]	@ (8001aac <HAL_PCD_IRQHandler+0x99c>)
 8001838:	05b6      	lsls	r6, r6, #22
 800183a:	0db6      	lsrs	r6, r6, #22
 800183c:	8006      	strh	r6, [r0, #0]
 800183e:	8806      	ldrh	r6, [r0, #0]
 8001840:	430e      	orrs	r6, r1
 8001842:	b2b6      	uxth	r6, r6
 8001844:	8006      	strh	r6, [r0, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001846:	881b      	ldrh	r3, [r3, #0]
 8001848:	4463      	add	r3, ip
 800184a:	189b      	adds	r3, r3, r2
 800184c:	881a      	ldrh	r2, [r3, #0]
 800184e:	0592      	lsls	r2, r2, #22
 8001850:	0d92      	lsrs	r2, r2, #22
 8001852:	801a      	strh	r2, [r3, #0]
 8001854:	881a      	ldrh	r2, [r3, #0]
 8001856:	430a      	orrs	r2, r1
 8001858:	b292      	uxth	r2, r2
 800185a:	801a      	strh	r2, [r3, #0]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800185c:	0020      	movs	r0, r4
 800185e:	9902      	ldr	r1, [sp, #8]
 8001860:	f002 ff8b 	bl	800477a <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001864:	2d00      	cmp	r5, #0
 8001866:	d100      	bne.n	800186a <HAL_PCD_IRQHandler+0x75a>
 8001868:	e722      	b.n	80016b0 <HAL_PCD_IRQHandler+0x5a0>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800186a:	2328      	movs	r3, #40	@ 0x28
 800186c:	9a00      	ldr	r2, [sp, #0]
 800186e:	4353      	muls	r3, r2
 8001870:	18e3      	adds	r3, r4, r3
 8001872:	7c1b      	ldrb	r3, [r3, #16]
 8001874:	6822      	ldr	r2, [r4, #0]
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	18d2      	adds	r2, r2, r3
 800187a:	8811      	ldrh	r1, [r2, #0]
 800187c:	4b8c      	ldr	r3, [pc, #560]	@ (8001ab0 <HAL_PCD_IRQHandler+0x9a0>)
 800187e:	4019      	ands	r1, r3
 8001880:	2330      	movs	r3, #48	@ 0x30
 8001882:	404b      	eors	r3, r1
 8001884:	498b      	ldr	r1, [pc, #556]	@ (8001ab4 <HAL_PCD_IRQHandler+0x9a4>)
 8001886:	430b      	orrs	r3, r1
 8001888:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800188a:	f7ff fc4f 	bl	800112c <HAL_PCD_IRQHandler+0x1c>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800188e:	2b01      	cmp	r3, #1
 8001890:	d1e4      	bne.n	800185c <HAL_PCD_IRQHandler+0x74c>
 8001892:	0003      	movs	r3, r0
 8001894:	4984      	ldr	r1, [pc, #528]	@ (8001aa8 <HAL_PCD_IRQHandler+0x998>)
 8001896:	3350      	adds	r3, #80	@ 0x50
 8001898:	881e      	ldrh	r6, [r3, #0]
 800189a:	1840      	adds	r0, r0, r1
 800189c:	1980      	adds	r0, r0, r6
 800189e:	1880      	adds	r0, r0, r2
 80018a0:	8007      	strh	r7, [r0, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80018a2:	881b      	ldrh	r3, [r3, #0]
 80018a4:	4463      	add	r3, ip
 80018a6:	189b      	adds	r3, r3, r2
 80018a8:	801f      	strh	r7, [r3, #0]
 80018aa:	e7d7      	b.n	800185c <HAL_PCD_IRQHandler+0x74c>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80018ac:	2900      	cmp	r1, #0
 80018ae:	d108      	bne.n	80018c2 <HAL_PCD_IRQHandler+0x7b2>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80018b0:	9902      	ldr	r1, [sp, #8]
 80018b2:	4d81      	ldr	r5, [pc, #516]	@ (8001ab8 <HAL_PCD_IRQHandler+0x9a8>)
 80018b4:	0089      	lsls	r1, r1, #2
 80018b6:	1841      	adds	r1, r0, r1
 80018b8:	880f      	ldrh	r7, [r1, #0]
 80018ba:	403d      	ands	r5, r7
 80018bc:	4f7f      	ldr	r7, [pc, #508]	@ (8001abc <HAL_PCD_IRQHandler+0x9ac>)
 80018be:	433d      	orrs	r5, r7
 80018c0:	800d      	strh	r5, [r1, #0]
      if (ep->xfer_fill_db == 1U)
 80018c2:	2728      	movs	r7, #40	@ 0x28
 80018c4:	9900      	ldr	r1, [sp, #0]
 80018c6:	434f      	muls	r7, r1
 80018c8:	19e7      	adds	r7, r4, r7
 80018ca:	0039      	movs	r1, r7
 80018cc:	3134      	adds	r1, #52	@ 0x34
 80018ce:	9101      	str	r1, [sp, #4]
 80018d0:	7809      	ldrb	r1, [r1, #0]
 80018d2:	2901      	cmp	r1, #1
 80018d4:	d1c9      	bne.n	800186a <HAL_PCD_IRQHandler+0x75a>
        ep->xfer_buff += TxPctSize;
 80018d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80018d8:	1989      	adds	r1, r1, r6
 80018da:	6279      	str	r1, [r7, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 80018dc:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 80018de:	19ad      	adds	r5, r5, r6
 80018e0:	62dd      	str	r5, [r3, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 80018e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018e4:	6a3d      	ldr	r5, [r7, #32]
 80018e6:	42ab      	cmp	r3, r5
 80018e8:	d317      	bcc.n	800191a <HAL_PCD_IRQHandler+0x80a>
          ep->xfer_len_db -= len;
 80018ea:	1b5b      	subs	r3, r3, r5
 80018ec:	633b      	str	r3, [r7, #48]	@ 0x30
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80018ee:	2328      	movs	r3, #40	@ 0x28
 80018f0:	9e00      	ldr	r6, [sp, #0]
 80018f2:	4373      	muls	r3, r6
 80018f4:	18e3      	adds	r3, r4, r3
 80018f6:	7c5e      	ldrb	r6, [r3, #17]
 80018f8:	b2ab      	uxth	r3, r5
 80018fa:	2e00      	cmp	r6, #0
 80018fc:	d134      	bne.n	8001968 <HAL_PCD_IRQHandler+0x858>
 80018fe:	0006      	movs	r6, r0
 8001900:	3650      	adds	r6, #80	@ 0x50
 8001902:	8836      	ldrh	r6, [r6, #0]
 8001904:	4466      	add	r6, ip
 8001906:	18b2      	adds	r2, r6, r2
 8001908:	8816      	ldrh	r6, [r2, #0]
 800190a:	05b6      	lsls	r6, r6, #22
 800190c:	0db6      	lsrs	r6, r6, #22
 800190e:	8016      	strh	r6, [r2, #0]
 8001910:	2d00      	cmp	r5, #0
 8001912:	d10e      	bne.n	8001932 <HAL_PCD_IRQHandler+0x822>
 8001914:	8815      	ldrh	r5, [r2, #0]
 8001916:	4e65      	ldr	r6, [pc, #404]	@ (8001aac <HAL_PCD_IRQHandler+0x99c>)
 8001918:	e013      	b.n	8001942 <HAL_PCD_IRQHandler+0x832>
        else if (ep->xfer_len_db == 0U)
 800191a:	2b00      	cmp	r3, #0
 800191c:	d103      	bne.n	8001926 <HAL_PCD_IRQHandler+0x816>
          ep->xfer_fill_db = 0U;
 800191e:	9d01      	ldr	r5, [sp, #4]
 8001920:	702b      	strb	r3, [r5, #0]
    if (ep->xfer_len >= TxPctSize)
 8001922:	0035      	movs	r5, r6
 8001924:	e7e3      	b.n	80018ee <HAL_PCD_IRQHandler+0x7de>
          ep->xfer_len_db = 0U;
 8001926:	2500      	movs	r5, #0
          ep->xfer_fill_db = 0;
 8001928:	9e01      	ldr	r6, [sp, #4]
          ep->xfer_len_db = 0U;
 800192a:	633d      	str	r5, [r7, #48]	@ 0x30
          ep->xfer_fill_db = 0;
 800192c:	7035      	strb	r5, [r6, #0]
 800192e:	001d      	movs	r5, r3
 8001930:	e7dd      	b.n	80018ee <HAL_PCD_IRQHandler+0x7de>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001932:	2d3e      	cmp	r5, #62	@ 0x3e
 8001934:	d80e      	bhi.n	8001954 <HAL_PCD_IRQHandler+0x844>
 8001936:	2701      	movs	r7, #1
 8001938:	086e      	lsrs	r6, r5, #1
 800193a:	402f      	ands	r7, r5
 800193c:	19f6      	adds	r6, r6, r7
 800193e:	8815      	ldrh	r5, [r2, #0]
 8001940:	02b6      	lsls	r6, r6, #10
 8001942:	4335      	orrs	r5, r6
 8001944:	b2ad      	uxth	r5, r5
 8001946:	8015      	strh	r5, [r2, #0]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8001948:	2228      	movs	r2, #40	@ 0x28
 800194a:	9d00      	ldr	r5, [sp, #0]
 800194c:	436a      	muls	r2, r5
 800194e:	18a2      	adds	r2, r4, r2
 8001950:	8b52      	ldrh	r2, [r2, #26]
 8001952:	e727      	b.n	80017a4 <HAL_PCD_IRQHandler+0x694>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001954:	271f      	movs	r7, #31
 8001956:	096e      	lsrs	r6, r5, #5
 8001958:	403d      	ands	r5, r7
 800195a:	426f      	negs	r7, r5
 800195c:	417d      	adcs	r5, r7
 800195e:	1b76      	subs	r6, r6, r5
 8001960:	8815      	ldrh	r5, [r2, #0]
 8001962:	02b6      	lsls	r6, r6, #10
 8001964:	4335      	orrs	r5, r6
 8001966:	e7d6      	b.n	8001916 <HAL_PCD_IRQHandler+0x806>
 8001968:	2e01      	cmp	r6, #1
 800196a:	d1ed      	bne.n	8001948 <HAL_PCD_IRQHandler+0x838>
 800196c:	0005      	movs	r5, r0
 800196e:	3550      	adds	r5, #80	@ 0x50
 8001970:	882d      	ldrh	r5, [r5, #0]
 8001972:	4465      	add	r5, ip
 8001974:	18aa      	adds	r2, r5, r2
 8001976:	8013      	strh	r3, [r2, #0]
 8001978:	e7e6      	b.n	8001948 <HAL_PCD_IRQHandler+0x838>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800197a:	0543      	lsls	r3, r0, #21
 800197c:	d50e      	bpl.n	800199c <HAL_PCD_IRQHandler+0x88c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800197e:	6823      	ldr	r3, [r4, #0]
 8001980:	494f      	ldr	r1, [pc, #316]	@ (8001ac0 <HAL_PCD_IRQHandler+0x9b0>)
 8001982:	3306      	adds	r3, #6
 8001984:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
    HAL_PCD_ResetCallback(hpcd);
 8001986:	0020      	movs	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001988:	400a      	ands	r2, r1
 800198a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    HAL_PCD_ResetCallback(hpcd);
 800198c:	f002 ff07 	bl	800479e <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001990:	0029      	movs	r1, r5
 8001992:	0020      	movs	r0, r4
 8001994:	f7ff fbab 	bl	80010ee <HAL_PCD_SetAddress>
    return;
 8001998:	f7ff fbce 	bl	8001138 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800199c:	0443      	lsls	r3, r0, #17
 800199e:	d507      	bpl.n	80019b0 <HAL_PCD_IRQHandler+0x8a0>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80019a0:	6823      	ldr	r3, [r4, #0]
 80019a2:	4948      	ldr	r1, [pc, #288]	@ (8001ac4 <HAL_PCD_IRQHandler+0x9b4>)
 80019a4:	3306      	adds	r3, #6
 80019a6:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80019a8:	400a      	ands	r2, r1
 80019aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
    return;
 80019ac:	f7ff fbc4 	bl	8001138 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80019b0:	2380      	movs	r3, #128	@ 0x80
 80019b2:	0001      	movs	r1, r0
 80019b4:	019b      	lsls	r3, r3, #6
 80019b6:	4019      	ands	r1, r3
 80019b8:	4218      	tst	r0, r3
 80019ba:	d004      	beq.n	80019c6 <HAL_PCD_IRQHandler+0x8b6>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80019bc:	6823      	ldr	r3, [r4, #0]
 80019be:	4942      	ldr	r1, [pc, #264]	@ (8001ac8 <HAL_PCD_IRQHandler+0x9b8>)
 80019c0:	3306      	adds	r3, #6
 80019c2:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 80019c4:	e7f0      	b.n	80019a8 <HAL_PCD_IRQHandler+0x898>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80019c6:	04c3      	lsls	r3, r0, #19
 80019c8:	d51a      	bpl.n	8001a00 <HAL_PCD_IRQHandler+0x8f0>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80019ca:	2004      	movs	r0, #4
 80019cc:	6823      	ldr	r3, [r4, #0]
 80019ce:	3302      	adds	r3, #2
 80019d0:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 80019d2:	4382      	bics	r2, r0
 80019d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80019d6:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 80019d8:	1800      	adds	r0, r0, r0
 80019da:	4382      	bics	r2, r0
 80019dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
    if (hpcd->LPM_State == LPM_L1)
 80019de:	23b2      	movs	r3, #178	@ 0xb2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	5ce2      	ldrb	r2, [r4, r3]
 80019e4:	2a01      	cmp	r2, #1
 80019e6:	d103      	bne.n	80019f0 <HAL_PCD_IRQHandler+0x8e0>
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80019e8:	0020      	movs	r0, r4
      hpcd->LPM_State = LPM_L0;
 80019ea:	54e1      	strb	r1, [r4, r3]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80019ec:	f000 f98b 	bl	8001d06 <HAL_PCDEx_LPM_Callback>
    HAL_PCD_ResumeCallback(hpcd);
 80019f0:	0020      	movs	r0, r4
 80019f2:	f002 fef7 	bl	80047e4 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80019f6:	6823      	ldr	r3, [r4, #0]
 80019f8:	4934      	ldr	r1, [pc, #208]	@ (8001acc <HAL_PCD_IRQHandler+0x9bc>)
 80019fa:	3306      	adds	r3, #6
 80019fc:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 80019fe:	e7d3      	b.n	80019a8 <HAL_PCD_IRQHandler+0x898>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001a00:	0503      	lsls	r3, r0, #20
 8001a02:	d513      	bpl.n	8001a2c <HAL_PCD_IRQHandler+0x91c>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001a04:	2108      	movs	r1, #8
 8001a06:	6823      	ldr	r3, [r4, #0]
 8001a08:	1c9a      	adds	r2, r3, #2
 8001a0a:	8fd0      	ldrh	r0, [r2, #62]	@ 0x3e
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001a0c:	3306      	adds	r3, #6
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001a0e:	4301      	orrs	r1, r0
 8001a10:	87d1      	strh	r1, [r2, #62]	@ 0x3e
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001a12:	8fd9      	ldrh	r1, [r3, #62]	@ 0x3e
 8001a14:	482e      	ldr	r0, [pc, #184]	@ (8001ad0 <HAL_PCD_IRQHandler+0x9c0>)
 8001a16:	4001      	ands	r1, r0
 8001a18:	87d9      	strh	r1, [r3, #62]	@ 0x3e
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001a1a:	2304      	movs	r3, #4
 8001a1c:	8fd1      	ldrh	r1, [r2, #62]	@ 0x3e
 8001a1e:	430b      	orrs	r3, r1
 8001a20:	87d3      	strh	r3, [r2, #62]	@ 0x3e
      HAL_PCD_SuspendCallback(hpcd);
 8001a22:	0020      	movs	r0, r4
 8001a24:	f002 fecc 	bl	80047c0 <HAL_PCD_SuspendCallback>
 8001a28:	f7ff fb86 	bl	8001138 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001a2c:	2580      	movs	r5, #128	@ 0x80
 8001a2e:	4228      	tst	r0, r5
 8001a30:	d021      	beq.n	8001a76 <HAL_PCD_IRQHandler+0x966>
    if (hpcd->LPM_State == LPM_L0)
 8001a32:	20b2      	movs	r0, #178	@ 0xb2
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001a34:	6823      	ldr	r3, [r4, #0]
    if (hpcd->LPM_State == LPM_L0)
 8001a36:	0080      	lsls	r0, r0, #2
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001a38:	1d99      	adds	r1, r3, #6
 8001a3a:	8fca      	ldrh	r2, [r1, #62]	@ 0x3e
 8001a3c:	43aa      	bics	r2, r5
 8001a3e:	87ca      	strh	r2, [r1, #62]	@ 0x3e
    if (hpcd->LPM_State == LPM_L0)
 8001a40:	5c22      	ldrb	r2, [r4, r0]
 8001a42:	2a00      	cmp	r2, #0
 8001a44:	d1ed      	bne.n	8001a22 <HAL_PCD_IRQHandler+0x912>
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001a46:	2104      	movs	r1, #4
 8001a48:	1c9a      	adds	r2, r3, #2
 8001a4a:	8fd5      	ldrh	r5, [r2, #62]	@ 0x3e
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001a4c:	3354      	adds	r3, #84	@ 0x54
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001a4e:	4329      	orrs	r1, r5
 8001a50:	87d1      	strh	r1, [r2, #62]	@ 0x3e
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001a52:	2108      	movs	r1, #8
 8001a54:	8fd5      	ldrh	r5, [r2, #62]	@ 0x3e
 8001a56:	4329      	orrs	r1, r5
 8001a58:	87d1      	strh	r1, [r2, #62]	@ 0x3e
      hpcd->LPM_State = LPM_L1;
 8001a5a:	2101      	movs	r1, #1
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001a5c:	223c      	movs	r2, #60	@ 0x3c
      hpcd->LPM_State = LPM_L1;
 8001a5e:	5421      	strb	r1, [r4, r0]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001a60:	881b      	ldrh	r3, [r3, #0]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001a62:	0020      	movs	r0, r4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001a64:	089b      	lsrs	r3, r3, #2
 8001a66:	4013      	ands	r3, r2
 8001a68:	22b3      	movs	r2, #179	@ 0xb3
 8001a6a:	0092      	lsls	r2, r2, #2
 8001a6c:	50a3      	str	r3, [r4, r2]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001a6e:	f000 f94a 	bl	8001d06 <HAL_PCDEx_LPM_Callback>
 8001a72:	f7ff fb61 	bl	8001138 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001a76:	0583      	lsls	r3, r0, #22
 8001a78:	d50a      	bpl.n	8001a90 <HAL_PCD_IRQHandler+0x980>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001a7a:	6823      	ldr	r3, [r4, #0]
 8001a7c:	4915      	ldr	r1, [pc, #84]	@ (8001ad4 <HAL_PCD_IRQHandler+0x9c4>)
 8001a7e:	3306      	adds	r3, #6
 8001a80:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
    HAL_PCD_SOFCallback(hpcd);
 8001a82:	0020      	movs	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001a84:	400a      	ands	r2, r1
 8001a86:	87da      	strh	r2, [r3, #62]	@ 0x3e
    HAL_PCD_SOFCallback(hpcd);
 8001a88:	f002 fe82 	bl	8004790 <HAL_PCD_SOFCallback>
    return;
 8001a8c:	f7ff fb54 	bl	8001138 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001a90:	05c0      	lsls	r0, r0, #23
 8001a92:	d401      	bmi.n	8001a98 <HAL_PCD_IRQHandler+0x988>
 8001a94:	f7ff fb50 	bl	8001138 <HAL_PCD_IRQHandler+0x28>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001a98:	6823      	ldr	r3, [r4, #0]
 8001a9a:	490f      	ldr	r1, [pc, #60]	@ (8001ad8 <HAL_PCD_IRQHandler+0x9c8>)
 8001a9c:	3306      	adds	r3, #6
 8001a9e:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8001aa0:	e782      	b.n	80019a8 <HAL_PCD_IRQHandler+0x898>
 8001aa2:	46c0      	nop			@ (mov r8, r8)
 8001aa4:	00000406 	.word	0x00000406
 8001aa8:	00000402 	.word	0x00000402
 8001aac:	ffff8000 	.word	0xffff8000
 8001ab0:	ffff8fbf 	.word	0xffff8fbf
 8001ab4:	00008080 	.word	0x00008080
 8001ab8:	ffff8f8f 	.word	0xffff8f8f
 8001abc:	0000c080 	.word	0x0000c080
 8001ac0:	fffffbff 	.word	0xfffffbff
 8001ac4:	ffffbfff 	.word	0xffffbfff
 8001ac8:	ffffdfff 	.word	0xffffdfff
 8001acc:	ffffefff 	.word	0xffffefff
 8001ad0:	fffff7ff 	.word	0xfffff7ff
 8001ad4:	fffffdff 	.word	0xfffffdff
 8001ad8:	fffffeff 	.word	0xfffffeff

08001adc <HAL_PCD_EP_Open>:
{
 8001adc:	b570      	push	{r4, r5, r6, lr}
 8001ade:	0004      	movs	r4, r0
 8001ae0:	2007      	movs	r0, #7
 8001ae2:	000d      	movs	r5, r1
 8001ae4:	4008      	ands	r0, r1
 8001ae6:	2128      	movs	r1, #40	@ 0x28
 8001ae8:	4341      	muls	r1, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8001aea:	b26d      	sxtb	r5, r5
 8001aec:	1866      	adds	r6, r4, r1
 8001aee:	2d00      	cmp	r5, #0
 8001af0:	da18      	bge.n	8001b24 <HAL_PCD_EP_Open+0x48>
    ep->is_in = 1U;
 8001af2:	2501      	movs	r5, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001af4:	3110      	adds	r1, #16
 8001af6:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 8001af8:	7475      	strb	r5, [r6, #17]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001afa:	7008      	strb	r0, [r1, #0]
  ep->maxpacket = ep_mps;
 8001afc:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 8001afe:	70cb      	strb	r3, [r1, #3]
  if (ep_type == EP_TYPE_BULK)
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d101      	bne.n	8001b08 <HAL_PCD_EP_Open+0x2c>
    ep->data_pid_start = 0U;
 8001b04:	2300      	movs	r3, #0
 8001b06:	710b      	strb	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8001b08:	25a4      	movs	r5, #164	@ 0xa4
 8001b0a:	00ad      	lsls	r5, r5, #2
 8001b0c:	5d63      	ldrb	r3, [r4, r5]
 8001b0e:	2002      	movs	r0, #2
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d006      	beq.n	8001b22 <HAL_PCD_EP_Open+0x46>
 8001b14:	2301      	movs	r3, #1
 8001b16:	5563      	strb	r3, [r4, r5]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001b18:	6820      	ldr	r0, [r4, #0]
 8001b1a:	f001 fb43 	bl	80031a4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b1e:	2000      	movs	r0, #0
 8001b20:	5560      	strb	r0, [r4, r5]
}
 8001b22:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 8001b24:	2500      	movs	r5, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b26:	3151      	adds	r1, #81	@ 0x51
    ep->is_in = 0U;
 8001b28:	3652      	adds	r6, #82	@ 0x52
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b2a:	31ff      	adds	r1, #255	@ 0xff
    ep->is_in = 0U;
 8001b2c:	36ff      	adds	r6, #255	@ 0xff
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b2e:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 8001b30:	7035      	strb	r5, [r6, #0]
 8001b32:	e7e2      	b.n	8001afa <HAL_PCD_EP_Open+0x1e>

08001b34 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8001b34:	2207      	movs	r2, #7
{
 8001b36:	000b      	movs	r3, r1
 8001b38:	400a      	ands	r2, r1
 8001b3a:	2128      	movs	r1, #40	@ 0x28
 8001b3c:	4351      	muls	r1, r2
  if ((ep_addr & 0x80U) == 0x80U)
 8001b3e:	b25b      	sxtb	r3, r3
{
 8001b40:	b570      	push	{r4, r5, r6, lr}
 8001b42:	0004      	movs	r4, r0
 8001b44:	1840      	adds	r0, r0, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	da12      	bge.n	8001b70 <HAL_PCD_EP_Close+0x3c>
    ep->is_in = 1U;
 8001b4a:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b4c:	3110      	adds	r1, #16
 8001b4e:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 8001b50:	7443      	strb	r3, [r0, #17]
  __HAL_LOCK(hpcd);
 8001b52:	25a4      	movs	r5, #164	@ 0xa4
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b54:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8001b56:	00ad      	lsls	r5, r5, #2
 8001b58:	5d63      	ldrb	r3, [r4, r5]
 8001b5a:	2002      	movs	r0, #2
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d006      	beq.n	8001b6e <HAL_PCD_EP_Close+0x3a>
 8001b60:	2301      	movs	r3, #1
 8001b62:	5563      	strb	r3, [r4, r5]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b64:	6820      	ldr	r0, [r4, #0]
 8001b66:	f001 fc2d 	bl	80033c4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b6a:	2000      	movs	r0, #0
 8001b6c:	5560      	strb	r0, [r4, r5]
}
 8001b6e:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 8001b70:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b72:	3151      	adds	r1, #81	@ 0x51
    ep->is_in = 0U;
 8001b74:	3052      	adds	r0, #82	@ 0x52
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b76:	31ff      	adds	r1, #255	@ 0xff
    ep->is_in = 0U;
 8001b78:	30ff      	adds	r0, #255	@ 0xff
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b7a:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 8001b7c:	7003      	strb	r3, [r0, #0]
 8001b7e:	e7e8      	b.n	8001b52 <HAL_PCD_EP_Close+0x1e>

08001b80 <HAL_PCD_EP_Receive>:
{
 8001b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b82:	2407      	movs	r4, #7
}
 8001b84:	4021      	ands	r1, r4
  ep->xfer_buff = pBuf;
 8001b86:	3421      	adds	r4, #33	@ 0x21
 8001b88:	434c      	muls	r4, r1
 8001b8a:	1906      	adds	r6, r0, r4
 8001b8c:	0037      	movs	r7, r6
 8001b8e:	37fc      	adds	r7, #252	@ 0xfc
  ep->xfer_len = len;
 8001b90:	66fb      	str	r3, [r7, #108]	@ 0x6c
  ep->is_in = 0U;
 8001b92:	0033      	movs	r3, r6
  ep->xfer_count = 0U;
 8001b94:	2500      	movs	r5, #0
  ep->is_in = 0U;
 8001b96:	3352      	adds	r3, #82	@ 0x52
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b98:	3651      	adds	r6, #81	@ 0x51
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b9a:	3451      	adds	r4, #81	@ 0x51
  ep->is_in = 0U;
 8001b9c:	33ff      	adds	r3, #255	@ 0xff
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b9e:	36ff      	adds	r6, #255	@ 0xff
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ba0:	34ff      	adds	r4, #255	@ 0xff
  ep->xfer_count = 0U;
 8001ba2:	673d      	str	r5, [r7, #112]	@ 0x70
  ep->xfer_buff = pBuf;
 8001ba4:	66ba      	str	r2, [r7, #104]	@ 0x68
  ep->is_in = 0U;
 8001ba6:	701d      	strb	r5, [r3, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ba8:	7031      	strb	r1, [r6, #0]
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001baa:	1901      	adds	r1, r0, r4
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001bac:	6800      	ldr	r0, [r0, #0]
 8001bae:	f001 fd05 	bl	80035bc <USB_EPStartXfer>
}
 8001bb2:	0028      	movs	r0, r5
 8001bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001bb6 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001bb6:	2307      	movs	r3, #7
 8001bb8:	400b      	ands	r3, r1
 8001bba:	2128      	movs	r1, #40	@ 0x28
 8001bbc:	4359      	muls	r1, r3
 8001bbe:	1840      	adds	r0, r0, r1
 8001bc0:	30fc      	adds	r0, #252	@ 0xfc
 8001bc2:	6f00      	ldr	r0, [r0, #112]	@ 0x70
}
 8001bc4:	4770      	bx	lr

08001bc6 <HAL_PCD_EP_Transmit>:
{
 8001bc6:	b570      	push	{r4, r5, r6, lr}
 8001bc8:	2407      	movs	r4, #7
}
 8001bca:	4021      	ands	r1, r4
 8001bcc:	3421      	adds	r4, #33	@ 0x21
 8001bce:	434c      	muls	r4, r1
  ep->xfer_buff = pBuf;
 8001bd0:	1906      	adds	r6, r0, r4
  ep->xfer_fill_db = 1U;
 8001bd2:	0035      	movs	r5, r6
  ep->xfer_buff = pBuf;
 8001bd4:	6272      	str	r2, [r6, #36]	@ 0x24
  ep->xfer_fill_db = 1U;
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	3534      	adds	r5, #52	@ 0x34
  ep->xfer_len = len;
 8001bda:	62b3      	str	r3, [r6, #40]	@ 0x28
  ep->xfer_fill_db = 1U;
 8001bdc:	702a      	strb	r2, [r5, #0]
  ep->xfer_count = 0U;
 8001bde:	2500      	movs	r5, #0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001be0:	3410      	adds	r4, #16
  ep->xfer_count = 0U;
 8001be2:	62f5      	str	r5, [r6, #44]	@ 0x2c
  ep->num = ep_addr & EP_ADDR_MSK;
 8001be4:	7431      	strb	r1, [r6, #16]
  ep->xfer_len_db = len;
 8001be6:	6333      	str	r3, [r6, #48]	@ 0x30
  ep->is_in = 1U;
 8001be8:	7472      	strb	r2, [r6, #17]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bea:	1901      	adds	r1, r0, r4
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001bec:	6800      	ldr	r0, [r0, #0]
 8001bee:	f001 fce5 	bl	80035bc <USB_EPStartXfer>
}
 8001bf2:	0028      	movs	r0, r5
 8001bf4:	bd70      	pop	{r4, r5, r6, pc}

08001bf6 <HAL_PCD_EP_SetStall>:
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001bf6:	2207      	movs	r2, #7
{
 8001bf8:	b570      	push	{r4, r5, r6, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001bfa:	7903      	ldrb	r3, [r0, #4]
{
 8001bfc:	0004      	movs	r4, r0
 8001bfe:	400a      	ands	r2, r1
    return HAL_ERROR;
 8001c00:	2001      	movs	r0, #1
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d319      	bcc.n	8001c3a <HAL_PCD_EP_SetStall+0x44>
  if ((0x80U & ep_addr) == 0x80U)
 8001c06:	b248      	sxtb	r0, r1
 8001c08:	2328      	movs	r3, #40	@ 0x28
 8001c0a:	2800      	cmp	r0, #0
 8001c0c:	da16      	bge.n	8001c3c <HAL_PCD_EP_SetStall+0x46>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c0e:	4353      	muls	r3, r2
 8001c10:	0019      	movs	r1, r3
    ep->is_in = 1U;
 8001c12:	2001      	movs	r0, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c14:	3110      	adds	r1, #16
    ep->is_in = 1U;
 8001c16:	18e3      	adds	r3, r4, r3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c18:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 8001c1a:	7458      	strb	r0, [r3, #17]
  ep->is_stall = 1U;
 8001c1c:	2301      	movs	r3, #1
  __HAL_LOCK(hpcd);
 8001c1e:	25a4      	movs	r5, #164	@ 0xa4
  ep->is_stall = 1U;
 8001c20:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c22:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8001c24:	00ad      	lsls	r5, r5, #2
 8001c26:	5d62      	ldrb	r2, [r4, r5]
 8001c28:	2002      	movs	r0, #2
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d005      	beq.n	8001c3a <HAL_PCD_EP_SetStall+0x44>
 8001c2e:	5563      	strb	r3, [r4, r5]
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001c30:	6820      	ldr	r0, [r4, #0]
 8001c32:	f001 fc41 	bl	80034b8 <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 8001c36:	2000      	movs	r0, #0
 8001c38:	5560      	strb	r0, [r4, r5]
}
 8001c3a:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8001c3c:	434b      	muls	r3, r1
 8001c3e:	0019      	movs	r1, r3
    ep->is_in = 0U;
 8001c40:	2000      	movs	r0, #0
 8001c42:	18e3      	adds	r3, r4, r3
    ep = &hpcd->OUT_ep[ep_addr];
 8001c44:	3151      	adds	r1, #81	@ 0x51
    ep->is_in = 0U;
 8001c46:	3352      	adds	r3, #82	@ 0x52
    ep = &hpcd->OUT_ep[ep_addr];
 8001c48:	31ff      	adds	r1, #255	@ 0xff
    ep->is_in = 0U;
 8001c4a:	33ff      	adds	r3, #255	@ 0xff
    ep = &hpcd->OUT_ep[ep_addr];
 8001c4c:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 8001c4e:	7018      	strb	r0, [r3, #0]
 8001c50:	e7e4      	b.n	8001c1c <HAL_PCD_EP_SetStall+0x26>

08001c52 <HAL_PCD_EP_ClrStall>:
{
 8001c52:	000b      	movs	r3, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001c54:	220f      	movs	r2, #15
{
 8001c56:	b570      	push	{r4, r5, r6, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001c58:	7901      	ldrb	r1, [r0, #4]
{
 8001c5a:	0004      	movs	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001c5c:	401a      	ands	r2, r3
    return HAL_ERROR;
 8001c5e:	2001      	movs	r0, #1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001c60:	4291      	cmp	r1, r2
 8001c62:	d31b      	bcc.n	8001c9c <HAL_PCD_EP_ClrStall+0x4a>
  if ((0x80U & ep_addr) == 0x80U)
 8001c64:	2207      	movs	r2, #7
 8001c66:	2128      	movs	r1, #40	@ 0x28
 8001c68:	401a      	ands	r2, r3
 8001c6a:	4351      	muls	r1, r2
 8001c6c:	b25b      	sxtb	r3, r3
 8001c6e:	1860      	adds	r0, r4, r1
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	da14      	bge.n	8001c9e <HAL_PCD_EP_ClrStall+0x4c>
    ep->is_in = 1U;
 8001c74:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c76:	3110      	adds	r1, #16
 8001c78:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 8001c7a:	7443      	strb	r3, [r0, #17]
  ep->is_stall = 0U;
 8001c7c:	2500      	movs	r5, #0
  __HAL_LOCK(hpcd);
 8001c7e:	26a4      	movs	r6, #164	@ 0xa4
  ep->is_stall = 0U;
 8001c80:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c82:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8001c84:	00b6      	lsls	r6, r6, #2
 8001c86:	5da3      	ldrb	r3, [r4, r6]
 8001c88:	2002      	movs	r0, #2
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d006      	beq.n	8001c9c <HAL_PCD_EP_ClrStall+0x4a>
 8001c8e:	2301      	movs	r3, #1
 8001c90:	55a3      	strb	r3, [r4, r6]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001c92:	6820      	ldr	r0, [r4, #0]
 8001c94:	f001 fc30 	bl	80034f8 <USB_EPClearStall>
  return HAL_OK;
 8001c98:	0028      	movs	r0, r5
  __HAL_UNLOCK(hpcd);
 8001c9a:	55a5      	strb	r5, [r4, r6]
}
 8001c9c:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 8001c9e:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ca0:	3151      	adds	r1, #81	@ 0x51
    ep->is_in = 0U;
 8001ca2:	3052      	adds	r0, #82	@ 0x52
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ca4:	31ff      	adds	r1, #255	@ 0xff
    ep->is_in = 0U;
 8001ca6:	30ff      	adds	r0, #255	@ 0xff
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ca8:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 8001caa:	7003      	strb	r3, [r0, #0]
 8001cac:	e7e6      	b.n	8001c7c <HAL_PCD_EP_ClrStall+0x2a>

08001cae <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8001cae:	b530      	push	{r4, r5, lr}
 8001cb0:	2428      	movs	r4, #40	@ 0x28
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001cb2:	060d      	lsls	r5, r1, #24
 8001cb4:	d50b      	bpl.n	8001cce <HAL_PCDEx_PMAConfig+0x20>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cb6:	2507      	movs	r5, #7
 8001cb8:	4029      	ands	r1, r5
 8001cba:	434c      	muls	r4, r1
 8001cbc:	3410      	adds	r4, #16
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001cbe:	1900      	adds	r0, r0, r4
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001cc0:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 8001cc2:	2a00      	cmp	r2, #0
 8001cc4:	d107      	bne.n	8001cd6 <HAL_PCDEx_PMAConfig+0x28>
    ep->doublebuffer = 0U;
 8001cc6:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 8001cc8:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8001cca:	2000      	movs	r0, #0
 8001ccc:	bd30      	pop	{r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8001cce:	434c      	muls	r4, r1
 8001cd0:	3451      	adds	r4, #81	@ 0x51
 8001cd2:	34ff      	adds	r4, #255	@ 0xff
 8001cd4:	e7f3      	b.n	8001cbe <HAL_PCDEx_PMAConfig+0x10>
    ep->doublebuffer = 1U;
 8001cd6:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001cd8:	6083      	str	r3, [r0, #8]
    ep->doublebuffer = 1U;
 8001cda:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001cdc:	e7f5      	b.n	8001cca <HAL_PCDEx_PMAConfig+0x1c>

08001cde <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 8001cde:	6803      	ldr	r3, [r0, #0]
{
 8001ce0:	0002      	movs	r2, r0
  hpcd->lpm_active = 1U;
 8001ce2:	20b4      	movs	r0, #180	@ 0xb4
 8001ce4:	2101      	movs	r1, #1
{
 8001ce6:	b510      	push	{r4, lr}
  hpcd->lpm_active = 1U;
 8001ce8:	0080      	lsls	r0, r0, #2
  hpcd->LPM_State = LPM_L0;
 8001cea:	24b2      	movs	r4, #178	@ 0xb2
  hpcd->lpm_active = 1U;
 8001cec:	5011      	str	r1, [r2, r0]
  hpcd->LPM_State = LPM_L0;
 8001cee:	2000      	movs	r0, #0
 8001cf0:	00a4      	lsls	r4, r4, #2
 8001cf2:	5510      	strb	r0, [r2, r4]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001cf4:	3354      	adds	r3, #84	@ 0x54
 8001cf6:	881a      	ldrh	r2, [r3, #0]
 8001cf8:	4311      	orrs	r1, r2
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001cfa:	2202      	movs	r2, #2
  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001cfc:	8019      	strh	r1, [r3, #0]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001cfe:	8819      	ldrh	r1, [r3, #0]
 8001d00:	430a      	orrs	r2, r1
 8001d02:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
}
 8001d04:	bd10      	pop	{r4, pc}

08001d06 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8001d06:	4770      	bx	lr

08001d08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d0a:	0004      	movs	r4, r0
 8001d0c:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d0e:	2800      	cmp	r0, #0
 8001d10:	d102      	bne.n	8001d18 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001d12:	2001      	movs	r0, #1
      }
    }
  }

  return HAL_OK;
}
 8001d14:	b005      	add	sp, #20
 8001d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d18:	6803      	ldr	r3, [r0, #0]
 8001d1a:	07db      	lsls	r3, r3, #31
 8001d1c:	d433      	bmi.n	8001d86 <HAL_RCC_OscConfig+0x7e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d1e:	6823      	ldr	r3, [r4, #0]
 8001d20:	079b      	lsls	r3, r3, #30
 8001d22:	d500      	bpl.n	8001d26 <HAL_RCC_OscConfig+0x1e>
 8001d24:	e087      	b.n	8001e36 <HAL_RCC_OscConfig+0x12e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d26:	6823      	ldr	r3, [r4, #0]
 8001d28:	071b      	lsls	r3, r3, #28
 8001d2a:	d500      	bpl.n	8001d2e <HAL_RCC_OscConfig+0x26>
 8001d2c:	e0c8      	b.n	8001ec0 <HAL_RCC_OscConfig+0x1b8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d2e:	6823      	ldr	r3, [r4, #0]
 8001d30:	075b      	lsls	r3, r3, #29
 8001d32:	d500      	bpl.n	8001d36 <HAL_RCC_OscConfig+0x2e>
 8001d34:	e0eb      	b.n	8001f0e <HAL_RCC_OscConfig+0x206>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001d36:	6823      	ldr	r3, [r4, #0]
 8001d38:	06db      	lsls	r3, r3, #27
 8001d3a:	d51a      	bpl.n	8001d72 <HAL_RCC_OscConfig+0x6a>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001d3c:	6962      	ldr	r2, [r4, #20]
 8001d3e:	2304      	movs	r3, #4
 8001d40:	4db9      	ldr	r5, [pc, #740]	@ (8002028 <HAL_RCC_OscConfig+0x320>)
 8001d42:	2a01      	cmp	r2, #1
 8001d44:	d000      	beq.n	8001d48 <HAL_RCC_OscConfig+0x40>
 8001d46:	e154      	b.n	8001ff2 <HAL_RCC_OscConfig+0x2ea>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001d48:	6b69      	ldr	r1, [r5, #52]	@ 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001d4a:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001d4c:	430b      	orrs	r3, r1
 8001d4e:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_ENABLE();
 8001d50:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8001d52:	431a      	orrs	r2, r3
 8001d54:	636a      	str	r2, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8001d56:	f7fe ff6d 	bl	8000c34 <HAL_GetTick>
 8001d5a:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001d5c:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8001d5e:	423b      	tst	r3, r7
 8001d60:	d100      	bne.n	8001d64 <HAL_RCC_OscConfig+0x5c>
 8001d62:	e13f      	b.n	8001fe4 <HAL_RCC_OscConfig+0x2dc>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001d64:	21f8      	movs	r1, #248	@ 0xf8
 8001d66:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8001d68:	69a3      	ldr	r3, [r4, #24]
 8001d6a:	438a      	bics	r2, r1
 8001d6c:	00db      	lsls	r3, r3, #3
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	636b      	str	r3, [r5, #52]	@ 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d72:	6823      	ldr	r3, [r4, #0]
 8001d74:	069b      	lsls	r3, r3, #26
 8001d76:	d500      	bpl.n	8001d7a <HAL_RCC_OscConfig+0x72>
 8001d78:	e162      	b.n	8002040 <HAL_RCC_OscConfig+0x338>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d7a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d000      	beq.n	8001d82 <HAL_RCC_OscConfig+0x7a>
 8001d80:	e1a1      	b.n	80020c6 <HAL_RCC_OscConfig+0x3be>
  return HAL_OK;
 8001d82:	2000      	movs	r0, #0
 8001d84:	e7c6      	b.n	8001d14 <HAL_RCC_OscConfig+0xc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001d86:	220c      	movs	r2, #12
 8001d88:	4da7      	ldr	r5, [pc, #668]	@ (8002028 <HAL_RCC_OscConfig+0x320>)
 8001d8a:	686b      	ldr	r3, [r5, #4]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	2b04      	cmp	r3, #4
 8001d90:	d00b      	beq.n	8001daa <HAL_RCC_OscConfig+0xa2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d92:	686b      	ldr	r3, [r5, #4]
 8001d94:	4013      	ands	r3, r2
 8001d96:	2b08      	cmp	r3, #8
 8001d98:	d10e      	bne.n	8001db8 <HAL_RCC_OscConfig+0xb0>
 8001d9a:	22c0      	movs	r2, #192	@ 0xc0
 8001d9c:	686b      	ldr	r3, [r5, #4]
 8001d9e:	0252      	lsls	r2, r2, #9
 8001da0:	4013      	ands	r3, r2
 8001da2:	2280      	movs	r2, #128	@ 0x80
 8001da4:	0252      	lsls	r2, r2, #9
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d106      	bne.n	8001db8 <HAL_RCC_OscConfig+0xb0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001daa:	682b      	ldr	r3, [r5, #0]
 8001dac:	039b      	lsls	r3, r3, #14
 8001dae:	d5b6      	bpl.n	8001d1e <HAL_RCC_OscConfig+0x16>
 8001db0:	6863      	ldr	r3, [r4, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1b3      	bne.n	8001d1e <HAL_RCC_OscConfig+0x16>
 8001db6:	e7ac      	b.n	8001d12 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001db8:	6863      	ldr	r3, [r4, #4]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d113      	bne.n	8001de6 <HAL_RCC_OscConfig+0xde>
 8001dbe:	2380      	movs	r3, #128	@ 0x80
 8001dc0:	682a      	ldr	r2, [r5, #0]
 8001dc2:	025b      	lsls	r3, r3, #9
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001dc8:	f7fe ff34 	bl	8000c34 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dcc:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8001dce:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dd0:	02bf      	lsls	r7, r7, #10
 8001dd2:	682b      	ldr	r3, [r5, #0]
 8001dd4:	423b      	tst	r3, r7
 8001dd6:	d1a2      	bne.n	8001d1e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dd8:	f7fe ff2c 	bl	8000c34 <HAL_GetTick>
 8001ddc:	1b80      	subs	r0, r0, r6
 8001dde:	2864      	cmp	r0, #100	@ 0x64
 8001de0:	d9f7      	bls.n	8001dd2 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8001de2:	2003      	movs	r0, #3
 8001de4:	e796      	b.n	8001d14 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d115      	bne.n	8001e16 <HAL_RCC_OscConfig+0x10e>
 8001dea:	682b      	ldr	r3, [r5, #0]
 8001dec:	4a8f      	ldr	r2, [pc, #572]	@ (800202c <HAL_RCC_OscConfig+0x324>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dee:	2780      	movs	r7, #128	@ 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001df0:	4013      	ands	r3, r2
 8001df2:	602b      	str	r3, [r5, #0]
 8001df4:	682b      	ldr	r3, [r5, #0]
 8001df6:	4a8e      	ldr	r2, [pc, #568]	@ (8002030 <HAL_RCC_OscConfig+0x328>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001df8:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001dfe:	f7fe ff19 	bl	8000c34 <HAL_GetTick>
 8001e02:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e04:	682b      	ldr	r3, [r5, #0]
 8001e06:	423b      	tst	r3, r7
 8001e08:	d089      	beq.n	8001d1e <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e0a:	f7fe ff13 	bl	8000c34 <HAL_GetTick>
 8001e0e:	1b80      	subs	r0, r0, r6
 8001e10:	2864      	cmp	r0, #100	@ 0x64
 8001e12:	d9f7      	bls.n	8001e04 <HAL_RCC_OscConfig+0xfc>
 8001e14:	e7e5      	b.n	8001de2 <HAL_RCC_OscConfig+0xda>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e16:	2b05      	cmp	r3, #5
 8001e18:	d105      	bne.n	8001e26 <HAL_RCC_OscConfig+0x11e>
 8001e1a:	2380      	movs	r3, #128	@ 0x80
 8001e1c:	682a      	ldr	r2, [r5, #0]
 8001e1e:	02db      	lsls	r3, r3, #11
 8001e20:	4313      	orrs	r3, r2
 8001e22:	602b      	str	r3, [r5, #0]
 8001e24:	e7cb      	b.n	8001dbe <HAL_RCC_OscConfig+0xb6>
 8001e26:	682b      	ldr	r3, [r5, #0]
 8001e28:	4a80      	ldr	r2, [pc, #512]	@ (800202c <HAL_RCC_OscConfig+0x324>)
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	602b      	str	r3, [r5, #0]
 8001e2e:	682b      	ldr	r3, [r5, #0]
 8001e30:	4a7f      	ldr	r2, [pc, #508]	@ (8002030 <HAL_RCC_OscConfig+0x328>)
 8001e32:	4013      	ands	r3, r2
 8001e34:	e7c7      	b.n	8001dc6 <HAL_RCC_OscConfig+0xbe>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e36:	220c      	movs	r2, #12
 8001e38:	4d7b      	ldr	r5, [pc, #492]	@ (8002028 <HAL_RCC_OscConfig+0x320>)
 8001e3a:	686b      	ldr	r3, [r5, #4]
 8001e3c:	4213      	tst	r3, r2
 8001e3e:	d00b      	beq.n	8001e58 <HAL_RCC_OscConfig+0x150>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001e40:	686b      	ldr	r3, [r5, #4]
 8001e42:	4013      	ands	r3, r2
 8001e44:	2b08      	cmp	r3, #8
 8001e46:	d116      	bne.n	8001e76 <HAL_RCC_OscConfig+0x16e>
 8001e48:	22c0      	movs	r2, #192	@ 0xc0
 8001e4a:	686b      	ldr	r3, [r5, #4]
 8001e4c:	0252      	lsls	r2, r2, #9
 8001e4e:	4013      	ands	r3, r2
 8001e50:	2280      	movs	r2, #128	@ 0x80
 8001e52:	0212      	lsls	r2, r2, #8
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d10e      	bne.n	8001e76 <HAL_RCC_OscConfig+0x16e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e58:	682b      	ldr	r3, [r5, #0]
 8001e5a:	079b      	lsls	r3, r3, #30
 8001e5c:	d503      	bpl.n	8001e66 <HAL_RCC_OscConfig+0x15e>
 8001e5e:	68e3      	ldr	r3, [r4, #12]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d000      	beq.n	8001e66 <HAL_RCC_OscConfig+0x15e>
 8001e64:	e755      	b.n	8001d12 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e66:	21f8      	movs	r1, #248	@ 0xf8
 8001e68:	682a      	ldr	r2, [r5, #0]
 8001e6a:	6923      	ldr	r3, [r4, #16]
 8001e6c:	438a      	bics	r2, r1
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	4313      	orrs	r3, r2
 8001e72:	602b      	str	r3, [r5, #0]
 8001e74:	e757      	b.n	8001d26 <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e76:	68e2      	ldr	r2, [r4, #12]
 8001e78:	2301      	movs	r3, #1
 8001e7a:	2a00      	cmp	r2, #0
 8001e7c:	d00f      	beq.n	8001e9e <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_HSI_ENABLE();
 8001e7e:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e80:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8001e82:	4313      	orrs	r3, r2
 8001e84:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001e86:	f7fe fed5 	bl	8000c34 <HAL_GetTick>
 8001e8a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e8c:	682b      	ldr	r3, [r5, #0]
 8001e8e:	423b      	tst	r3, r7
 8001e90:	d1e9      	bne.n	8001e66 <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e92:	f7fe fecf 	bl	8000c34 <HAL_GetTick>
 8001e96:	1b80      	subs	r0, r0, r6
 8001e98:	2802      	cmp	r0, #2
 8001e9a:	d9f7      	bls.n	8001e8c <HAL_RCC_OscConfig+0x184>
 8001e9c:	e7a1      	b.n	8001de2 <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_HSI_DISABLE();
 8001e9e:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ea0:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8001ea2:	439a      	bics	r2, r3
 8001ea4:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8001ea6:	f7fe fec5 	bl	8000c34 <HAL_GetTick>
 8001eaa:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eac:	682b      	ldr	r3, [r5, #0]
 8001eae:	423b      	tst	r3, r7
 8001eb0:	d100      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x1ac>
 8001eb2:	e738      	b.n	8001d26 <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eb4:	f7fe febe 	bl	8000c34 <HAL_GetTick>
 8001eb8:	1b80      	subs	r0, r0, r6
 8001eba:	2802      	cmp	r0, #2
 8001ebc:	d9f6      	bls.n	8001eac <HAL_RCC_OscConfig+0x1a4>
 8001ebe:	e790      	b.n	8001de2 <HAL_RCC_OscConfig+0xda>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ec0:	69e2      	ldr	r2, [r4, #28]
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	4d58      	ldr	r5, [pc, #352]	@ (8002028 <HAL_RCC_OscConfig+0x320>)
 8001ec6:	2a00      	cmp	r2, #0
 8001ec8:	d010      	beq.n	8001eec <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_LSI_ENABLE();
 8001eca:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ecc:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	626b      	str	r3, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 8001ed2:	f7fe feaf 	bl	8000c34 <HAL_GetTick>
 8001ed6:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ed8:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8001eda:	423b      	tst	r3, r7
 8001edc:	d000      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x1d8>
 8001ede:	e726      	b.n	8001d2e <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ee0:	f7fe fea8 	bl	8000c34 <HAL_GetTick>
 8001ee4:	1b80      	subs	r0, r0, r6
 8001ee6:	2802      	cmp	r0, #2
 8001ee8:	d9f6      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x1d0>
 8001eea:	e77a      	b.n	8001de2 <HAL_RCC_OscConfig+0xda>
      __HAL_RCC_LSI_DISABLE();
 8001eec:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eee:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 8001ef0:	439a      	bics	r2, r3
 8001ef2:	626a      	str	r2, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 8001ef4:	f7fe fe9e 	bl	8000c34 <HAL_GetTick>
 8001ef8:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001efa:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8001efc:	423b      	tst	r3, r7
 8001efe:	d100      	bne.n	8001f02 <HAL_RCC_OscConfig+0x1fa>
 8001f00:	e715      	b.n	8001d2e <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f02:	f7fe fe97 	bl	8000c34 <HAL_GetTick>
 8001f06:	1b80      	subs	r0, r0, r6
 8001f08:	2802      	cmp	r0, #2
 8001f0a:	d9f6      	bls.n	8001efa <HAL_RCC_OscConfig+0x1f2>
 8001f0c:	e769      	b.n	8001de2 <HAL_RCC_OscConfig+0xda>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f0e:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001f10:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f12:	4d45      	ldr	r5, [pc, #276]	@ (8002028 <HAL_RCC_OscConfig+0x320>)
 8001f14:	0552      	lsls	r2, r2, #21
 8001f16:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001f18:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f1a:	4213      	tst	r3, r2
 8001f1c:	d108      	bne.n	8001f30 <HAL_RCC_OscConfig+0x228>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f1e:	69eb      	ldr	r3, [r5, #28]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	61eb      	str	r3, [r5, #28]
 8001f24:	69eb      	ldr	r3, [r5, #28]
 8001f26:	4013      	ands	r3, r2
 8001f28:	9303      	str	r3, [sp, #12]
 8001f2a:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f30:	2780      	movs	r7, #128	@ 0x80
 8001f32:	4e40      	ldr	r6, [pc, #256]	@ (8002034 <HAL_RCC_OscConfig+0x32c>)
 8001f34:	007f      	lsls	r7, r7, #1
 8001f36:	6833      	ldr	r3, [r6, #0]
 8001f38:	423b      	tst	r3, r7
 8001f3a:	d015      	beq.n	8001f68 <HAL_RCC_OscConfig+0x260>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f3c:	68a3      	ldr	r3, [r4, #8]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d122      	bne.n	8001f88 <HAL_RCC_OscConfig+0x280>
 8001f42:	6a2a      	ldr	r2, [r5, #32]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8001f48:	f7fe fe74 	bl	8000c34 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f4c:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8001f4e:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f50:	6a2b      	ldr	r3, [r5, #32]
 8001f52:	423b      	tst	r3, r7
 8001f54:	d03f      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x2ce>
    if(pwrclkchanged == SET)
 8001f56:	9b00      	ldr	r3, [sp, #0]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d000      	beq.n	8001f5e <HAL_RCC_OscConfig+0x256>
 8001f5c:	e6eb      	b.n	8001d36 <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f5e:	69eb      	ldr	r3, [r5, #28]
 8001f60:	4a35      	ldr	r2, [pc, #212]	@ (8002038 <HAL_RCC_OscConfig+0x330>)
 8001f62:	4013      	ands	r3, r2
 8001f64:	61eb      	str	r3, [r5, #28]
 8001f66:	e6e6      	b.n	8001d36 <HAL_RCC_OscConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f68:	6833      	ldr	r3, [r6, #0]
 8001f6a:	433b      	orrs	r3, r7
 8001f6c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001f6e:	f7fe fe61 	bl	8000c34 <HAL_GetTick>
 8001f72:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f74:	6833      	ldr	r3, [r6, #0]
 8001f76:	423b      	tst	r3, r7
 8001f78:	d1e0      	bne.n	8001f3c <HAL_RCC_OscConfig+0x234>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f7a:	f7fe fe5b 	bl	8000c34 <HAL_GetTick>
 8001f7e:	9b01      	ldr	r3, [sp, #4]
 8001f80:	1ac0      	subs	r0, r0, r3
 8001f82:	2864      	cmp	r0, #100	@ 0x64
 8001f84:	d9f6      	bls.n	8001f74 <HAL_RCC_OscConfig+0x26c>
 8001f86:	e72c      	b.n	8001de2 <HAL_RCC_OscConfig+0xda>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f88:	2201      	movs	r2, #1
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d114      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x2b0>
 8001f8e:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f90:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f92:	4393      	bics	r3, r2
 8001f94:	622b      	str	r3, [r5, #32]
 8001f96:	6a2b      	ldr	r3, [r5, #32]
 8001f98:	3203      	adds	r2, #3
 8001f9a:	4393      	bics	r3, r2
 8001f9c:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8001f9e:	f7fe fe49 	bl	8000c34 <HAL_GetTick>
 8001fa2:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fa4:	6a2b      	ldr	r3, [r5, #32]
 8001fa6:	423b      	tst	r3, r7
 8001fa8:	d0d5      	beq.n	8001f56 <HAL_RCC_OscConfig+0x24e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001faa:	f7fe fe43 	bl	8000c34 <HAL_GetTick>
 8001fae:	4b23      	ldr	r3, [pc, #140]	@ (800203c <HAL_RCC_OscConfig+0x334>)
 8001fb0:	1b80      	subs	r0, r0, r6
 8001fb2:	4298      	cmp	r0, r3
 8001fb4:	d9f6      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x29c>
 8001fb6:	e714      	b.n	8001de2 <HAL_RCC_OscConfig+0xda>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fb8:	2b05      	cmp	r3, #5
 8001fba:	d105      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x2c0>
 8001fbc:	6a29      	ldr	r1, [r5, #32]
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	430b      	orrs	r3, r1
 8001fc2:	622b      	str	r3, [r5, #32]
 8001fc4:	6a2b      	ldr	r3, [r5, #32]
 8001fc6:	e7bd      	b.n	8001f44 <HAL_RCC_OscConfig+0x23c>
 8001fc8:	6a2b      	ldr	r3, [r5, #32]
 8001fca:	4393      	bics	r3, r2
 8001fcc:	2204      	movs	r2, #4
 8001fce:	622b      	str	r3, [r5, #32]
 8001fd0:	6a2b      	ldr	r3, [r5, #32]
 8001fd2:	4393      	bics	r3, r2
 8001fd4:	e7b7      	b.n	8001f46 <HAL_RCC_OscConfig+0x23e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fd6:	f7fe fe2d 	bl	8000c34 <HAL_GetTick>
 8001fda:	4b18      	ldr	r3, [pc, #96]	@ (800203c <HAL_RCC_OscConfig+0x334>)
 8001fdc:	1b80      	subs	r0, r0, r6
 8001fde:	4298      	cmp	r0, r3
 8001fe0:	d9b6      	bls.n	8001f50 <HAL_RCC_OscConfig+0x248>
 8001fe2:	e6fe      	b.n	8001de2 <HAL_RCC_OscConfig+0xda>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001fe4:	f7fe fe26 	bl	8000c34 <HAL_GetTick>
 8001fe8:	1b80      	subs	r0, r0, r6
 8001fea:	2802      	cmp	r0, #2
 8001fec:	d800      	bhi.n	8001ff0 <HAL_RCC_OscConfig+0x2e8>
 8001fee:	e6b5      	b.n	8001d5c <HAL_RCC_OscConfig+0x54>
 8001ff0:	e6f7      	b.n	8001de2 <HAL_RCC_OscConfig+0xda>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001ff2:	3205      	adds	r2, #5
 8001ff4:	d103      	bne.n	8001ffe <HAL_RCC_OscConfig+0x2f6>
      __HAL_RCC_HSI14ADC_ENABLE();
 8001ff6:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8001ff8:	439a      	bics	r2, r3
 8001ffa:	636a      	str	r2, [r5, #52]	@ 0x34
 8001ffc:	e6b2      	b.n	8001d64 <HAL_RCC_OscConfig+0x5c>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001ffe:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002000:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8002002:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8002004:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8002006:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_DISABLE();
 8002008:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800200a:	4393      	bics	r3, r2
 800200c:	636b      	str	r3, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 800200e:	f7fe fe11 	bl	8000c34 <HAL_GetTick>
 8002012:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002014:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8002016:	423b      	tst	r3, r7
 8002018:	d100      	bne.n	800201c <HAL_RCC_OscConfig+0x314>
 800201a:	e6aa      	b.n	8001d72 <HAL_RCC_OscConfig+0x6a>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800201c:	f7fe fe0a 	bl	8000c34 <HAL_GetTick>
 8002020:	1b80      	subs	r0, r0, r6
 8002022:	2802      	cmp	r0, #2
 8002024:	d9f6      	bls.n	8002014 <HAL_RCC_OscConfig+0x30c>
 8002026:	e6dc      	b.n	8001de2 <HAL_RCC_OscConfig+0xda>
 8002028:	40021000 	.word	0x40021000
 800202c:	fffeffff 	.word	0xfffeffff
 8002030:	fffbffff 	.word	0xfffbffff
 8002034:	40007000 	.word	0x40007000
 8002038:	efffffff 	.word	0xefffffff
 800203c:	00001388 	.word	0x00001388
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002040:	220c      	movs	r2, #12
 8002042:	4d55      	ldr	r5, [pc, #340]	@ (8002198 <HAL_RCC_OscConfig+0x490>)
 8002044:	686b      	ldr	r3, [r5, #4]
 8002046:	4013      	ands	r3, r2
 8002048:	4293      	cmp	r3, r2
 800204a:	d009      	beq.n	8002060 <HAL_RCC_OscConfig+0x358>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800204c:	686b      	ldr	r3, [r5, #4]
 800204e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002050:	2b08      	cmp	r3, #8
 8002052:	d10e      	bne.n	8002072 <HAL_RCC_OscConfig+0x36a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002054:	22c0      	movs	r2, #192	@ 0xc0
 8002056:	686b      	ldr	r3, [r5, #4]
 8002058:	0252      	lsls	r2, r2, #9
 800205a:	4013      	ands	r3, r2
 800205c:	4293      	cmp	r3, r2
 800205e:	d108      	bne.n	8002072 <HAL_RCC_OscConfig+0x36a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002060:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8002062:	039b      	lsls	r3, r3, #14
 8002064:	d400      	bmi.n	8002068 <HAL_RCC_OscConfig+0x360>
 8002066:	e688      	b.n	8001d7a <HAL_RCC_OscConfig+0x72>
 8002068:	6a23      	ldr	r3, [r4, #32]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d000      	beq.n	8002070 <HAL_RCC_OscConfig+0x368>
 800206e:	e650      	b.n	8001d12 <HAL_RCC_OscConfig+0xa>
 8002070:	e683      	b.n	8001d7a <HAL_RCC_OscConfig+0x72>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002072:	6a23      	ldr	r3, [r4, #32]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d013      	beq.n	80020a0 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_HSI48_ENABLE();
 8002078:	2380      	movs	r3, #128	@ 0x80
 800207a:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 800207c:	025b      	lsls	r3, r3, #9
 800207e:	4313      	orrs	r3, r2
 8002080:	636b      	str	r3, [r5, #52]	@ 0x34
        tickstart = HAL_GetTick();
 8002082:	f7fe fdd7 	bl	8000c34 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002086:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8002088:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800208a:	02bf      	lsls	r7, r7, #10
 800208c:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800208e:	423b      	tst	r3, r7
 8002090:	d000      	beq.n	8002094 <HAL_RCC_OscConfig+0x38c>
 8002092:	e672      	b.n	8001d7a <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002094:	f7fe fdce 	bl	8000c34 <HAL_GetTick>
 8002098:	1b80      	subs	r0, r0, r6
 800209a:	2802      	cmp	r0, #2
 800209c:	d9f6      	bls.n	800208c <HAL_RCC_OscConfig+0x384>
 800209e:	e6a0      	b.n	8001de2 <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_HSI48_DISABLE();
 80020a0:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80020a2:	4a3e      	ldr	r2, [pc, #248]	@ (800219c <HAL_RCC_OscConfig+0x494>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80020a4:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI48_DISABLE();
 80020a6:	4013      	ands	r3, r2
 80020a8:	636b      	str	r3, [r5, #52]	@ 0x34
        tickstart = HAL_GetTick();
 80020aa:	f7fe fdc3 	bl	8000c34 <HAL_GetTick>
 80020ae:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80020b0:	02bf      	lsls	r7, r7, #10
 80020b2:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80020b4:	423b      	tst	r3, r7
 80020b6:	d100      	bne.n	80020ba <HAL_RCC_OscConfig+0x3b2>
 80020b8:	e65f      	b.n	8001d7a <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020ba:	f7fe fdbb 	bl	8000c34 <HAL_GetTick>
 80020be:	1b80      	subs	r0, r0, r6
 80020c0:	2802      	cmp	r0, #2
 80020c2:	d9f6      	bls.n	80020b2 <HAL_RCC_OscConfig+0x3aa>
 80020c4:	e68d      	b.n	8001de2 <HAL_RCC_OscConfig+0xda>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020c6:	210c      	movs	r1, #12
 80020c8:	4d33      	ldr	r5, [pc, #204]	@ (8002198 <HAL_RCC_OscConfig+0x490>)
 80020ca:	686a      	ldr	r2, [r5, #4]
 80020cc:	400a      	ands	r2, r1
 80020ce:	2a08      	cmp	r2, #8
 80020d0:	d047      	beq.n	8002162 <HAL_RCC_OscConfig+0x45a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020d2:	4a33      	ldr	r2, [pc, #204]	@ (80021a0 <HAL_RCC_OscConfig+0x498>)
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d132      	bne.n	800213e <HAL_RCC_OscConfig+0x436>
        __HAL_RCC_PLL_DISABLE();
 80020d8:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020da:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 80020dc:	4013      	ands	r3, r2
 80020de:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80020e0:	f7fe fda8 	bl	8000c34 <HAL_GetTick>
 80020e4:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020e6:	04bf      	lsls	r7, r7, #18
 80020e8:	682b      	ldr	r3, [r5, #0]
 80020ea:	423b      	tst	r3, r7
 80020ec:	d121      	bne.n	8002132 <HAL_RCC_OscConfig+0x42a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020ee:	220f      	movs	r2, #15
 80020f0:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020f2:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020f4:	4393      	bics	r3, r2
 80020f6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020f8:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020fa:	4313      	orrs	r3, r2
 80020fc:	62eb      	str	r3, [r5, #44]	@ 0x2c
 80020fe:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8002100:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002102:	686a      	ldr	r2, [r5, #4]
 8002104:	430b      	orrs	r3, r1
 8002106:	4927      	ldr	r1, [pc, #156]	@ (80021a4 <HAL_RCC_OscConfig+0x49c>)
 8002108:	400a      	ands	r2, r1
 800210a:	4313      	orrs	r3, r2
 800210c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800210e:	2380      	movs	r3, #128	@ 0x80
 8002110:	682a      	ldr	r2, [r5, #0]
 8002112:	045b      	lsls	r3, r3, #17
 8002114:	4313      	orrs	r3, r2
 8002116:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002118:	f7fe fd8c 	bl	8000c34 <HAL_GetTick>
 800211c:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800211e:	682b      	ldr	r3, [r5, #0]
 8002120:	4233      	tst	r3, r6
 8002122:	d000      	beq.n	8002126 <HAL_RCC_OscConfig+0x41e>
 8002124:	e62d      	b.n	8001d82 <HAL_RCC_OscConfig+0x7a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002126:	f7fe fd85 	bl	8000c34 <HAL_GetTick>
 800212a:	1b00      	subs	r0, r0, r4
 800212c:	2802      	cmp	r0, #2
 800212e:	d9f6      	bls.n	800211e <HAL_RCC_OscConfig+0x416>
 8002130:	e657      	b.n	8001de2 <HAL_RCC_OscConfig+0xda>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002132:	f7fe fd7f 	bl	8000c34 <HAL_GetTick>
 8002136:	1b80      	subs	r0, r0, r6
 8002138:	2802      	cmp	r0, #2
 800213a:	d9d5      	bls.n	80020e8 <HAL_RCC_OscConfig+0x3e0>
 800213c:	e651      	b.n	8001de2 <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_PLL_DISABLE();
 800213e:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002140:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8002142:	4013      	ands	r3, r2
 8002144:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002146:	f7fe fd75 	bl	8000c34 <HAL_GetTick>
 800214a:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800214c:	04b6      	lsls	r6, r6, #18
 800214e:	682b      	ldr	r3, [r5, #0]
 8002150:	4233      	tst	r3, r6
 8002152:	d100      	bne.n	8002156 <HAL_RCC_OscConfig+0x44e>
 8002154:	e615      	b.n	8001d82 <HAL_RCC_OscConfig+0x7a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002156:	f7fe fd6d 	bl	8000c34 <HAL_GetTick>
 800215a:	1b00      	subs	r0, r0, r4
 800215c:	2802      	cmp	r0, #2
 800215e:	d9f6      	bls.n	800214e <HAL_RCC_OscConfig+0x446>
 8002160:	e63f      	b.n	8001de2 <HAL_RCC_OscConfig+0xda>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002162:	2b01      	cmp	r3, #1
 8002164:	d100      	bne.n	8002168 <HAL_RCC_OscConfig+0x460>
 8002166:	e5d4      	b.n	8001d12 <HAL_RCC_OscConfig+0xa>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002168:	22c0      	movs	r2, #192	@ 0xc0
        pll_config  = RCC->CFGR;
 800216a:	6868      	ldr	r0, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800216c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800216e:	0252      	lsls	r2, r2, #9
        pll_config2 = RCC->CFGR2;
 8002170:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002172:	4002      	ands	r2, r0
 8002174:	428a      	cmp	r2, r1
 8002176:	d000      	beq.n	800217a <HAL_RCC_OscConfig+0x472>
 8002178:	e5cb      	b.n	8001d12 <HAL_RCC_OscConfig+0xa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800217a:	220f      	movs	r2, #15
 800217c:	4013      	ands	r3, r2
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800217e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8002180:	4293      	cmp	r3, r2
 8002182:	d000      	beq.n	8002186 <HAL_RCC_OscConfig+0x47e>
 8002184:	e5c5      	b.n	8001d12 <HAL_RCC_OscConfig+0xa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002186:	23f0      	movs	r3, #240	@ 0xf0
 8002188:	039b      	lsls	r3, r3, #14
 800218a:	4018      	ands	r0, r3
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800218c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800218e:	1ac0      	subs	r0, r0, r3
 8002190:	1e43      	subs	r3, r0, #1
 8002192:	4198      	sbcs	r0, r3
 8002194:	b2c0      	uxtb	r0, r0
 8002196:	e5bd      	b.n	8001d14 <HAL_RCC_OscConfig+0xc>
 8002198:	40021000 	.word	0x40021000
 800219c:	fffeffff 	.word	0xfffeffff
 80021a0:	feffffff 	.word	0xfeffffff
 80021a4:	ffc27fff 	.word	0xffc27fff

080021a8 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021a8:	200c      	movs	r0, #12
{
 80021aa:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 80021ac:	4d13      	ldr	r5, [pc, #76]	@ (80021fc <HAL_RCC_GetSysClockFreq+0x54>)
 80021ae:	686b      	ldr	r3, [r5, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80021b0:	4018      	ands	r0, r3
 80021b2:	2808      	cmp	r0, #8
 80021b4:	d008      	beq.n	80021c8 <HAL_RCC_GetSysClockFreq+0x20>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021b6:	380c      	subs	r0, #12
 80021b8:	4243      	negs	r3, r0
 80021ba:	4158      	adcs	r0, r3
 80021bc:	4b10      	ldr	r3, [pc, #64]	@ (8002200 <HAL_RCC_GetSysClockFreq+0x58>)
 80021be:	4240      	negs	r0, r0
 80021c0:	4018      	ands	r0, r3
 80021c2:	4b10      	ldr	r3, [pc, #64]	@ (8002204 <HAL_RCC_GetSysClockFreq+0x5c>)
 80021c4:	18c0      	adds	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80021c6:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80021c8:	200f      	movs	r0, #15
 80021ca:	490f      	ldr	r1, [pc, #60]	@ (8002208 <HAL_RCC_GetSysClockFreq+0x60>)
 80021cc:	0c9a      	lsrs	r2, r3, #18
 80021ce:	4002      	ands	r2, r0
 80021d0:	5c8c      	ldrb	r4, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80021d2:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 80021d4:	490d      	ldr	r1, [pc, #52]	@ (800220c <HAL_RCC_GetSysClockFreq+0x64>)
 80021d6:	4002      	ands	r2, r0
 80021d8:	5c89      	ldrb	r1, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80021da:	22c0      	movs	r2, #192	@ 0xc0
 80021dc:	2080      	movs	r0, #128	@ 0x80
 80021de:	0252      	lsls	r2, r2, #9
 80021e0:	4013      	ands	r3, r2
 80021e2:	0240      	lsls	r0, r0, #9
 80021e4:	4283      	cmp	r3, r0
 80021e6:	d101      	bne.n	80021ec <HAL_RCC_GetSysClockFreq+0x44>
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80021e8:	4806      	ldr	r0, [pc, #24]	@ (8002204 <HAL_RCC_GetSysClockFreq+0x5c>)
 80021ea:	e002      	b.n	80021f2 <HAL_RCC_GetSysClockFreq+0x4a>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d1fb      	bne.n	80021e8 <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80021f0:	4807      	ldr	r0, [pc, #28]	@ (8002210 <HAL_RCC_GetSysClockFreq+0x68>)
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80021f2:	f7fd ffa5 	bl	8000140 <__udivsi3>
 80021f6:	4360      	muls	r0, r4
 80021f8:	e7e5      	b.n	80021c6 <HAL_RCC_GetSysClockFreq+0x1e>
 80021fa:	46c0      	nop			@ (mov r8, r8)
 80021fc:	40021000 	.word	0x40021000
 8002200:	02625a00 	.word	0x02625a00
 8002204:	007a1200 	.word	0x007a1200
 8002208:	080053d2 	.word	0x080053d2
 800220c:	080053c2 	.word	0x080053c2
 8002210:	02dc6c00 	.word	0x02dc6c00

08002214 <HAL_RCC_ClockConfig>:
{
 8002214:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002216:	0004      	movs	r4, r0
 8002218:	000f      	movs	r7, r1
  if(RCC_ClkInitStruct == NULL)
 800221a:	2800      	cmp	r0, #0
 800221c:	d101      	bne.n	8002222 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 800221e:	2001      	movs	r0, #1
}
 8002220:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002222:	2201      	movs	r2, #1
 8002224:	4d3a      	ldr	r5, [pc, #232]	@ (8002310 <HAL_RCC_ClockConfig+0xfc>)
 8002226:	682b      	ldr	r3, [r5, #0]
 8002228:	4013      	ands	r3, r2
 800222a:	428b      	cmp	r3, r1
 800222c:	d31c      	bcc.n	8002268 <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800222e:	6822      	ldr	r2, [r4, #0]
 8002230:	0793      	lsls	r3, r2, #30
 8002232:	d422      	bmi.n	800227a <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002234:	07d2      	lsls	r2, r2, #31
 8002236:	d42f      	bmi.n	8002298 <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002238:	2301      	movs	r3, #1
 800223a:	682a      	ldr	r2, [r5, #0]
 800223c:	401a      	ands	r2, r3
 800223e:	42ba      	cmp	r2, r7
 8002240:	d857      	bhi.n	80022f2 <HAL_RCC_ClockConfig+0xde>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002242:	6823      	ldr	r3, [r4, #0]
 8002244:	4d33      	ldr	r5, [pc, #204]	@ (8002314 <HAL_RCC_ClockConfig+0x100>)
 8002246:	075b      	lsls	r3, r3, #29
 8002248:	d45a      	bmi.n	8002300 <HAL_RCC_ClockConfig+0xec>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800224a:	f7ff ffad 	bl	80021a8 <HAL_RCC_GetSysClockFreq>
 800224e:	686b      	ldr	r3, [r5, #4]
 8002250:	4a31      	ldr	r2, [pc, #196]	@ (8002318 <HAL_RCC_ClockConfig+0x104>)
 8002252:	061b      	lsls	r3, r3, #24
 8002254:	0f1b      	lsrs	r3, r3, #28
 8002256:	5cd3      	ldrb	r3, [r2, r3]
 8002258:	4930      	ldr	r1, [pc, #192]	@ (800231c <HAL_RCC_ClockConfig+0x108>)
 800225a:	40d8      	lsrs	r0, r3
 800225c:	6008      	str	r0, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800225e:	2000      	movs	r0, #0
 8002260:	f7fe fca8 	bl	8000bb4 <HAL_InitTick>
  return HAL_OK;
 8002264:	2000      	movs	r0, #0
 8002266:	e7db      	b.n	8002220 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002268:	682b      	ldr	r3, [r5, #0]
 800226a:	4393      	bics	r3, r2
 800226c:	430b      	orrs	r3, r1
 800226e:	602b      	str	r3, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002270:	682b      	ldr	r3, [r5, #0]
 8002272:	4013      	ands	r3, r2
 8002274:	428b      	cmp	r3, r1
 8002276:	d1d2      	bne.n	800221e <HAL_RCC_ClockConfig+0xa>
 8002278:	e7d9      	b.n	800222e <HAL_RCC_ClockConfig+0x1a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800227a:	4926      	ldr	r1, [pc, #152]	@ (8002314 <HAL_RCC_ClockConfig+0x100>)
 800227c:	0753      	lsls	r3, r2, #29
 800227e:	d504      	bpl.n	800228a <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002280:	23e0      	movs	r3, #224	@ 0xe0
 8002282:	6848      	ldr	r0, [r1, #4]
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	4303      	orrs	r3, r0
 8002288:	604b      	str	r3, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800228a:	20f0      	movs	r0, #240	@ 0xf0
 800228c:	684b      	ldr	r3, [r1, #4]
 800228e:	4383      	bics	r3, r0
 8002290:	68a0      	ldr	r0, [r4, #8]
 8002292:	4303      	orrs	r3, r0
 8002294:	604b      	str	r3, [r1, #4]
 8002296:	e7cd      	b.n	8002234 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002298:	6862      	ldr	r2, [r4, #4]
 800229a:	4e1e      	ldr	r6, [pc, #120]	@ (8002314 <HAL_RCC_ClockConfig+0x100>)
 800229c:	2a01      	cmp	r2, #1
 800229e:	d103      	bne.n	80022a8 <HAL_RCC_ClockConfig+0x94>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022a0:	6833      	ldr	r3, [r6, #0]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80022a2:	039b      	lsls	r3, r3, #14
 80022a4:	d405      	bmi.n	80022b2 <HAL_RCC_ClockConfig+0x9e>
 80022a6:	e7ba      	b.n	800221e <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022a8:	2a02      	cmp	r2, #2
 80022aa:	d11a      	bne.n	80022e2 <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ac:	6833      	ldr	r3, [r6, #0]
 80022ae:	019b      	lsls	r3, r3, #6
 80022b0:	d5b5      	bpl.n	800221e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022b2:	2103      	movs	r1, #3
 80022b4:	6873      	ldr	r3, [r6, #4]
 80022b6:	438b      	bics	r3, r1
 80022b8:	4313      	orrs	r3, r2
 80022ba:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80022bc:	f7fe fcba 	bl	8000c34 <HAL_GetTick>
 80022c0:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022c2:	230c      	movs	r3, #12
 80022c4:	6872      	ldr	r2, [r6, #4]
 80022c6:	401a      	ands	r2, r3
 80022c8:	6863      	ldr	r3, [r4, #4]
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d0b3      	beq.n	8002238 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022d0:	f7fe fcb0 	bl	8000c34 <HAL_GetTick>
 80022d4:	9b01      	ldr	r3, [sp, #4]
 80022d6:	1ac0      	subs	r0, r0, r3
 80022d8:	4b11      	ldr	r3, [pc, #68]	@ (8002320 <HAL_RCC_ClockConfig+0x10c>)
 80022da:	4298      	cmp	r0, r3
 80022dc:	d9f1      	bls.n	80022c2 <HAL_RCC_ClockConfig+0xae>
        return HAL_TIMEOUT;
 80022de:	2003      	movs	r0, #3
 80022e0:	e79e      	b.n	8002220 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80022e2:	2a03      	cmp	r2, #3
 80022e4:	d101      	bne.n	80022ea <HAL_RCC_ClockConfig+0xd6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80022e6:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 80022e8:	e7db      	b.n	80022a2 <HAL_RCC_ClockConfig+0x8e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ea:	6833      	ldr	r3, [r6, #0]
 80022ec:	079b      	lsls	r3, r3, #30
 80022ee:	d4e0      	bmi.n	80022b2 <HAL_RCC_ClockConfig+0x9e>
 80022f0:	e795      	b.n	800221e <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f2:	682a      	ldr	r2, [r5, #0]
 80022f4:	439a      	bics	r2, r3
 80022f6:	602a      	str	r2, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022f8:	682a      	ldr	r2, [r5, #0]
 80022fa:	421a      	tst	r2, r3
 80022fc:	d0a1      	beq.n	8002242 <HAL_RCC_ClockConfig+0x2e>
 80022fe:	e78e      	b.n	800221e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002300:	686b      	ldr	r3, [r5, #4]
 8002302:	4a08      	ldr	r2, [pc, #32]	@ (8002324 <HAL_RCC_ClockConfig+0x110>)
 8002304:	4013      	ands	r3, r2
 8002306:	68e2      	ldr	r2, [r4, #12]
 8002308:	4313      	orrs	r3, r2
 800230a:	606b      	str	r3, [r5, #4]
 800230c:	e79d      	b.n	800224a <HAL_RCC_ClockConfig+0x36>
 800230e:	46c0      	nop			@ (mov r8, r8)
 8002310:	40022000 	.word	0x40022000
 8002314:	40021000 	.word	0x40021000
 8002318:	08005393 	.word	0x08005393
 800231c:	20000000 	.word	0x20000000
 8002320:	00001388 	.word	0x00001388
 8002324:	fffff8ff 	.word	0xfffff8ff

08002328 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002328:	4b04      	ldr	r3, [pc, #16]	@ (800233c <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 800232a:	4a05      	ldr	r2, [pc, #20]	@ (8002340 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	4905      	ldr	r1, [pc, #20]	@ (8002344 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002330:	055b      	lsls	r3, r3, #21
 8002332:	0f5b      	lsrs	r3, r3, #29
 8002334:	5ccb      	ldrb	r3, [r1, r3]
 8002336:	6810      	ldr	r0, [r2, #0]
 8002338:	40d8      	lsrs	r0, r3
}    
 800233a:	4770      	bx	lr
 800233c:	40021000 	.word	0x40021000
 8002340:	20000000 	.word	0x20000000
 8002344:	0800538b 	.word	0x0800538b

08002348 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002348:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800234a:	6803      	ldr	r3, [r0, #0]
{
 800234c:	0005      	movs	r5, r0
 800234e:	b085      	sub	sp, #20
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002350:	03db      	lsls	r3, r3, #15
 8002352:	d52b      	bpl.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x64>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002354:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 8002356:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002358:	4c41      	ldr	r4, [pc, #260]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 800235a:	0552      	lsls	r2, r2, #21
 800235c:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 800235e:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002360:	4213      	tst	r3, r2
 8002362:	d108      	bne.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002364:	69e3      	ldr	r3, [r4, #28]
 8002366:	4313      	orrs	r3, r2
 8002368:	61e3      	str	r3, [r4, #28]
 800236a:	69e3      	ldr	r3, [r4, #28]
 800236c:	4013      	ands	r3, r2
 800236e:	9303      	str	r3, [sp, #12]
 8002370:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8002372:	2301      	movs	r3, #1
 8002374:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002376:	2780      	movs	r7, #128	@ 0x80
 8002378:	4e3a      	ldr	r6, [pc, #232]	@ (8002464 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 800237a:	007f      	lsls	r7, r7, #1
 800237c:	6833      	ldr	r3, [r6, #0]
 800237e:	423b      	tst	r3, r7
 8002380:	d034      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0xa4>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002382:	6a21      	ldr	r1, [r4, #32]
 8002384:	22c0      	movs	r2, #192	@ 0xc0
 8002386:	0008      	movs	r0, r1
 8002388:	0092      	lsls	r2, r2, #2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800238a:	686b      	ldr	r3, [r5, #4]
 800238c:	4e36      	ldr	r6, [pc, #216]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x120>)
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800238e:	4010      	ands	r0, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002390:	4211      	tst	r1, r2
 8002392:	d13d      	bne.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0xc8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002394:	6a23      	ldr	r3, [r4, #32]
 8002396:	686a      	ldr	r2, [r5, #4]
 8002398:	4033      	ands	r3, r6
 800239a:	4313      	orrs	r3, r2
 800239c:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800239e:	9b00      	ldr	r3, [sp, #0]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d103      	bne.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023a4:	69e3      	ldr	r3, [r4, #28]
 80023a6:	4a31      	ldr	r2, [pc, #196]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80023a8:	4013      	ands	r3, r2
 80023aa:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023ac:	682b      	ldr	r3, [r5, #0]
 80023ae:	07da      	lsls	r2, r3, #31
 80023b0:	d506      	bpl.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023b2:	2003      	movs	r0, #3
 80023b4:	492a      	ldr	r1, [pc, #168]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80023b6:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80023b8:	4382      	bics	r2, r0
 80023ba:	68a8      	ldr	r0, [r5, #8]
 80023bc:	4302      	orrs	r2, r0
 80023be:	630a      	str	r2, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023c0:	069a      	lsls	r2, r3, #26
 80023c2:	d506      	bpl.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023c4:	2010      	movs	r0, #16
 80023c6:	4926      	ldr	r1, [pc, #152]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80023c8:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80023ca:	4382      	bics	r2, r0
 80023cc:	68e8      	ldr	r0, [r5, #12]
 80023ce:	4302      	orrs	r2, r0
 80023d0:	630a      	str	r2, [r1, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80023d2:	039a      	lsls	r2, r3, #14
 80023d4:	d506      	bpl.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023d6:	2080      	movs	r0, #128	@ 0x80
 80023d8:	4921      	ldr	r1, [pc, #132]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80023da:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80023dc:	4382      	bics	r2, r0
 80023de:	6968      	ldr	r0, [r5, #20]
 80023e0:	4302      	orrs	r2, r0
 80023e2:	630a      	str	r2, [r1, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80023e4:	055b      	lsls	r3, r3, #21
 80023e6:	d433      	bmi.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80023e8:	2000      	movs	r0, #0
 80023ea:	e00f      	b.n	800240c <HAL_RCCEx_PeriphCLKConfig+0xc4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023ec:	6833      	ldr	r3, [r6, #0]
 80023ee:	433b      	orrs	r3, r7
 80023f0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80023f2:	f7fe fc1f 	bl	8000c34 <HAL_GetTick>
 80023f6:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f8:	6833      	ldr	r3, [r6, #0]
 80023fa:	423b      	tst	r3, r7
 80023fc:	d1c1      	bne.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023fe:	f7fe fc19 	bl	8000c34 <HAL_GetTick>
 8002402:	9b01      	ldr	r3, [sp, #4]
 8002404:	1ac0      	subs	r0, r0, r3
 8002406:	2864      	cmp	r0, #100	@ 0x64
 8002408:	d9f6      	bls.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0xb0>
          return HAL_TIMEOUT;
 800240a:	2003      	movs	r0, #3
}
 800240c:	b005      	add	sp, #20
 800240e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002410:	4013      	ands	r3, r2
 8002412:	4283      	cmp	r3, r0
 8002414:	d0be      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      __HAL_RCC_BACKUPRESET_FORCE();
 8002416:	2280      	movs	r2, #128	@ 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002418:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800241a:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800241c:	0019      	movs	r1, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 800241e:	0252      	lsls	r2, r2, #9
 8002420:	4302      	orrs	r2, r0
 8002422:	6222      	str	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002424:	6a22      	ldr	r2, [r4, #32]
 8002426:	4812      	ldr	r0, [pc, #72]	@ (8002470 <HAL_RCCEx_PeriphCLKConfig+0x128>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002428:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 800242a:	4002      	ands	r2, r0
 800242c:	6222      	str	r2, [r4, #32]
      RCC->BDCR = temp_reg;
 800242e:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002430:	07db      	lsls	r3, r3, #31
 8002432:	d5af      	bpl.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x4c>
        tickstart = HAL_GetTick();
 8002434:	f7fe fbfe 	bl	8000c34 <HAL_GetTick>
 8002438:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800243a:	2202      	movs	r2, #2
 800243c:	6a23      	ldr	r3, [r4, #32]
 800243e:	4213      	tst	r3, r2
 8002440:	d1a8      	bne.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x4c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002442:	f7fe fbf7 	bl	8000c34 <HAL_GetTick>
 8002446:	4b0b      	ldr	r3, [pc, #44]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8002448:	1bc0      	subs	r0, r0, r7
 800244a:	4298      	cmp	r0, r3
 800244c:	d9f5      	bls.n	800243a <HAL_RCCEx_PeriphCLKConfig+0xf2>
 800244e:	e7dc      	b.n	800240a <HAL_RCCEx_PeriphCLKConfig+0xc2>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002450:	2140      	movs	r1, #64	@ 0x40
 8002452:	4a03      	ldr	r2, [pc, #12]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8002454:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8002456:	438b      	bics	r3, r1
 8002458:	6929      	ldr	r1, [r5, #16]
 800245a:	430b      	orrs	r3, r1
 800245c:	6313      	str	r3, [r2, #48]	@ 0x30
 800245e:	e7c3      	b.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002460:	40021000 	.word	0x40021000
 8002464:	40007000 	.word	0x40007000
 8002468:	fffffcff 	.word	0xfffffcff
 800246c:	efffffff 	.word	0xefffffff
 8002470:	fffeffff 	.word	0xfffeffff
 8002474:	00001388 	.word	0x00001388

08002478 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002478:	0001      	movs	r1, r0
{
 800247a:	0003      	movs	r3, r0
  {
    return HAL_ERROR;
 800247c:	2001      	movs	r0, #1
{
 800247e:	b510      	push	{r4, lr}
  if (htim->State != HAL_TIM_STATE_READY)
 8002480:	313d      	adds	r1, #61	@ 0x3d
 8002482:	780c      	ldrb	r4, [r1, #0]
 8002484:	b2e2      	uxtb	r2, r4
 8002486:	4284      	cmp	r4, r0
 8002488:	d119      	bne.n	80024be <HAL_TIM_Base_Start_IT+0x46>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800248a:	1800      	adds	r0, r0, r0
 800248c:	7008      	strb	r0, [r1, #0]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68d9      	ldr	r1, [r3, #12]
 8002492:	4311      	orrs	r1, r2
 8002494:	60d9      	str	r1, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002496:	490b      	ldr	r1, [pc, #44]	@ (80024c4 <HAL_TIM_Base_Start_IT+0x4c>)
 8002498:	428b      	cmp	r3, r1
 800249a:	d006      	beq.n	80024aa <HAL_TIM_Base_Start_IT+0x32>
 800249c:	2180      	movs	r1, #128	@ 0x80
 800249e:	05c9      	lsls	r1, r1, #23
 80024a0:	428b      	cmp	r3, r1
 80024a2:	d002      	beq.n	80024aa <HAL_TIM_Base_Start_IT+0x32>
 80024a4:	4908      	ldr	r1, [pc, #32]	@ (80024c8 <HAL_TIM_Base_Start_IT+0x50>)
 80024a6:	428b      	cmp	r3, r1
 80024a8:	d10a      	bne.n	80024c0 <HAL_TIM_Base_Start_IT+0x48>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024aa:	2107      	movs	r1, #7
 80024ac:	689a      	ldr	r2, [r3, #8]
 80024ae:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024b0:	2a06      	cmp	r2, #6
 80024b2:	d003      	beq.n	80024bc <HAL_TIM_Base_Start_IT+0x44>
    {
      __HAL_TIM_ENABLE(htim);
 80024b4:	2201      	movs	r2, #1
 80024b6:	6819      	ldr	r1, [r3, #0]
 80024b8:	430a      	orrs	r2, r1
 80024ba:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 80024bc:	2000      	movs	r0, #0
}
 80024be:	bd10      	pop	{r4, pc}
    __HAL_TIM_ENABLE(htim);
 80024c0:	6819      	ldr	r1, [r3, #0]
 80024c2:	e7f9      	b.n	80024b8 <HAL_TIM_Base_Start_IT+0x40>
 80024c4:	40012c00 	.word	0x40012c00
 80024c8:	40000400 	.word	0x40000400

080024cc <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024cc:	4a20      	ldr	r2, [pc, #128]	@ (8002550 <TIM_Base_SetConfig+0x84>)
{
 80024ce:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 80024d0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024d2:	4290      	cmp	r0, r2
 80024d4:	d006      	beq.n	80024e4 <TIM_Base_SetConfig+0x18>
 80024d6:	2480      	movs	r4, #128	@ 0x80
 80024d8:	05e4      	lsls	r4, r4, #23
 80024da:	42a0      	cmp	r0, r4
 80024dc:	d002      	beq.n	80024e4 <TIM_Base_SetConfig+0x18>
 80024de:	4c1d      	ldr	r4, [pc, #116]	@ (8002554 <TIM_Base_SetConfig+0x88>)
 80024e0:	42a0      	cmp	r0, r4
 80024e2:	d10c      	bne.n	80024fe <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024e4:	2470      	movs	r4, #112	@ 0x70
 80024e6:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 80024e8:	684c      	ldr	r4, [r1, #4]
 80024ea:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024ec:	4290      	cmp	r0, r2
 80024ee:	d00f      	beq.n	8002510 <TIM_Base_SetConfig+0x44>
 80024f0:	2480      	movs	r4, #128	@ 0x80
 80024f2:	05e4      	lsls	r4, r4, #23
 80024f4:	42a0      	cmp	r0, r4
 80024f6:	d00b      	beq.n	8002510 <TIM_Base_SetConfig+0x44>
 80024f8:	4c16      	ldr	r4, [pc, #88]	@ (8002554 <TIM_Base_SetConfig+0x88>)
 80024fa:	42a0      	cmp	r0, r4
 80024fc:	d008      	beq.n	8002510 <TIM_Base_SetConfig+0x44>
 80024fe:	4c16      	ldr	r4, [pc, #88]	@ (8002558 <TIM_Base_SetConfig+0x8c>)
 8002500:	42a0      	cmp	r0, r4
 8002502:	d005      	beq.n	8002510 <TIM_Base_SetConfig+0x44>
 8002504:	4c15      	ldr	r4, [pc, #84]	@ (800255c <TIM_Base_SetConfig+0x90>)
 8002506:	42a0      	cmp	r0, r4
 8002508:	d002      	beq.n	8002510 <TIM_Base_SetConfig+0x44>
 800250a:	4c15      	ldr	r4, [pc, #84]	@ (8002560 <TIM_Base_SetConfig+0x94>)
 800250c:	42a0      	cmp	r0, r4
 800250e:	d103      	bne.n	8002518 <TIM_Base_SetConfig+0x4c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002510:	4c14      	ldr	r4, [pc, #80]	@ (8002564 <TIM_Base_SetConfig+0x98>)
 8002512:	401c      	ands	r4, r3
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002514:	68cb      	ldr	r3, [r1, #12]
 8002516:	4323      	orrs	r3, r4
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002518:	2480      	movs	r4, #128	@ 0x80
 800251a:	43a3      	bics	r3, r4
 800251c:	694c      	ldr	r4, [r1, #20]
 800251e:	4323      	orrs	r3, r4

  TIMx->CR1 = tmpcr1;
 8002520:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002522:	688b      	ldr	r3, [r1, #8]
 8002524:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002526:	680b      	ldr	r3, [r1, #0]
 8002528:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800252a:	4290      	cmp	r0, r2
 800252c:	d005      	beq.n	800253a <TIM_Base_SetConfig+0x6e>
 800252e:	4b0b      	ldr	r3, [pc, #44]	@ (800255c <TIM_Base_SetConfig+0x90>)
 8002530:	4298      	cmp	r0, r3
 8002532:	d002      	beq.n	800253a <TIM_Base_SetConfig+0x6e>
 8002534:	4b0a      	ldr	r3, [pc, #40]	@ (8002560 <TIM_Base_SetConfig+0x94>)
 8002536:	4298      	cmp	r0, r3
 8002538:	d101      	bne.n	800253e <TIM_Base_SetConfig+0x72>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800253a:	690b      	ldr	r3, [r1, #16]
 800253c:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800253e:	2201      	movs	r2, #1
 8002540:	6142      	str	r2, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002542:	6903      	ldr	r3, [r0, #16]
 8002544:	4213      	tst	r3, r2
 8002546:	d002      	beq.n	800254e <TIM_Base_SetConfig+0x82>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002548:	6903      	ldr	r3, [r0, #16]
 800254a:	4393      	bics	r3, r2
 800254c:	6103      	str	r3, [r0, #16]
  }
}
 800254e:	bd10      	pop	{r4, pc}
 8002550:	40012c00 	.word	0x40012c00
 8002554:	40000400 	.word	0x40000400
 8002558:	40002000 	.word	0x40002000
 800255c:	40014400 	.word	0x40014400
 8002560:	40014800 	.word	0x40014800
 8002564:	fffffcff 	.word	0xfffffcff

08002568 <HAL_TIM_Base_Init>:
{
 8002568:	b570      	push	{r4, r5, r6, lr}
 800256a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800256c:	2001      	movs	r0, #1
  if (htim == NULL)
 800256e:	2c00      	cmp	r4, #0
 8002570:	d021      	beq.n	80025b6 <HAL_TIM_Base_Init+0x4e>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002572:	0025      	movs	r5, r4
 8002574:	353d      	adds	r5, #61	@ 0x3d
 8002576:	782b      	ldrb	r3, [r5, #0]
 8002578:	b2da      	uxtb	r2, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d105      	bne.n	800258a <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 800257e:	0023      	movs	r3, r4
 8002580:	333c      	adds	r3, #60	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002582:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8002584:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 8002586:	f7fe f94b 	bl	8000820 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800258a:	2302      	movs	r3, #2
 800258c:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800258e:	6820      	ldr	r0, [r4, #0]
 8002590:	1d21      	adds	r1, r4, #4
 8002592:	f7ff ff9b 	bl	80024cc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002596:	0022      	movs	r2, r4
 8002598:	2301      	movs	r3, #1
  return HAL_OK;
 800259a:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800259c:	3246      	adds	r2, #70	@ 0x46
 800259e:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025a0:	3445      	adds	r4, #69	@ 0x45
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025a2:	3a08      	subs	r2, #8
 80025a4:	7013      	strb	r3, [r2, #0]
 80025a6:	7053      	strb	r3, [r2, #1]
 80025a8:	7093      	strb	r3, [r2, #2]
 80025aa:	70d3      	strb	r3, [r2, #3]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025ac:	7113      	strb	r3, [r2, #4]
 80025ae:	7153      	strb	r3, [r2, #5]
 80025b0:	7193      	strb	r3, [r2, #6]
 80025b2:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 80025b4:	702b      	strb	r3, [r5, #0]
}
 80025b6:	bd70      	pop	{r4, r5, r6, pc}

080025b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80025b8:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80025ba:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025bc:	4d03      	ldr	r5, [pc, #12]	@ (80025cc <TIM_ETR_SetConfig+0x14>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025be:	430a      	orrs	r2, r1
 80025c0:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025c2:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025c4:	4313      	orrs	r3, r2
 80025c6:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025c8:	6083      	str	r3, [r0, #8]
}
 80025ca:	bd30      	pop	{r4, r5, pc}
 80025cc:	ffff00ff 	.word	0xffff00ff

080025d0 <HAL_TIM_ConfigClockSource>:
{
 80025d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80025d2:	0005      	movs	r5, r0
 80025d4:	2202      	movs	r2, #2
 80025d6:	353c      	adds	r5, #60	@ 0x3c
 80025d8:	782c      	ldrb	r4, [r5, #0]
{
 80025da:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 80025dc:	0010      	movs	r0, r2
 80025de:	2c01      	cmp	r4, #1
 80025e0:	d01b      	beq.n	800261a <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80025e2:	001e      	movs	r6, r3
  __HAL_LOCK(htim);
 80025e4:	3801      	subs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80025e6:	363d      	adds	r6, #61	@ 0x3d
  __HAL_LOCK(htim);
 80025e8:	7028      	strb	r0, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80025ea:	7032      	strb	r2, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 80025ec:	681c      	ldr	r4, [r3, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025ee:	4a41      	ldr	r2, [pc, #260]	@ (80026f4 <HAL_TIM_ConfigClockSource+0x124>)
  tmpsmcr = htim->Instance->SMCR;
 80025f0:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025f2:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 80025f4:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 80025f6:	680b      	ldr	r3, [r1, #0]
 80025f8:	2b60      	cmp	r3, #96	@ 0x60
 80025fa:	d04e      	beq.n	800269a <HAL_TIM_ConfigClockSource+0xca>
 80025fc:	d82d      	bhi.n	800265a <HAL_TIM_ConfigClockSource+0x8a>
 80025fe:	2b40      	cmp	r3, #64	@ 0x40
 8002600:	d062      	beq.n	80026c8 <HAL_TIM_ConfigClockSource+0xf8>
 8002602:	d813      	bhi.n	800262c <HAL_TIM_ConfigClockSource+0x5c>
 8002604:	2b20      	cmp	r3, #32
 8002606:	d00b      	beq.n	8002620 <HAL_TIM_ConfigClockSource+0x50>
 8002608:	d808      	bhi.n	800261c <HAL_TIM_ConfigClockSource+0x4c>
 800260a:	2210      	movs	r2, #16
 800260c:	0019      	movs	r1, r3
 800260e:	4391      	bics	r1, r2
 8002610:	d006      	beq.n	8002620 <HAL_TIM_ConfigClockSource+0x50>
  htim->State = HAL_TIM_STATE_READY;
 8002612:	2301      	movs	r3, #1
 8002614:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 8002616:	2300      	movs	r3, #0
 8002618:	702b      	strb	r3, [r5, #0]
}
 800261a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 800261c:	2b30      	cmp	r3, #48	@ 0x30
 800261e:	d1f8      	bne.n	8002612 <HAL_TIM_ConfigClockSource+0x42>
  tmpsmcr &= ~TIM_SMCR_TS;
 8002620:	2170      	movs	r1, #112	@ 0x70
  tmpsmcr = TIMx->SMCR;
 8002622:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002624:	438a      	bics	r2, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002626:	4313      	orrs	r3, r2
 8002628:	2207      	movs	r2, #7
 800262a:	e028      	b.n	800267e <HAL_TIM_ConfigClockSource+0xae>
  switch (sClockSourceConfig->ClockSource)
 800262c:	2b50      	cmp	r3, #80	@ 0x50
 800262e:	d1f0      	bne.n	8002612 <HAL_TIM_ConfigClockSource+0x42>
                               sClockSourceConfig->ClockPolarity,
 8002630:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8002632:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8002634:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002636:	6a27      	ldr	r7, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002638:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800263a:	4387      	bics	r7, r0
 800263c:	6227      	str	r7, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800263e:	27f0      	movs	r7, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8002640:	69a0      	ldr	r0, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002642:	43b8      	bics	r0, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002644:	4303      	orrs	r3, r0
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002646:	200a      	movs	r0, #10
  TIMx->CCMR1 = tmpccmr1;
 8002648:	61a3      	str	r3, [r4, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 800264a:	2370      	movs	r3, #112	@ 0x70
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800264c:	4381      	bics	r1, r0
  tmpccer |= TIM_ICPolarity;
 800264e:	430a      	orrs	r2, r1
  TIMx->CCER = tmpccer;
 8002650:	6222      	str	r2, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8002652:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002654:	439a      	bics	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002656:	3b19      	subs	r3, #25
 8002658:	e011      	b.n	800267e <HAL_TIM_ConfigClockSource+0xae>
  switch (sClockSourceConfig->ClockSource)
 800265a:	2280      	movs	r2, #128	@ 0x80
 800265c:	0152      	lsls	r2, r2, #5
 800265e:	4293      	cmp	r3, r2
 8002660:	d00f      	beq.n	8002682 <HAL_TIM_ConfigClockSource+0xb2>
 8002662:	2280      	movs	r2, #128	@ 0x80
 8002664:	0192      	lsls	r2, r2, #6
 8002666:	4293      	cmp	r3, r2
 8002668:	d00d      	beq.n	8002686 <HAL_TIM_ConfigClockSource+0xb6>
 800266a:	2b70      	cmp	r3, #112	@ 0x70
 800266c:	d1d1      	bne.n	8002612 <HAL_TIM_ConfigClockSource+0x42>
      TIM_ETR_SetConfig(htim->Instance,
 800266e:	68cb      	ldr	r3, [r1, #12]
 8002670:	684a      	ldr	r2, [r1, #4]
 8002672:	0020      	movs	r0, r4
 8002674:	6889      	ldr	r1, [r1, #8]
 8002676:	f7ff ff9f 	bl	80025b8 <TIM_ETR_SetConfig>
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800267a:	2377      	movs	r3, #119	@ 0x77
      tmpsmcr = htim->Instance->SMCR;
 800267c:	68a2      	ldr	r2, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800267e:	4313      	orrs	r3, r2
      htim->Instance->SMCR = tmpsmcr;
 8002680:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002682:	2000      	movs	r0, #0
 8002684:	e7c5      	b.n	8002612 <HAL_TIM_ConfigClockSource+0x42>
      TIM_ETR_SetConfig(htim->Instance,
 8002686:	68cb      	ldr	r3, [r1, #12]
 8002688:	684a      	ldr	r2, [r1, #4]
 800268a:	0020      	movs	r0, r4
 800268c:	6889      	ldr	r1, [r1, #8]
 800268e:	f7ff ff93 	bl	80025b8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002692:	2380      	movs	r3, #128	@ 0x80
 8002694:	68a2      	ldr	r2, [r4, #8]
 8002696:	01db      	lsls	r3, r3, #7
 8002698:	e7f1      	b.n	800267e <HAL_TIM_ConfigClockSource+0xae>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800269a:	2710      	movs	r7, #16
                               sClockSourceConfig->ClockPolarity,
 800269c:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800269e:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 80026a0:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026a2:	6a20      	ldr	r0, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80026a4:	0312      	lsls	r2, r2, #12
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026a6:	43b8      	bics	r0, r7
 80026a8:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026aa:	69a0      	ldr	r0, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80026ac:	4f12      	ldr	r7, [pc, #72]	@ (80026f8 <HAL_TIM_ConfigClockSource+0x128>)
  tmpccer |= (TIM_ICPolarity << 4U);
 80026ae:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80026b0:	4038      	ands	r0, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80026b2:	4302      	orrs	r2, r0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80026b4:	20a0      	movs	r0, #160	@ 0xa0
 80026b6:	4381      	bics	r1, r0
  tmpccer |= (TIM_ICPolarity << 4U);
 80026b8:	430b      	orrs	r3, r1
  TIMx->CCMR1 = tmpccmr1 ;
 80026ba:	61a2      	str	r2, [r4, #24]
  TIMx->CCER = tmpccer;
 80026bc:	6223      	str	r3, [r4, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 80026be:	2370      	movs	r3, #112	@ 0x70
  tmpsmcr = TIMx->SMCR;
 80026c0:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80026c2:	439a      	bics	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80026c4:	3b09      	subs	r3, #9
 80026c6:	e7da      	b.n	800267e <HAL_TIM_ConfigClockSource+0xae>
                               sClockSourceConfig->ClockPolarity,
 80026c8:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80026ca:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 80026cc:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026ce:	6a27      	ldr	r7, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026d0:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026d2:	4387      	bics	r7, r0
 80026d4:	6227      	str	r7, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026d6:	27f0      	movs	r7, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 80026d8:	69a0      	ldr	r0, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026da:	43b8      	bics	r0, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026dc:	4303      	orrs	r3, r0
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026de:	200a      	movs	r0, #10
  TIMx->CCMR1 = tmpccmr1;
 80026e0:	61a3      	str	r3, [r4, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 80026e2:	2370      	movs	r3, #112	@ 0x70
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026e4:	4381      	bics	r1, r0
  tmpccer |= TIM_ICPolarity;
 80026e6:	430a      	orrs	r2, r1
  TIMx->CCER = tmpccer;
 80026e8:	6222      	str	r2, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 80026ea:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80026ec:	439a      	bics	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80026ee:	3b29      	subs	r3, #41	@ 0x29
 80026f0:	e7c5      	b.n	800267e <HAL_TIM_ConfigClockSource+0xae>
 80026f2:	46c0      	nop			@ (mov r8, r8)
 80026f4:	ffff0088 	.word	0xffff0088
 80026f8:	ffff0fff 	.word	0xffff0fff

080026fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026fc:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026fe:	0004      	movs	r4, r0
 8002700:	2202      	movs	r2, #2
 8002702:	343c      	adds	r4, #60	@ 0x3c
 8002704:	7825      	ldrb	r5, [r4, #0]
{
 8002706:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8002708:	0010      	movs	r0, r2
 800270a:	2d01      	cmp	r5, #1
 800270c:	d01d      	beq.n	800274a <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800270e:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002710:	2670      	movs	r6, #112	@ 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8002712:	353d      	adds	r5, #61	@ 0x3d
 8002714:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800271a:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 800271c:	43b0      	bics	r0, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800271e:	680e      	ldr	r6, [r1, #0]
 8002720:	4330      	orrs	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002722:	6058      	str	r0, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002724:	4809      	ldr	r0, [pc, #36]	@ (800274c <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 8002726:	4283      	cmp	r3, r0
 8002728:	d006      	beq.n	8002738 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800272a:	2080      	movs	r0, #128	@ 0x80
 800272c:	05c0      	lsls	r0, r0, #23
 800272e:	4283      	cmp	r3, r0
 8002730:	d002      	beq.n	8002738 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8002732:	4807      	ldr	r0, [pc, #28]	@ (8002750 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 8002734:	4283      	cmp	r3, r0
 8002736:	d104      	bne.n	8002742 <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002738:	2080      	movs	r0, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800273a:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800273c:	4382      	bics	r2, r0
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800273e:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002740:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002742:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8002744:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002746:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8002748:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 800274a:	bd70      	pop	{r4, r5, r6, pc}
 800274c:	40012c00 	.word	0x40012c00
 8002750:	40000400 	.word	0x40000400

08002754 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002754:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002756:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800275a:	2201      	movs	r2, #1
 800275c:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002760:	6801      	ldr	r1, [r0, #0]
 8002762:	4d12      	ldr	r5, [pc, #72]	@ (80027ac <UART_EndRxTransfer+0x58>)
 8002764:	680b      	ldr	r3, [r1, #0]
 8002766:	402b      	ands	r3, r5
 8002768:	600b      	str	r3, [r1, #0]
 800276a:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800276e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002772:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002776:	6801      	ldr	r1, [r0, #0]
 8002778:	688b      	ldr	r3, [r1, #8]
 800277a:	4393      	bics	r3, r2
 800277c:	608b      	str	r3, [r1, #8]
 800277e:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002782:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8002784:	4293      	cmp	r3, r2
 8002786:	d10a      	bne.n	800279e <UART_EndRxTransfer+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002788:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800278c:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002790:	2410      	movs	r4, #16
 8002792:	6802      	ldr	r2, [r0, #0]
 8002794:	6813      	ldr	r3, [r2, #0]
 8002796:	43a3      	bics	r3, r4
 8002798:	6013      	str	r3, [r2, #0]
 800279a:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800279e:	2220      	movs	r2, #32
 80027a0:	1d03      	adds	r3, r0, #4
 80027a2:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027a4:	2300      	movs	r3, #0
 80027a6:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80027a8:	6683      	str	r3, [r0, #104]	@ 0x68
}
 80027aa:	bd30      	pop	{r4, r5, pc}
 80027ac:	fffffedf 	.word	0xfffffedf

080027b0 <HAL_UART_Transmit_DMA>:
{
 80027b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027b2:	0013      	movs	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80027b4:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
{
 80027b6:	0004      	movs	r4, r0
    return HAL_BUSY;
 80027b8:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 80027ba:	2a20      	cmp	r2, #32
 80027bc:	d104      	bne.n	80027c8 <HAL_UART_Transmit_DMA+0x18>
    if ((pData == NULL) || (Size == 0U))
 80027be:	2900      	cmp	r1, #0
 80027c0:	d001      	beq.n	80027c6 <HAL_UART_Transmit_DMA+0x16>
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_UART_Transmit_DMA+0x1a>
      return HAL_ERROR;
 80027c6:	2001      	movs	r0, #1
}
 80027c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027ca:	2280      	movs	r2, #128	@ 0x80
 80027cc:	68a0      	ldr	r0, [r4, #8]
 80027ce:	0152      	lsls	r2, r2, #5
 80027d0:	4290      	cmp	r0, r2
 80027d2:	d104      	bne.n	80027de <HAL_UART_Transmit_DMA+0x2e>
 80027d4:	6922      	ldr	r2, [r4, #16]
 80027d6:	2a00      	cmp	r2, #0
 80027d8:	d101      	bne.n	80027de <HAL_UART_Transmit_DMA+0x2e>
      if ((((uint32_t)pData) & 1U) != 0U)
 80027da:	07ca      	lsls	r2, r1, #31
 80027dc:	d4f3      	bmi.n	80027c6 <HAL_UART_Transmit_DMA+0x16>
    huart->TxXferSize  = Size;
 80027de:	0022      	movs	r2, r4
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027e0:	0025      	movs	r5, r4
    huart->TxXferSize  = Size;
 80027e2:	3250      	adds	r2, #80	@ 0x50
    huart->pTxBuffPtr  = pData;
 80027e4:	64e1      	str	r1, [r4, #76]	@ 0x4c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027e6:	2600      	movs	r6, #0
    huart->TxXferSize  = Size;
 80027e8:	8013      	strh	r3, [r2, #0]
    huart->TxXferCount = Size;
 80027ea:	8053      	strh	r3, [r2, #2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027ec:	2221      	movs	r2, #33	@ 0x21
    if (huart->hdmatx != NULL)
 80027ee:	6f20      	ldr	r0, [r4, #112]	@ 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027f0:	3508      	adds	r5, #8
 80027f2:	67ee      	str	r6, [r5, #124]	@ 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027f4:	67e2      	str	r2, [r4, #124]	@ 0x7c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80027f6:	6822      	ldr	r2, [r4, #0]
    if (huart->hdmatx != NULL)
 80027f8:	42b0      	cmp	r0, r6
 80027fa:	d010      	beq.n	800281e <HAL_UART_Transmit_DMA+0x6e>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80027fc:	4f10      	ldr	r7, [pc, #64]	@ (8002840 <HAL_UART_Transmit_DMA+0x90>)
      huart->hdmatx->XferAbortCallback = NULL;
 80027fe:	6346      	str	r6, [r0, #52]	@ 0x34
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002800:	6287      	str	r7, [r0, #40]	@ 0x28
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002802:	4f10      	ldr	r7, [pc, #64]	@ (8002844 <HAL_UART_Transmit_DMA+0x94>)
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8002804:	3228      	adds	r2, #40	@ 0x28
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002806:	62c7      	str	r7, [r0, #44]	@ 0x2c
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002808:	4f0f      	ldr	r7, [pc, #60]	@ (8002848 <HAL_UART_Transmit_DMA+0x98>)
 800280a:	6307      	str	r7, [r0, #48]	@ 0x30
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800280c:	f7fe fa9a 	bl	8000d44 <HAL_DMA_Start_IT>
 8002810:	42b0      	cmp	r0, r6
 8002812:	d004      	beq.n	800281e <HAL_UART_Transmit_DMA+0x6e>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002814:	2310      	movs	r3, #16
 8002816:	67eb      	str	r3, [r5, #124]	@ 0x7c
        huart->gState = HAL_UART_STATE_READY;
 8002818:	18db      	adds	r3, r3, r3
 800281a:	67e3      	str	r3, [r4, #124]	@ 0x7c
        return HAL_ERROR;
 800281c:	e7d3      	b.n	80027c6 <HAL_UART_Transmit_DMA+0x16>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800281e:	2240      	movs	r2, #64	@ 0x40
 8002820:	6823      	ldr	r3, [r4, #0]
 8002822:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002824:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002828:	2301      	movs	r3, #1
 800282a:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800282e:	6822      	ldr	r2, [r4, #0]
 8002830:	337f      	adds	r3, #127	@ 0x7f
 8002832:	6890      	ldr	r0, [r2, #8]
 8002834:	4303      	orrs	r3, r0
 8002836:	6093      	str	r3, [r2, #8]
 8002838:	f381 8810 	msr	PRIMASK, r1
    return HAL_OK;
 800283c:	2000      	movs	r0, #0
 800283e:	e7c3      	b.n	80027c8 <HAL_UART_Transmit_DMA+0x18>
 8002840:	0800284d 	.word	0x0800284d
 8002844:	08002899 	.word	0x08002899
 8002848:	080028a7 	.word	0x080028a7

0800284c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800284c:	0003      	movs	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800284e:	699b      	ldr	r3, [r3, #24]
{
 8002850:	b570      	push	{r4, r5, r6, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002852:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8002854:	2b20      	cmp	r3, #32
 8002856:	d01b      	beq.n	8002890 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0U;
 8002858:	0003      	movs	r3, r0
 800285a:	2200      	movs	r2, #0
 800285c:	3352      	adds	r3, #82	@ 0x52
 800285e:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002860:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002864:	3201      	adds	r2, #1
 8002866:	f382 8810 	msr	PRIMASK, r2

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800286a:	2580      	movs	r5, #128	@ 0x80
 800286c:	6801      	ldr	r1, [r0, #0]
 800286e:	688b      	ldr	r3, [r1, #8]
 8002870:	43ab      	bics	r3, r5
 8002872:	608b      	str	r3, [r1, #8]
 8002874:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002878:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800287c:	f382 8810 	msr	PRIMASK, r2

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002880:	2340      	movs	r3, #64	@ 0x40
 8002882:	6802      	ldr	r2, [r0, #0]
 8002884:	6810      	ldr	r0, [r2, #0]
 8002886:	4303      	orrs	r3, r0
 8002888:	6013      	str	r3, [r2, #0]
 800288a:	f381 8810 	msr	PRIMASK, r1
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800288e:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UART_TxCpltCallback(huart);
 8002890:	f7fd ff04 	bl	800069c <HAL_UART_TxCpltCallback>
}
 8002894:	e7fb      	b.n	800288e <UART_DMATransmitCplt+0x42>

08002896 <HAL_UART_TxHalfCpltCallback>:
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
 8002896:	4770      	bx	lr

08002898 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002898:	b510      	push	{r4, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800289a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800289c:	f7ff fffb 	bl	8002896 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80028a0:	bd10      	pop	{r4, pc}

080028a2 <HAL_UART_RxHalfCpltCallback>:
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
 80028a2:	4770      	bx	lr

080028a4 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 80028a4:	4770      	bx	lr

080028a6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80028a6:	b570      	push	{r4, r5, r6, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80028a8:	6a44      	ldr	r4, [r0, #36]	@ 0x24

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80028aa:	1d23      	adds	r3, r4, #4
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80028ac:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80028ae:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80028b0:	6823      	ldr	r3, [r4, #0]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	061b      	lsls	r3, r3, #24
 80028b6:	d513      	bpl.n	80028e0 <UART_DMAError+0x3a>
 80028b8:	2a21      	cmp	r2, #33	@ 0x21
 80028ba:	d111      	bne.n	80028e0 <UART_DMAError+0x3a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80028bc:	0023      	movs	r3, r4
 80028be:	2200      	movs	r2, #0
 80028c0:	3352      	adds	r3, #82	@ 0x52
 80028c2:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028c4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028c8:	2301      	movs	r3, #1
 80028ca:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80028ce:	25c0      	movs	r5, #192	@ 0xc0
 80028d0:	6822      	ldr	r2, [r4, #0]
 80028d2:	6813      	ldr	r3, [r2, #0]
 80028d4:	43ab      	bics	r3, r5
 80028d6:	6013      	str	r3, [r2, #0]
 80028d8:	f380 8810 	msr	PRIMASK, r0
  huart->gState = HAL_UART_STATE_READY;
 80028dc:	2320      	movs	r3, #32
 80028de:	67e3      	str	r3, [r4, #124]	@ 0x7c
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80028e0:	6823      	ldr	r3, [r4, #0]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	065b      	lsls	r3, r3, #25
 80028e6:	d508      	bpl.n	80028fa <UART_DMAError+0x54>
 80028e8:	2922      	cmp	r1, #34	@ 0x22
 80028ea:	d106      	bne.n	80028fa <UART_DMAError+0x54>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80028ec:	0023      	movs	r3, r4
 80028ee:	2200      	movs	r2, #0
 80028f0:	335a      	adds	r3, #90	@ 0x5a
    UART_EndRxTransfer(huart);
 80028f2:	0020      	movs	r0, r4
    huart->RxXferCount = 0U;
 80028f4:	801a      	strh	r2, [r3, #0]
    UART_EndRxTransfer(huart);
 80028f6:	f7ff ff2d 	bl	8002754 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80028fa:	0022      	movs	r2, r4
 80028fc:	2310      	movs	r3, #16
 80028fe:	3208      	adds	r2, #8
 8002900:	6fd1      	ldr	r1, [r2, #124]	@ 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002902:	0020      	movs	r0, r4
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002904:	430b      	orrs	r3, r1
 8002906:	67d3      	str	r3, [r2, #124]	@ 0x7c
  HAL_UART_ErrorCallback(huart);
 8002908:	f7ff ffcc 	bl	80028a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800290c:	bd70      	pop	{r4, r5, r6, pc}

0800290e <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800290e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->RxXferCount = 0U;
 8002910:	2300      	movs	r3, #0
 8002912:	0002      	movs	r2, r0
{
 8002914:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8002916:	325a      	adds	r2, #90	@ 0x5a
 8002918:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 800291a:	3a08      	subs	r2, #8
 800291c:	8013      	strh	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800291e:	f7ff ffc1 	bl	80028a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002922:	bd10      	pop	{r4, pc}

08002924 <HAL_UARTEx_RxEventCallback>:
}
 8002924:	4770      	bx	lr
	...

08002928 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002928:	6802      	ldr	r2, [r0, #0]
{
 800292a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800292c:	69d3      	ldr	r3, [r2, #28]
{
 800292e:	0004      	movs	r4, r0
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002930:	48a7      	ldr	r0, [pc, #668]	@ (8002bd0 <HAL_UART_IRQHandler+0x2a8>)
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002932:	6811      	ldr	r1, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002934:	6896      	ldr	r6, [r2, #8]
  if (errorflags == 0U)
 8002936:	4203      	tst	r3, r0
 8002938:	d10b      	bne.n	8002952 <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800293a:	2020      	movs	r0, #32
 800293c:	4203      	tst	r3, r0
 800293e:	d100      	bne.n	8002942 <HAL_UART_IRQHandler+0x1a>
 8002940:	e080      	b.n	8002a44 <HAL_UART_IRQHandler+0x11c>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002942:	4201      	tst	r1, r0
 8002944:	d100      	bne.n	8002948 <HAL_UART_IRQHandler+0x20>
 8002946:	e07d      	b.n	8002a44 <HAL_UART_IRQHandler+0x11c>
      if (huart->RxISR != NULL)
 8002948:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
      huart->TxISR(huart);
 800294a:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 800294c:	2b00      	cmp	r3, #0
 800294e:	d16f      	bne.n	8002a30 <HAL_UART_IRQHandler+0x108>
 8002950:	e06f      	b.n	8002a32 <HAL_UART_IRQHandler+0x10a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002952:	2001      	movs	r0, #1
 8002954:	0037      	movs	r7, r6
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002956:	4d9f      	ldr	r5, [pc, #636]	@ (8002bd4 <HAL_UART_IRQHandler+0x2ac>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002958:	4007      	ands	r7, r0
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800295a:	400d      	ands	r5, r1
 800295c:	433d      	orrs	r5, r7
 800295e:	d100      	bne.n	8002962 <HAL_UART_IRQHandler+0x3a>
 8002960:	e070      	b.n	8002a44 <HAL_UART_IRQHandler+0x11c>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002962:	0025      	movs	r5, r4
 8002964:	3508      	adds	r5, #8
 8002966:	4203      	tst	r3, r0
 8002968:	d005      	beq.n	8002976 <HAL_UART_IRQHandler+0x4e>
 800296a:	05ce      	lsls	r6, r1, #23
 800296c:	d503      	bpl.n	8002976 <HAL_UART_IRQHandler+0x4e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800296e:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002970:	6fee      	ldr	r6, [r5, #124]	@ 0x7c
 8002972:	4330      	orrs	r0, r6
 8002974:	67e8      	str	r0, [r5, #124]	@ 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002976:	2002      	movs	r0, #2
 8002978:	4203      	tst	r3, r0
 800297a:	d006      	beq.n	800298a <HAL_UART_IRQHandler+0x62>
 800297c:	2f00      	cmp	r7, #0
 800297e:	d004      	beq.n	800298a <HAL_UART_IRQHandler+0x62>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002980:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002982:	6fee      	ldr	r6, [r5, #124]	@ 0x7c
 8002984:	1800      	adds	r0, r0, r0
 8002986:	4330      	orrs	r0, r6
 8002988:	67e8      	str	r0, [r5, #124]	@ 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800298a:	2004      	movs	r0, #4
 800298c:	4203      	tst	r3, r0
 800298e:	d006      	beq.n	800299e <HAL_UART_IRQHandler+0x76>
 8002990:	2f00      	cmp	r7, #0
 8002992:	d004      	beq.n	800299e <HAL_UART_IRQHandler+0x76>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002994:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002996:	6fee      	ldr	r6, [r5, #124]	@ 0x7c
 8002998:	3802      	subs	r0, #2
 800299a:	4330      	orrs	r0, r6
 800299c:	67e8      	str	r0, [r5, #124]	@ 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 800299e:	2008      	movs	r0, #8
 80029a0:	4203      	tst	r3, r0
 80029a2:	d007      	beq.n	80029b4 <HAL_UART_IRQHandler+0x8c>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80029a4:	2620      	movs	r6, #32
 80029a6:	400e      	ands	r6, r1
 80029a8:	433e      	orrs	r6, r7
 80029aa:	d003      	beq.n	80029b4 <HAL_UART_IRQHandler+0x8c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80029ac:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80029ae:	6fee      	ldr	r6, [r5, #124]	@ 0x7c
 80029b0:	4330      	orrs	r0, r6
 80029b2:	67e8      	str	r0, [r5, #124]	@ 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80029b4:	2080      	movs	r0, #128	@ 0x80
 80029b6:	0100      	lsls	r0, r0, #4
 80029b8:	4203      	tst	r3, r0
 80029ba:	d006      	beq.n	80029ca <HAL_UART_IRQHandler+0xa2>
 80029bc:	014e      	lsls	r6, r1, #5
 80029be:	d504      	bpl.n	80029ca <HAL_UART_IRQHandler+0xa2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80029c0:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80029c2:	2220      	movs	r2, #32
 80029c4:	6fe8      	ldr	r0, [r5, #124]	@ 0x7c
 80029c6:	4302      	orrs	r2, r0
 80029c8:	67ea      	str	r2, [r5, #124]	@ 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80029ca:	6fea      	ldr	r2, [r5, #124]	@ 0x7c
 80029cc:	2a00      	cmp	r2, #0
 80029ce:	d030      	beq.n	8002a32 <HAL_UART_IRQHandler+0x10a>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80029d0:	2220      	movs	r2, #32
 80029d2:	4213      	tst	r3, r2
 80029d4:	d006      	beq.n	80029e4 <HAL_UART_IRQHandler+0xbc>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80029d6:	4211      	tst	r1, r2
 80029d8:	d004      	beq.n	80029e4 <HAL_UART_IRQHandler+0xbc>
        if (huart->RxISR != NULL)
 80029da:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <HAL_UART_IRQHandler+0xbc>
          huart->RxISR(huart);
 80029e0:	0020      	movs	r0, r4
 80029e2:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80029e4:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 80029e6:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80029e8:	2740      	movs	r7, #64	@ 0x40
 80029ea:	6896      	ldr	r6, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80029ec:	2228      	movs	r2, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80029ee:	403e      	ands	r6, r7
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80029f0:	4013      	ands	r3, r2
        UART_EndRxTransfer(huart);
 80029f2:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80029f4:	431e      	orrs	r6, r3
 80029f6:	d021      	beq.n	8002a3c <HAL_UART_IRQHandler+0x114>
        UART_EndRxTransfer(huart);
 80029f8:	f7ff feac 	bl	8002754 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029fc:	6823      	ldr	r3, [r4, #0]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	423b      	tst	r3, r7
 8002a02:	d017      	beq.n	8002a34 <HAL_UART_IRQHandler+0x10c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a04:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a08:	2301      	movs	r3, #1
 8002a0a:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a0e:	6822      	ldr	r2, [r4, #0]
 8002a10:	6893      	ldr	r3, [r2, #8]
 8002a12:	43bb      	bics	r3, r7
 8002a14:	6093      	str	r3, [r2, #8]
 8002a16:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 8002a1a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8002a1c:	2800      	cmp	r0, #0
 8002a1e:	d009      	beq.n	8002a34 <HAL_UART_IRQHandler+0x10c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a20:	4b6d      	ldr	r3, [pc, #436]	@ (8002bd8 <HAL_UART_IRQHandler+0x2b0>)
 8002a22:	6343      	str	r3, [r0, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a24:	f7fe f9e8 	bl	8000df8 <HAL_DMA_Abort_IT>
 8002a28:	2800      	cmp	r0, #0
 8002a2a:	d002      	beq.n	8002a32 <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a2c:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8002a2e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002a30:	4798      	blx	r3
}
 8002a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 8002a34:	0020      	movs	r0, r4
 8002a36:	f7ff ff35 	bl	80028a4 <HAL_UART_ErrorCallback>
 8002a3a:	e7fa      	b.n	8002a32 <HAL_UART_IRQHandler+0x10a>
        HAL_UART_ErrorCallback(huart);
 8002a3c:	f7ff ff32 	bl	80028a4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a40:	67ee      	str	r6, [r5, #124]	@ 0x7c
 8002a42:	e7f6      	b.n	8002a32 <HAL_UART_IRQHandler+0x10a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a44:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8002a46:	2801      	cmp	r0, #1
 8002a48:	d000      	beq.n	8002a4c <HAL_UART_IRQHandler+0x124>
 8002a4a:	e095      	b.n	8002b78 <HAL_UART_IRQHandler+0x250>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002a4c:	2510      	movs	r5, #16
 8002a4e:	422b      	tst	r3, r5
 8002a50:	d100      	bne.n	8002a54 <HAL_UART_IRQHandler+0x12c>
 8002a52:	e091      	b.n	8002b78 <HAL_UART_IRQHandler+0x250>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002a54:	4229      	tst	r1, r5
 8002a56:	d100      	bne.n	8002a5a <HAL_UART_IRQHandler+0x132>
 8002a58:	e08e      	b.n	8002b78 <HAL_UART_IRQHandler+0x250>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002a5a:	6215      	str	r5, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a5c:	6893      	ldr	r3, [r2, #8]
 8002a5e:	2140      	movs	r1, #64	@ 0x40
 8002a60:	001e      	movs	r6, r3
 8002a62:	400e      	ands	r6, r1
 8002a64:	420b      	tst	r3, r1
 8002a66:	d04f      	beq.n	8002b08 <HAL_UART_IRQHandler+0x1e0>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a68:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 8002a6a:	6813      	ldr	r3, [r2, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d0de      	beq.n	8002a32 <HAL_UART_IRQHandler+0x10a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a74:	0026      	movs	r6, r4
 8002a76:	3658      	adds	r6, #88	@ 0x58
 8002a78:	8837      	ldrh	r7, [r6, #0]
 8002a7a:	429f      	cmp	r7, r3
 8002a7c:	d9d9      	bls.n	8002a32 <HAL_UART_IRQHandler+0x10a>
        huart->RxXferCount = nb_remaining_rx_data;
 8002a7e:	0027      	movs	r7, r4
 8002a80:	375a      	adds	r7, #90	@ 0x5a
 8002a82:	803b      	strh	r3, [r7, #0]
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002a84:	6993      	ldr	r3, [r2, #24]
 8002a86:	2b20      	cmp	r3, #32
 8002a88:	d032      	beq.n	8002af0 <HAL_UART_IRQHandler+0x1c8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a8a:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a8e:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a92:	6822      	ldr	r2, [r4, #0]
 8002a94:	4d51      	ldr	r5, [pc, #324]	@ (8002bdc <HAL_UART_IRQHandler+0x2b4>)
 8002a96:	6813      	ldr	r3, [r2, #0]
 8002a98:	402b      	ands	r3, r5
 8002a9a:	6013      	str	r3, [r2, #0]
 8002a9c:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002aa0:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aa4:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aa8:	6822      	ldr	r2, [r4, #0]
 8002aaa:	6893      	ldr	r3, [r2, #8]
 8002aac:	4383      	bics	r3, r0
 8002aae:	6093      	str	r3, [r2, #8]
 8002ab0:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ab4:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ab8:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002abc:	0023      	movs	r3, r4
 8002abe:	cb80      	ldmia	r3!, {r7}
 8002ac0:	68ba      	ldr	r2, [r7, #8]
 8002ac2:	438a      	bics	r2, r1
 8002ac4:	60ba      	str	r2, [r7, #8]
 8002ac6:	f38c 8810 	msr	PRIMASK, ip
          huart->RxState = HAL_UART_STATE_READY;
 8002aca:	2220      	movs	r2, #32
 8002acc:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	6623      	str	r3, [r4, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ad2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ad6:	f380 8810 	msr	PRIMASK, r0
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ada:	6822      	ldr	r2, [r4, #0]
 8002adc:	3512      	adds	r5, #18
 8002ade:	6813      	ldr	r3, [r2, #0]
 8002ae0:	35ff      	adds	r5, #255	@ 0xff
 8002ae2:	43ab      	bics	r3, r5
 8002ae4:	6013      	str	r3, [r2, #0]
 8002ae6:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002aea:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8002aec:	f7fe f966 	bl	8000dbc <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002af0:	2302      	movs	r3, #2
 8002af2:	6663      	str	r3, [r4, #100]	@ 0x64
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002af4:	0023      	movs	r3, r4
 8002af6:	335a      	adds	r3, #90	@ 0x5a
 8002af8:	881b      	ldrh	r3, [r3, #0]
 8002afa:	8831      	ldrh	r1, [r6, #0]
 8002afc:	1ac9      	subs	r1, r1, r3
 8002afe:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b00:	0020      	movs	r0, r4
 8002b02:	f7ff ff0f 	bl	8002924 <HAL_UARTEx_RxEventCallback>
 8002b06:	e794      	b.n	8002a32 <HAL_UART_IRQHandler+0x10a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b08:	0023      	movs	r3, r4
 8002b0a:	0022      	movs	r2, r4
 8002b0c:	3358      	adds	r3, #88	@ 0x58
 8002b0e:	325a      	adds	r2, #90	@ 0x5a
 8002b10:	8819      	ldrh	r1, [r3, #0]
 8002b12:	8813      	ldrh	r3, [r2, #0]
      if ((huart->RxXferCount > 0U)
 8002b14:	8812      	ldrh	r2, [r2, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b16:	b29b      	uxth	r3, r3
      if ((huart->RxXferCount > 0U)
 8002b18:	2a00      	cmp	r2, #0
 8002b1a:	d100      	bne.n	8002b1e <HAL_UART_IRQHandler+0x1f6>
 8002b1c:	e789      	b.n	8002a32 <HAL_UART_IRQHandler+0x10a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b1e:	1ac9      	subs	r1, r1, r3
 8002b20:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8002b22:	2900      	cmp	r1, #0
 8002b24:	d100      	bne.n	8002b28 <HAL_UART_IRQHandler+0x200>
 8002b26:	e784      	b.n	8002a32 <HAL_UART_IRQHandler+0x10a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b28:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b2c:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b30:	6822      	ldr	r2, [r4, #0]
 8002b32:	4d2b      	ldr	r5, [pc, #172]	@ (8002be0 <HAL_UART_IRQHandler+0x2b8>)
 8002b34:	6813      	ldr	r3, [r2, #0]
 8002b36:	402b      	ands	r3, r5
 8002b38:	6013      	str	r3, [r2, #0]
 8002b3a:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b3e:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b42:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b46:	0023      	movs	r3, r4
 8002b48:	cb80      	ldmia	r3!, {r7}
 8002b4a:	68ba      	ldr	r2, [r7, #8]
 8002b4c:	4382      	bics	r2, r0
 8002b4e:	60ba      	str	r2, [r7, #8]
 8002b50:	f38c 8810 	msr	PRIMASK, ip
        huart->RxState = HAL_UART_STATE_READY;
 8002b54:	2220      	movs	r2, #32
 8002b56:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b58:	6626      	str	r6, [r4, #96]	@ 0x60
        huart->RxISR = NULL;
 8002b5a:	66a6      	str	r6, [r4, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b5c:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b60:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b64:	2010      	movs	r0, #16
 8002b66:	6822      	ldr	r2, [r4, #0]
 8002b68:	6813      	ldr	r3, [r2, #0]
 8002b6a:	4383      	bics	r3, r0
 8002b6c:	6013      	str	r3, [r2, #0]
 8002b6e:	f386 8810 	msr	PRIMASK, r6
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b72:	2302      	movs	r3, #2
 8002b74:	6663      	str	r3, [r4, #100]	@ 0x64
 8002b76:	e7c3      	b.n	8002b00 <HAL_UART_IRQHandler+0x1d8>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002b78:	2080      	movs	r0, #128	@ 0x80
 8002b7a:	0340      	lsls	r0, r0, #13
 8002b7c:	4203      	tst	r3, r0
 8002b7e:	d006      	beq.n	8002b8e <HAL_UART_IRQHandler+0x266>
 8002b80:	0276      	lsls	r6, r6, #9
 8002b82:	d504      	bpl.n	8002b8e <HAL_UART_IRQHandler+0x266>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002b84:	6210      	str	r0, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8002b86:	0020      	movs	r0, r4
 8002b88:	f000 fae8 	bl	800315c <HAL_UARTEx_WakeupCallback>
    return;
 8002b8c:	e751      	b.n	8002a32 <HAL_UART_IRQHandler+0x10a>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002b8e:	2280      	movs	r2, #128	@ 0x80
 8002b90:	4213      	tst	r3, r2
 8002b92:	d003      	beq.n	8002b9c <HAL_UART_IRQHandler+0x274>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002b94:	4211      	tst	r1, r2
 8002b96:	d001      	beq.n	8002b9c <HAL_UART_IRQHandler+0x274>
    if (huart->TxISR != NULL)
 8002b98:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8002b9a:	e6d6      	b.n	800294a <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002b9c:	2240      	movs	r2, #64	@ 0x40
 8002b9e:	4213      	tst	r3, r2
 8002ba0:	d100      	bne.n	8002ba4 <HAL_UART_IRQHandler+0x27c>
 8002ba2:	e746      	b.n	8002a32 <HAL_UART_IRQHandler+0x10a>
 8002ba4:	4211      	tst	r1, r2
 8002ba6:	d100      	bne.n	8002baa <HAL_UART_IRQHandler+0x282>
 8002ba8:	e743      	b.n	8002a32 <HAL_UART_IRQHandler+0x10a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002baa:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bae:	2301      	movs	r3, #1
 8002bb0:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002bb4:	6821      	ldr	r1, [r4, #0]
 8002bb6:	680b      	ldr	r3, [r1, #0]
 8002bb8:	4393      	bics	r3, r2
 8002bba:	600b      	str	r3, [r1, #0]
 8002bbc:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002bc0:	2320      	movs	r3, #32
 8002bc2:	67e3      	str	r3, [r4, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002bc4:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002bc6:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 8002bc8:	66e3      	str	r3, [r4, #108]	@ 0x6c
  HAL_UART_TxCpltCallback(huart);
 8002bca:	f7fd fd67 	bl	800069c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002bce:	e730      	b.n	8002a32 <HAL_UART_IRQHandler+0x10a>
 8002bd0:	0000080f 	.word	0x0000080f
 8002bd4:	04000120 	.word	0x04000120
 8002bd8:	0800290f 	.word	0x0800290f
 8002bdc:	fffffeff 	.word	0xfffffeff
 8002be0:	fffffedf 	.word	0xfffffedf

08002be4 <UART_DMARxHalfCplt>:
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002be4:	2301      	movs	r3, #1
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002be6:	6a40      	ldr	r0, [r0, #36]	@ 0x24
{
 8002be8:	b510      	push	{r4, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002bea:	6643      	str	r3, [r0, #100]	@ 0x64
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bec:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d106      	bne.n	8002c00 <UART_DMARxHalfCplt+0x1c>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002bf2:	0003      	movs	r3, r0
 8002bf4:	3358      	adds	r3, #88	@ 0x58
 8002bf6:	8819      	ldrh	r1, [r3, #0]
 8002bf8:	0849      	lsrs	r1, r1, #1
 8002bfa:	f7ff fe93 	bl	8002924 <HAL_UARTEx_RxEventCallback>
}
 8002bfe:	bd10      	pop	{r4, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 8002c00:	f7ff fe4f 	bl	80028a2 <HAL_UART_RxHalfCpltCallback>
}
 8002c04:	e7fb      	b.n	8002bfe <UART_DMARxHalfCplt+0x1a>
	...

08002c08 <UART_DMAReceiveCplt>:
{
 8002c08:	0003      	movs	r3, r0
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8002c0a:	699b      	ldr	r3, [r3, #24]
{
 8002c0c:	b570      	push	{r4, r5, r6, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002c0e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8002c10:	2b20      	cmp	r3, #32
 8002c12:	d036      	beq.n	8002c82 <UART_DMAReceiveCplt+0x7a>
    huart->RxXferCount = 0U;
 8002c14:	0003      	movs	r3, r0
 8002c16:	2200      	movs	r2, #0
 8002c18:	335a      	adds	r3, #90	@ 0x5a
 8002c1a:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c1c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c20:	2301      	movs	r3, #1
 8002c22:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c26:	6801      	ldr	r1, [r0, #0]
 8002c28:	4d1d      	ldr	r5, [pc, #116]	@ (8002ca0 <UART_DMAReceiveCplt+0x98>)
 8002c2a:	680a      	ldr	r2, [r1, #0]
 8002c2c:	402a      	ands	r2, r5
 8002c2e:	600a      	str	r2, [r1, #0]
 8002c30:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c34:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c38:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c3c:	6801      	ldr	r1, [r0, #0]
 8002c3e:	688a      	ldr	r2, [r1, #8]
 8002c40:	439a      	bics	r2, r3
 8002c42:	608a      	str	r2, [r1, #8]
 8002c44:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c48:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c4c:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c50:	0003      	movs	r3, r0
 8002c52:	cb02      	ldmia	r3!, {r1}
 8002c54:	3542      	adds	r5, #66	@ 0x42
 8002c56:	688a      	ldr	r2, [r1, #8]
 8002c58:	35ff      	adds	r5, #255	@ 0xff
 8002c5a:	43aa      	bics	r2, r5
 8002c5c:	608a      	str	r2, [r1, #8]
 8002c5e:	f384 8810 	msr	PRIMASK, r4
    huart->RxState = HAL_UART_STATE_READY;
 8002c62:	2220      	movs	r2, #32
 8002c64:	67da      	str	r2, [r3, #124]	@ 0x7c
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c66:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d10a      	bne.n	8002c82 <UART_DMAReceiveCplt+0x7a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c6c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c70:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c74:	2410      	movs	r4, #16
 8002c76:	6802      	ldr	r2, [r0, #0]
 8002c78:	6813      	ldr	r3, [r2, #0]
 8002c7a:	43a3      	bics	r3, r4
 8002c7c:	6013      	str	r3, [r2, #0]
 8002c7e:	f381 8810 	msr	PRIMASK, r1
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c82:	2300      	movs	r3, #0
 8002c84:	6643      	str	r3, [r0, #100]	@ 0x64
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c86:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d105      	bne.n	8002c98 <UART_DMAReceiveCplt+0x90>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002c8c:	0003      	movs	r3, r0
 8002c8e:	3358      	adds	r3, #88	@ 0x58
 8002c90:	8819      	ldrh	r1, [r3, #0]
 8002c92:	f7ff fe47 	bl	8002924 <HAL_UARTEx_RxEventCallback>
}
 8002c96:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UART_RxCpltCallback(huart);
 8002c98:	f7fd fd52 	bl	8000740 <HAL_UART_RxCpltCallback>
}
 8002c9c:	e7fb      	b.n	8002c96 <UART_DMAReceiveCplt+0x8e>
 8002c9e:	46c0      	nop			@ (mov r8, r8)
 8002ca0:	fffffeff 	.word	0xfffffeff

08002ca4 <UART_SetConfig>:
{
 8002ca4:	b570      	push	{r4, r5, r6, lr}
 8002ca6:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ca8:	6925      	ldr	r5, [r4, #16]
 8002caa:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002cac:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002cae:	4329      	orrs	r1, r5
 8002cb0:	6965      	ldr	r5, [r4, #20]
 8002cb2:	69c2      	ldr	r2, [r0, #28]
 8002cb4:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002cb6:	6818      	ldr	r0, [r3, #0]
 8002cb8:	4d3d      	ldr	r5, [pc, #244]	@ (8002db0 <UART_SetConfig+0x10c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002cba:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002cbc:	4028      	ands	r0, r5
 8002cbe:	4301      	orrs	r1, r0
 8002cc0:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cc2:	6859      	ldr	r1, [r3, #4]
 8002cc4:	483b      	ldr	r0, [pc, #236]	@ (8002db4 <UART_SetConfig+0x110>)
  tmpreg |= huart->Init.OneBitSampling;
 8002cc6:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cc8:	4001      	ands	r1, r0
 8002cca:	68e0      	ldr	r0, [r4, #12]
 8002ccc:	4301      	orrs	r1, r0
 8002cce:	6059      	str	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002cd0:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002cd2:	6898      	ldr	r0, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8002cd4:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002cd6:	4d38      	ldr	r5, [pc, #224]	@ (8002db8 <UART_SetConfig+0x114>)
 8002cd8:	4028      	ands	r0, r5
 8002cda:	4301      	orrs	r1, r0
 8002cdc:	6099      	str	r1, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002cde:	4937      	ldr	r1, [pc, #220]	@ (8002dbc <UART_SetConfig+0x118>)
 8002ce0:	428b      	cmp	r3, r1
 8002ce2:	d115      	bne.n	8002d10 <UART_SetConfig+0x6c>
 8002ce4:	2103      	movs	r1, #3
 8002ce6:	4b36      	ldr	r3, [pc, #216]	@ (8002dc0 <UART_SetConfig+0x11c>)
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cea:	400b      	ands	r3, r1
 8002cec:	3b01      	subs	r3, #1
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d851      	bhi.n	8002d96 <UART_SetConfig+0xf2>
 8002cf2:	4934      	ldr	r1, [pc, #208]	@ (8002dc4 <UART_SetConfig+0x120>)
 8002cf4:	5cc8      	ldrb	r0, [r1, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cf6:	2380      	movs	r3, #128	@ 0x80
 8002cf8:	021b      	lsls	r3, r3, #8
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d127      	bne.n	8002d4e <UART_SetConfig+0xaa>
    switch (clocksource)
 8002cfe:	2808      	cmp	r0, #8
 8002d00:	d847      	bhi.n	8002d92 <UART_SetConfig+0xee>
 8002d02:	f7fd fa09 	bl	8000118 <__gnu_thumb1_case_uqi>
 8002d06:	464c      	.short	0x464c
 8002d08:	460b460e 	.word	0x460b460e
 8002d0c:	4646      	.short	0x4646
 8002d0e:	0f          	.byte	0x0f
 8002d0f:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d10:	492d      	ldr	r1, [pc, #180]	@ (8002dc8 <UART_SetConfig+0x124>)
 8002d12:	185b      	adds	r3, r3, r1
 8002d14:	1e59      	subs	r1, r3, #1
 8002d16:	418b      	sbcs	r3, r1
 8002d18:	0118      	lsls	r0, r3, #4
 8002d1a:	e7ec      	b.n	8002cf6 <UART_SetConfig+0x52>
        pclk = HAL_RCC_GetSysClockFreq();
 8002d1c:	f7ff fa44 	bl	80021a8 <HAL_RCC_GetSysClockFreq>
 8002d20:	e03f      	b.n	8002da2 <UART_SetConfig+0xfe>
    switch (clocksource)
 8002d22:	4a2a      	ldr	r2, [pc, #168]	@ (8002dcc <UART_SetConfig+0x128>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d24:	6861      	ldr	r1, [r4, #4]
 8002d26:	0052      	lsls	r2, r2, #1
 8002d28:	0848      	lsrs	r0, r1, #1
 8002d2a:	1810      	adds	r0, r2, r0
 8002d2c:	f7fd fa08 	bl	8000140 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d30:	0002      	movs	r2, r0
 8002d32:	4b27      	ldr	r3, [pc, #156]	@ (8002dd0 <UART_SetConfig+0x12c>)
 8002d34:	3a10      	subs	r2, #16
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d82b      	bhi.n	8002d92 <UART_SetConfig+0xee>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d3a:	230f      	movs	r3, #15
 8002d3c:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d3e:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d40:	439a      	bics	r2, r3
 8002d42:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d44:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 8002d46:	6822      	ldr	r2, [r4, #0]
 8002d48:	4303      	orrs	r3, r0
 8002d4a:	60d3      	str	r3, [r2, #12]
 8002d4c:	e02b      	b.n	8002da6 <UART_SetConfig+0x102>
    switch (clocksource)
 8002d4e:	2808      	cmp	r0, #8
 8002d50:	d81f      	bhi.n	8002d92 <UART_SetConfig+0xee>
 8002d52:	f7fd f9e1 	bl	8000118 <__gnu_thumb1_case_uqi>
 8002d56:	1e13      	.short	0x1e13
 8002d58:	1e181e05 	.word	0x1e181e05
 8002d5c:	1e1e      	.short	0x1e1e
 8002d5e:	1b          	.byte	0x1b
 8002d5f:	00          	.byte	0x00
        pclk = (uint32_t) HSI_VALUE;
 8002d60:	481a      	ldr	r0, [pc, #104]	@ (8002dcc <UART_SetConfig+0x128>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d62:	6861      	ldr	r1, [r4, #4]
 8002d64:	084b      	lsrs	r3, r1, #1
 8002d66:	1818      	adds	r0, r3, r0
 8002d68:	f7fd f9ea 	bl	8000140 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d6c:	0002      	movs	r2, r0
 8002d6e:	4b18      	ldr	r3, [pc, #96]	@ (8002dd0 <UART_SetConfig+0x12c>)
 8002d70:	3a10      	subs	r2, #16
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d80d      	bhi.n	8002d92 <UART_SetConfig+0xee>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002d76:	6823      	ldr	r3, [r4, #0]
 8002d78:	60d8      	str	r0, [r3, #12]
 8002d7a:	e014      	b.n	8002da6 <UART_SetConfig+0x102>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d7c:	f7ff fad4 	bl	8002328 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002d80:	2800      	cmp	r0, #0
 8002d82:	d010      	beq.n	8002da6 <UART_SetConfig+0x102>
 8002d84:	e7ed      	b.n	8002d62 <UART_SetConfig+0xbe>
        pclk = HAL_RCC_GetSysClockFreq();
 8002d86:	f7ff fa0f 	bl	80021a8 <HAL_RCC_GetSysClockFreq>
        break;
 8002d8a:	e7f9      	b.n	8002d80 <UART_SetConfig+0xdc>
    switch (clocksource)
 8002d8c:	2080      	movs	r0, #128	@ 0x80
 8002d8e:	0200      	lsls	r0, r0, #8
 8002d90:	e7e7      	b.n	8002d62 <UART_SetConfig+0xbe>
        ret = HAL_ERROR;
 8002d92:	2001      	movs	r0, #1
 8002d94:	e008      	b.n	8002da8 <UART_SetConfig+0x104>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d96:	2380      	movs	r3, #128	@ 0x80
 8002d98:	021b      	lsls	r3, r3, #8
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d1ee      	bne.n	8002d7c <UART_SetConfig+0xd8>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d9e:	f7ff fac3 	bl	8002328 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8002da2:	1e02      	subs	r2, r0, #0
    if (pclk != 0U)
 8002da4:	d1be      	bne.n	8002d24 <UART_SetConfig+0x80>
        pclk = (uint32_t) HSI_VALUE;
 8002da6:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8002da8:	2300      	movs	r3, #0
 8002daa:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8002dac:	66e3      	str	r3, [r4, #108]	@ 0x6c
}
 8002dae:	bd70      	pop	{r4, r5, r6, pc}
 8002db0:	efff69f3 	.word	0xefff69f3
 8002db4:	ffffcfff 	.word	0xffffcfff
 8002db8:	fffff4ff 	.word	0xfffff4ff
 8002dbc:	40013800 	.word	0x40013800
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	080053e2 	.word	0x080053e2
 8002dc8:	bfffbc00 	.word	0xbfffbc00
 8002dcc:	007a1200 	.word	0x007a1200
 8002dd0:	0000ffef 	.word	0x0000ffef

08002dd4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002dd4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
{
 8002dd6:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002dd8:	071a      	lsls	r2, r3, #28
 8002dda:	d506      	bpl.n	8002dea <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ddc:	6801      	ldr	r1, [r0, #0]
 8002dde:	4c28      	ldr	r4, [pc, #160]	@ (8002e80 <UART_AdvFeatureConfig+0xac>)
 8002de0:	684a      	ldr	r2, [r1, #4]
 8002de2:	4022      	ands	r2, r4
 8002de4:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8002de6:	4322      	orrs	r2, r4
 8002de8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002dea:	07da      	lsls	r2, r3, #31
 8002dec:	d506      	bpl.n	8002dfc <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002dee:	6801      	ldr	r1, [r0, #0]
 8002df0:	4c24      	ldr	r4, [pc, #144]	@ (8002e84 <UART_AdvFeatureConfig+0xb0>)
 8002df2:	684a      	ldr	r2, [r1, #4]
 8002df4:	4022      	ands	r2, r4
 8002df6:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8002df8:	4322      	orrs	r2, r4
 8002dfa:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002dfc:	079a      	lsls	r2, r3, #30
 8002dfe:	d506      	bpl.n	8002e0e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e00:	6801      	ldr	r1, [r0, #0]
 8002e02:	4c21      	ldr	r4, [pc, #132]	@ (8002e88 <UART_AdvFeatureConfig+0xb4>)
 8002e04:	684a      	ldr	r2, [r1, #4]
 8002e06:	4022      	ands	r2, r4
 8002e08:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8002e0a:	4322      	orrs	r2, r4
 8002e0c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e0e:	075a      	lsls	r2, r3, #29
 8002e10:	d506      	bpl.n	8002e20 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e12:	6801      	ldr	r1, [r0, #0]
 8002e14:	4c1d      	ldr	r4, [pc, #116]	@ (8002e8c <UART_AdvFeatureConfig+0xb8>)
 8002e16:	684a      	ldr	r2, [r1, #4]
 8002e18:	4022      	ands	r2, r4
 8002e1a:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8002e1c:	4322      	orrs	r2, r4
 8002e1e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e20:	06da      	lsls	r2, r3, #27
 8002e22:	d506      	bpl.n	8002e32 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e24:	6801      	ldr	r1, [r0, #0]
 8002e26:	4c1a      	ldr	r4, [pc, #104]	@ (8002e90 <UART_AdvFeatureConfig+0xbc>)
 8002e28:	688a      	ldr	r2, [r1, #8]
 8002e2a:	4022      	ands	r2, r4
 8002e2c:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8002e2e:	4322      	orrs	r2, r4
 8002e30:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e32:	069a      	lsls	r2, r3, #26
 8002e34:	d506      	bpl.n	8002e44 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e36:	6801      	ldr	r1, [r0, #0]
 8002e38:	4c16      	ldr	r4, [pc, #88]	@ (8002e94 <UART_AdvFeatureConfig+0xc0>)
 8002e3a:	688a      	ldr	r2, [r1, #8]
 8002e3c:	4022      	ands	r2, r4
 8002e3e:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8002e40:	4322      	orrs	r2, r4
 8002e42:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e44:	065a      	lsls	r2, r3, #25
 8002e46:	d510      	bpl.n	8002e6a <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e48:	6801      	ldr	r1, [r0, #0]
 8002e4a:	4d13      	ldr	r5, [pc, #76]	@ (8002e98 <UART_AdvFeatureConfig+0xc4>)
 8002e4c:	684a      	ldr	r2, [r1, #4]
 8002e4e:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8002e50:	402a      	ands	r2, r5
 8002e52:	4322      	orrs	r2, r4
 8002e54:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e56:	2280      	movs	r2, #128	@ 0x80
 8002e58:	0352      	lsls	r2, r2, #13
 8002e5a:	4294      	cmp	r4, r2
 8002e5c:	d105      	bne.n	8002e6a <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e5e:	684a      	ldr	r2, [r1, #4]
 8002e60:	4c0e      	ldr	r4, [pc, #56]	@ (8002e9c <UART_AdvFeatureConfig+0xc8>)
 8002e62:	4022      	ands	r2, r4
 8002e64:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8002e66:	4322      	orrs	r2, r4
 8002e68:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e6a:	061b      	lsls	r3, r3, #24
 8002e6c:	d506      	bpl.n	8002e7c <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002e6e:	6802      	ldr	r2, [r0, #0]
 8002e70:	490b      	ldr	r1, [pc, #44]	@ (8002ea0 <UART_AdvFeatureConfig+0xcc>)
 8002e72:	6853      	ldr	r3, [r2, #4]
 8002e74:	400b      	ands	r3, r1
 8002e76:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8002e78:	430b      	orrs	r3, r1
 8002e7a:	6053      	str	r3, [r2, #4]
}
 8002e7c:	bd30      	pop	{r4, r5, pc}
 8002e7e:	46c0      	nop			@ (mov r8, r8)
 8002e80:	ffff7fff 	.word	0xffff7fff
 8002e84:	fffdffff 	.word	0xfffdffff
 8002e88:	fffeffff 	.word	0xfffeffff
 8002e8c:	fffbffff 	.word	0xfffbffff
 8002e90:	ffffefff 	.word	0xffffefff
 8002e94:	ffffdfff 	.word	0xffffdfff
 8002e98:	ffefffff 	.word	0xffefffff
 8002e9c:	ff9fffff 	.word	0xff9fffff
 8002ea0:	fff7ffff 	.word	0xfff7ffff

08002ea4 <UART_WaitOnFlagUntilTimeout>:
{
 8002ea4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002ea6:	0004      	movs	r4, r0
 8002ea8:	000d      	movs	r5, r1
 8002eaa:	0017      	movs	r7, r2
 8002eac:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002eae:	6822      	ldr	r2, [r4, #0]
 8002eb0:	69d3      	ldr	r3, [r2, #28]
 8002eb2:	402b      	ands	r3, r5
 8002eb4:	1b5b      	subs	r3, r3, r5
 8002eb6:	4259      	negs	r1, r3
 8002eb8:	414b      	adcs	r3, r1
 8002eba:	42bb      	cmp	r3, r7
 8002ebc:	d001      	beq.n	8002ec2 <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8002ebe:	2000      	movs	r0, #0
 8002ec0:	e025      	b.n	8002f0e <UART_WaitOnFlagUntilTimeout+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8002ec2:	9b08      	ldr	r3, [sp, #32]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	d0f3      	beq.n	8002eb0 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ec8:	f7fd feb4 	bl	8000c34 <HAL_GetTick>
 8002ecc:	9b00      	ldr	r3, [sp, #0]
 8002ece:	1ac0      	subs	r0, r0, r3
 8002ed0:	9b08      	ldr	r3, [sp, #32]
 8002ed2:	4298      	cmp	r0, r3
 8002ed4:	d82c      	bhi.n	8002f30 <UART_WaitOnFlagUntilTimeout+0x8c>
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d02a      	beq.n	8002f30 <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002eda:	6823      	ldr	r3, [r4, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	0752      	lsls	r2, r2, #29
 8002ee0:	d5e5      	bpl.n	8002eae <UART_WaitOnFlagUntilTimeout+0xa>
 8002ee2:	002a      	movs	r2, r5
 8002ee4:	2140      	movs	r1, #64	@ 0x40
 8002ee6:	3a40      	subs	r2, #64	@ 0x40
 8002ee8:	438a      	bics	r2, r1
 8002eea:	d0e0      	beq.n	8002eae <UART_WaitOnFlagUntilTimeout+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002eec:	69da      	ldr	r2, [r3, #28]
 8002eee:	2608      	movs	r6, #8
 8002ef0:	0011      	movs	r1, r2
 8002ef2:	4031      	ands	r1, r6
 8002ef4:	9101      	str	r1, [sp, #4]
 8002ef6:	4232      	tst	r2, r6
 8002ef8:	d00a      	beq.n	8002f10 <UART_WaitOnFlagUntilTimeout+0x6c>
          UART_EndRxTransfer(huart);
 8002efa:	0020      	movs	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002efc:	621e      	str	r6, [r3, #32]
          UART_EndRxTransfer(huart);
 8002efe:	f7ff fc29 	bl	8002754 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f02:	19a3      	adds	r3, r4, r6
 8002f04:	67de      	str	r6, [r3, #124]	@ 0x7c
          __HAL_UNLOCK(huart);
 8002f06:	2300      	movs	r3, #0
          return HAL_ERROR;
 8002f08:	2001      	movs	r0, #1
          __HAL_UNLOCK(huart);
 8002f0a:	3478      	adds	r4, #120	@ 0x78
 8002f0c:	7023      	strb	r3, [r4, #0]
}
 8002f0e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f10:	2280      	movs	r2, #128	@ 0x80
 8002f12:	69d9      	ldr	r1, [r3, #28]
 8002f14:	0112      	lsls	r2, r2, #4
 8002f16:	4211      	tst	r1, r2
 8002f18:	d0c9      	beq.n	8002eae <UART_WaitOnFlagUntilTimeout+0xa>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f1a:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 8002f1c:	0020      	movs	r0, r4
 8002f1e:	f7ff fc19 	bl	8002754 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f22:	0023      	movs	r3, r4
 8002f24:	2220      	movs	r2, #32
 8002f26:	3308      	adds	r3, #8
 8002f28:	67da      	str	r2, [r3, #124]	@ 0x7c
          __HAL_UNLOCK(huart);
 8002f2a:	9b01      	ldr	r3, [sp, #4]
 8002f2c:	3478      	adds	r4, #120	@ 0x78
 8002f2e:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 8002f30:	2003      	movs	r0, #3
 8002f32:	e7ec      	b.n	8002f0e <UART_WaitOnFlagUntilTimeout+0x6a>

08002f34 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f34:	0003      	movs	r3, r0
{
 8002f36:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f38:	2500      	movs	r5, #0
{
 8002f3a:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f3c:	3308      	adds	r3, #8
 8002f3e:	67dd      	str	r5, [r3, #124]	@ 0x7c
  tickstart = HAL_GetTick();
 8002f40:	f7fd fe78 	bl	8000c34 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f44:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8002f46:	0006      	movs	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	071b      	lsls	r3, r3, #28
 8002f4c:	d51d      	bpl.n	8002f8a <UART_CheckIdleState+0x56>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f4e:	2180      	movs	r1, #128	@ 0x80
 8002f50:	4b26      	ldr	r3, [pc, #152]	@ (8002fec <UART_CheckIdleState+0xb8>)
 8002f52:	002a      	movs	r2, r5
 8002f54:	9300      	str	r3, [sp, #0]
 8002f56:	0389      	lsls	r1, r1, #14
 8002f58:	0003      	movs	r3, r0
 8002f5a:	0020      	movs	r0, r4
 8002f5c:	f7ff ffa2 	bl	8002ea4 <UART_WaitOnFlagUntilTimeout>
 8002f60:	42a8      	cmp	r0, r5
 8002f62:	d012      	beq.n	8002f8a <UART_CheckIdleState+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f64:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f68:	2301      	movs	r3, #1
 8002f6a:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002f6e:	2080      	movs	r0, #128	@ 0x80
 8002f70:	6822      	ldr	r2, [r4, #0]
 8002f72:	6813      	ldr	r3, [r2, #0]
 8002f74:	4383      	bics	r3, r0
 8002f76:	6013      	str	r3, [r2, #0]
 8002f78:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8002f7c:	2320      	movs	r3, #32
 8002f7e:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 8002f80:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8002f82:	2300      	movs	r3, #0
 8002f84:	3478      	adds	r4, #120	@ 0x78
 8002f86:	7023      	strb	r3, [r4, #0]
}
 8002f88:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f8a:	0025      	movs	r5, r4
 8002f8c:	cd08      	ldmia	r5!, {r3}
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	075b      	lsls	r3, r3, #29
 8002f92:	d523      	bpl.n	8002fdc <UART_CheckIdleState+0xa8>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f94:	2180      	movs	r1, #128	@ 0x80
 8002f96:	4b15      	ldr	r3, [pc, #84]	@ (8002fec <UART_CheckIdleState+0xb8>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	9300      	str	r3, [sp, #0]
 8002f9c:	0020      	movs	r0, r4
 8002f9e:	0033      	movs	r3, r6
 8002fa0:	03c9      	lsls	r1, r1, #15
 8002fa2:	f7ff ff7f 	bl	8002ea4 <UART_WaitOnFlagUntilTimeout>
 8002fa6:	2800      	cmp	r0, #0
 8002fa8:	d018      	beq.n	8002fdc <UART_CheckIdleState+0xa8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002faa:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fb4:	6821      	ldr	r1, [r4, #0]
 8002fb6:	4e0e      	ldr	r6, [pc, #56]	@ (8002ff0 <UART_CheckIdleState+0xbc>)
 8002fb8:	680b      	ldr	r3, [r1, #0]
 8002fba:	4033      	ands	r3, r6
 8002fbc:	600b      	str	r3, [r1, #0]
 8002fbe:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fc2:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fc6:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fca:	6821      	ldr	r1, [r4, #0]
 8002fcc:	688b      	ldr	r3, [r1, #8]
 8002fce:	4393      	bics	r3, r2
 8002fd0:	608b      	str	r3, [r1, #8]
 8002fd2:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8002fd6:	2320      	movs	r3, #32
 8002fd8:	67eb      	str	r3, [r5, #124]	@ 0x7c
      return HAL_TIMEOUT;
 8002fda:	e7d1      	b.n	8002f80 <UART_CheckIdleState+0x4c>
  huart->gState = HAL_UART_STATE_READY;
 8002fdc:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fde:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002fe0:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002fe2:	67eb      	str	r3, [r5, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fe4:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fe6:	6660      	str	r0, [r4, #100]	@ 0x64
  return HAL_OK;
 8002fe8:	e7cb      	b.n	8002f82 <UART_CheckIdleState+0x4e>
 8002fea:	46c0      	nop			@ (mov r8, r8)
 8002fec:	01ffffff 	.word	0x01ffffff
 8002ff0:	fffffedf 	.word	0xfffffedf

08002ff4 <HAL_UART_Init>:
{
 8002ff4:	b510      	push	{r4, lr}
 8002ff6:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8002ff8:	d101      	bne.n	8002ffe <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8002ffa:	2001      	movs	r0, #1
}
 8002ffc:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8002ffe:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8003000:	2b00      	cmp	r3, #0
 8003002:	d104      	bne.n	800300e <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8003004:	0002      	movs	r2, r0
 8003006:	3278      	adds	r2, #120	@ 0x78
 8003008:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 800300a:	f7fd fc1d 	bl	8000848 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800300e:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8003010:	2101      	movs	r1, #1
 8003012:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003014:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 8003016:	6813      	ldr	r3, [r2, #0]
 8003018:	438b      	bics	r3, r1
 800301a:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800301c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800301e:	2b00      	cmp	r3, #0
 8003020:	d002      	beq.n	8003028 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8003022:	0020      	movs	r0, r4
 8003024:	f7ff fed6 	bl	8002dd4 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003028:	0020      	movs	r0, r4
 800302a:	f7ff fe3b 	bl	8002ca4 <UART_SetConfig>
 800302e:	2801      	cmp	r0, #1
 8003030:	d0e3      	beq.n	8002ffa <HAL_UART_Init+0x6>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003032:	6823      	ldr	r3, [r4, #0]
 8003034:	4907      	ldr	r1, [pc, #28]	@ (8003054 <HAL_UART_Init+0x60>)
 8003036:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8003038:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800303a:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800303c:	212a      	movs	r1, #42	@ 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800303e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003040:	689a      	ldr	r2, [r3, #8]
 8003042:	438a      	bics	r2, r1
 8003044:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003046:	2201      	movs	r2, #1
 8003048:	6819      	ldr	r1, [r3, #0]
 800304a:	430a      	orrs	r2, r1
 800304c:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800304e:	f7ff ff71 	bl	8002f34 <UART_CheckIdleState>
 8003052:	e7d3      	b.n	8002ffc <HAL_UART_Init+0x8>
 8003054:	ffffb7ff 	.word	0xffffb7ff

08003058 <UART_Start_Receive_DMA>:
{
 8003058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800305a:	0013      	movs	r3, r2
  huart->RxXferSize = Size;
 800305c:	0002      	movs	r2, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800305e:	0006      	movs	r6, r0
  huart->RxXferSize = Size;
 8003060:	3258      	adds	r2, #88	@ 0x58
  huart->pRxBuffPtr = pData;
 8003062:	6541      	str	r1, [r0, #84]	@ 0x54
{
 8003064:	000f      	movs	r7, r1
  huart->RxXferSize = Size;
 8003066:	8013      	strh	r3, [r2, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003068:	2122      	movs	r1, #34	@ 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800306a:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800306c:	1d05      	adds	r5, r0, #4
{
 800306e:	0004      	movs	r4, r0
  if (huart->hdmarx != NULL)
 8003070:	6f40      	ldr	r0, [r0, #116]	@ 0x74
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003072:	3608      	adds	r6, #8
 8003074:	67f2      	str	r2, [r6, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003076:	67e9      	str	r1, [r5, #124]	@ 0x7c
  if (huart->hdmarx != NULL)
 8003078:	4290      	cmp	r0, r2
 800307a:	d013      	beq.n	80030a4 <UART_Start_Receive_DMA+0x4c>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800307c:	491d      	ldr	r1, [pc, #116]	@ (80030f4 <UART_Start_Receive_DMA+0x9c>)
    huart->hdmarx->XferAbortCallback = NULL;
 800307e:	6342      	str	r2, [r0, #52]	@ 0x34
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003080:	6281      	str	r1, [r0, #40]	@ 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003082:	491d      	ldr	r1, [pc, #116]	@ (80030f8 <UART_Start_Receive_DMA+0xa0>)
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003084:	003a      	movs	r2, r7
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003086:	62c1      	str	r1, [r0, #44]	@ 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003088:	491c      	ldr	r1, [pc, #112]	@ (80030fc <UART_Start_Receive_DMA+0xa4>)
 800308a:	6301      	str	r1, [r0, #48]	@ 0x30
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800308c:	6821      	ldr	r1, [r4, #0]
 800308e:	3124      	adds	r1, #36	@ 0x24
 8003090:	f7fd fe58 	bl	8000d44 <HAL_DMA_Start_IT>
 8003094:	2800      	cmp	r0, #0
 8003096:	d005      	beq.n	80030a4 <UART_Start_Receive_DMA+0x4c>
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003098:	2310      	movs	r3, #16
      return HAL_ERROR;
 800309a:	2001      	movs	r0, #1
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800309c:	67f3      	str	r3, [r6, #124]	@ 0x7c
      huart->RxState = HAL_UART_STATE_READY;
 800309e:	18db      	adds	r3, r3, r3
 80030a0:	67eb      	str	r3, [r5, #124]	@ 0x7c
}
 80030a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (huart->Init.Parity != UART_PARITY_NONE)
 80030a4:	6923      	ldr	r3, [r4, #16]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00b      	beq.n	80030c2 <UART_Start_Receive_DMA+0x6a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030aa:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ae:	2301      	movs	r3, #1
 80030b0:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030b4:	6822      	ldr	r2, [r4, #0]
 80030b6:	33ff      	adds	r3, #255	@ 0xff
 80030b8:	6810      	ldr	r0, [r2, #0]
 80030ba:	4303      	orrs	r3, r0
 80030bc:	6013      	str	r3, [r2, #0]
 80030be:	f381 8810 	msr	PRIMASK, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030c2:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030c6:	2301      	movs	r3, #1
 80030c8:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030cc:	6821      	ldr	r1, [r4, #0]
 80030ce:	688a      	ldr	r2, [r1, #8]
 80030d0:	431a      	orrs	r2, r3
 80030d2:	608a      	str	r2, [r1, #8]
 80030d4:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030d8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030dc:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030e0:	6822      	ldr	r2, [r4, #0]
 80030e2:	333f      	adds	r3, #63	@ 0x3f
 80030e4:	6890      	ldr	r0, [r2, #8]
 80030e6:	4303      	orrs	r3, r0
 80030e8:	6093      	str	r3, [r2, #8]
 80030ea:	f381 8810 	msr	PRIMASK, r1
  return HAL_OK;
 80030ee:	2000      	movs	r0, #0
 80030f0:	e7d7      	b.n	80030a2 <UART_Start_Receive_DMA+0x4a>
 80030f2:	46c0      	nop			@ (mov r8, r8)
 80030f4:	08002c09 	.word	0x08002c09
 80030f8:	08002be5 	.word	0x08002be5
 80030fc:	080028a7 	.word	0x080028a7

08003100 <HAL_UART_Receive_DMA>:
{
 8003100:	0003      	movs	r3, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8003102:	3004      	adds	r0, #4
{
 8003104:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8003106:	6fc4      	ldr	r4, [r0, #124]	@ 0x7c
    return HAL_BUSY;
 8003108:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 800310a:	2c20      	cmp	r4, #32
 800310c:	d125      	bne.n	800315a <HAL_UART_Receive_DMA+0x5a>
      return HAL_ERROR;
 800310e:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8003110:	2900      	cmp	r1, #0
 8003112:	d022      	beq.n	800315a <HAL_UART_Receive_DMA+0x5a>
 8003114:	2a00      	cmp	r2, #0
 8003116:	d020      	beq.n	800315a <HAL_UART_Receive_DMA+0x5a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003118:	2080      	movs	r0, #128	@ 0x80
 800311a:	689c      	ldr	r4, [r3, #8]
 800311c:	0140      	lsls	r0, r0, #5
 800311e:	4284      	cmp	r4, r0
 8003120:	d105      	bne.n	800312e <HAL_UART_Receive_DMA+0x2e>
 8003122:	6918      	ldr	r0, [r3, #16]
 8003124:	2800      	cmp	r0, #0
 8003126:	d102      	bne.n	800312e <HAL_UART_Receive_DMA+0x2e>
      return HAL_ERROR;
 8003128:	3001      	adds	r0, #1
      if ((((uint32_t)pData) & 1U) != 0U)
 800312a:	4201      	tst	r1, r0
 800312c:	d115      	bne.n	800315a <HAL_UART_Receive_DMA+0x5a>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800312e:	2000      	movs	r0, #0
 8003130:	6618      	str	r0, [r3, #96]	@ 0x60
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003132:	6818      	ldr	r0, [r3, #0]
 8003134:	6840      	ldr	r0, [r0, #4]
 8003136:	0200      	lsls	r0, r0, #8
 8003138:	d50c      	bpl.n	8003154 <HAL_UART_Receive_DMA+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800313a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800313e:	2001      	movs	r0, #1
 8003140:	f380 8810 	msr	PRIMASK, r0
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003144:	2080      	movs	r0, #128	@ 0x80
 8003146:	681c      	ldr	r4, [r3, #0]
 8003148:	04c0      	lsls	r0, r0, #19
 800314a:	6826      	ldr	r6, [r4, #0]
 800314c:	4330      	orrs	r0, r6
 800314e:	6020      	str	r0, [r4, #0]
 8003150:	f385 8810 	msr	PRIMASK, r5
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003154:	0018      	movs	r0, r3
 8003156:	f7ff ff7f 	bl	8003058 <UART_Start_Receive_DMA>
}
 800315a:	bd70      	pop	{r4, r5, r6, pc}

0800315c <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800315c:	4770      	bx	lr
	...

08003160 <USB_EnableGlobalInt>:
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003160:	1d82      	adds	r2, r0, #6
{
 8003162:	0003      	movs	r3, r0
  USBx->ISTR = 0U;
 8003164:	2000      	movs	r0, #0
 8003166:	87d0      	strh	r0, [r2, #62]	@ 0x3e
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003168:	4a01      	ldr	r2, [pc, #4]	@ (8003170 <USB_EnableGlobalInt+0x10>)
 800316a:	3302      	adds	r3, #2
 800316c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
}
 800316e:	4770      	bx	lr
 8003170:	ffffbf80 	.word	0xffffbf80

08003174 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003174:	3002      	adds	r0, #2
 8003176:	8fc3      	ldrh	r3, [r0, #62]	@ 0x3e
 8003178:	4a02      	ldr	r2, [pc, #8]	@ (8003184 <USB_DisableGlobalInt+0x10>)
 800317a:	4013      	ands	r3, r2
 800317c:	87c3      	strh	r3, [r0, #62]	@ 0x3e

  return HAL_OK;
}
 800317e:	2000      	movs	r0, #0
 8003180:	4770      	bx	lr
 8003182:	46c0      	nop			@ (mov r8, r8)
 8003184:	0000407f 	.word	0x0000407f

08003188 <USB_DevInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003188:	1c82      	adds	r2, r0, #2
{
 800318a:	0003      	movs	r3, r0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800318c:	2101      	movs	r1, #1

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800318e:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003190:	87d1      	strh	r1, [r2, #62]	@ 0x3e
{
 8003192:	b082      	sub	sp, #8
  USBx->CNTR = 0U;
 8003194:	87d0      	strh	r0, [r2, #62]	@ 0x3e

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003196:	1d9a      	adds	r2, r3, #6

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003198:	3350      	adds	r3, #80	@ 0x50
  USBx->ISTR = 0U;
 800319a:	87d0      	strh	r0, [r2, #62]	@ 0x3e
  USBx->BTABLE = BTABLE_ADDRESS;
 800319c:	8018      	strh	r0, [r3, #0]

  return HAL_OK;
}
 800319e:	b002      	add	sp, #8
 80031a0:	4770      	bx	lr
	...

080031a4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80031a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80031a6:	780e      	ldrb	r6, [r1, #0]
 80031a8:	4a7a      	ldr	r2, [pc, #488]	@ (8003394 <USB_ActivateEndpoint+0x1f0>)
 80031aa:	00b3      	lsls	r3, r6, #2
 80031ac:	18c3      	adds	r3, r0, r3
 80031ae:	881c      	ldrh	r4, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 80031b0:	78cf      	ldrb	r7, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80031b2:	4014      	ands	r4, r2
  switch (ep->type)
 80031b4:	2201      	movs	r2, #1
{
 80031b6:	0005      	movs	r5, r0
  switch (ep->type)
 80031b8:	9200      	str	r2, [sp, #0]
 80031ba:	2f03      	cmp	r7, #3
 80031bc:	d808      	bhi.n	80031d0 <USB_ActivateEndpoint+0x2c>
 80031be:	0038      	movs	r0, r7
 80031c0:	f7fc ffaa 	bl	8000118 <__gnu_thumb1_case_uqi>
 80031c4:	3c3f4202 	.word	0x3c3f4202
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80031c8:	2280      	movs	r2, #128	@ 0x80
 80031ca:	0092      	lsls	r2, r2, #2
 80031cc:	4314      	orrs	r4, r2
  HAL_StatusTypeDef ret = HAL_OK;
 80031ce:	9700      	str	r7, [sp, #0]
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80031d0:	4a71      	ldr	r2, [pc, #452]	@ (8003398 <USB_ActivateEndpoint+0x1f4>)
 80031d2:	4314      	orrs	r4, r2
 80031d4:	b2a4      	uxth	r4, r4
 80031d6:	801c      	strh	r4, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80031d8:	8818      	ldrh	r0, [r3, #0]
 80031da:	4c70      	ldr	r4, [pc, #448]	@ (800339c <USB_ActivateEndpoint+0x1f8>)
 80031dc:	4020      	ands	r0, r4
 80031de:	4330      	orrs	r0, r6
 80031e0:	4310      	orrs	r0, r2
 80031e2:	b280      	uxth	r0, r0
 80031e4:	8018      	strh	r0, [r3, #0]
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80031e6:	00f0      	lsls	r0, r6, #3
 80031e8:	4684      	mov	ip, r0
  if (ep->doublebuffer == 0U)
 80031ea:	7b08      	ldrb	r0, [r1, #12]
 80031ec:	44ac      	add	ip, r5
 80031ee:	3550      	adds	r5, #80	@ 0x50
 80031f0:	9501      	str	r5, [sp, #4]
 80031f2:	2800      	cmp	r0, #0
 80031f4:	d000      	beq.n	80031f8 <USB_ActivateEndpoint+0x54>
 80031f6:	e06b      	b.n	80032d0 <USB_ActivateEndpoint+0x12c>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80031f8:	88cd      	ldrh	r5, [r1, #6]
    if (ep->is_in != 0U)
 80031fa:	7848      	ldrb	r0, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80031fc:	086d      	lsrs	r5, r5, #1
 80031fe:	006d      	lsls	r5, r5, #1
    if (ep->is_in != 0U)
 8003200:	2800      	cmp	r0, #0
 8003202:	d023      	beq.n	800324c <USB_ActivateEndpoint+0xa8>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003204:	2080      	movs	r0, #128	@ 0x80
 8003206:	9901      	ldr	r1, [sp, #4]
 8003208:	00c0      	lsls	r0, r0, #3
 800320a:	8809      	ldrh	r1, [r1, #0]
 800320c:	4461      	add	r1, ip
 800320e:	1809      	adds	r1, r1, r0
 8003210:	800d      	strh	r5, [r1, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003212:	8819      	ldrh	r1, [r3, #0]
 8003214:	0649      	lsls	r1, r1, #25
 8003216:	d504      	bpl.n	8003222 <USB_ActivateEndpoint+0x7e>
 8003218:	8819      	ldrh	r1, [r3, #0]
 800321a:	4021      	ands	r1, r4
 800321c:	4c60      	ldr	r4, [pc, #384]	@ (80033a0 <USB_ActivateEndpoint+0x1fc>)
 800321e:	4321      	orrs	r1, r4
 8003220:	8019      	strh	r1, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003222:	4d60      	ldr	r5, [pc, #384]	@ (80033a4 <USB_ActivateEndpoint+0x200>)
 8003224:	2f01      	cmp	r7, #1
 8003226:	d100      	bne.n	800322a <USB_ActivateEndpoint+0x86>
 8003228:	e0ae      	b.n	8003388 <USB_ActivateEndpoint+0x1e4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800322a:	2120      	movs	r1, #32
 800322c:	881c      	ldrh	r4, [r3, #0]
 800322e:	402c      	ands	r4, r5
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8003230:	4061      	eors	r1, r4
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003232:	430a      	orrs	r2, r1
 8003234:	b292      	uxth	r2, r2
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 8003236:	9800      	ldr	r0, [sp, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003238:	801a      	strh	r2, [r3, #0]
}
 800323a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      wEpRegVal |= USB_EP_INTERRUPT;
 800323c:	22c0      	movs	r2, #192	@ 0xc0
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800323e:	00d2      	lsls	r2, r2, #3
 8003240:	4314      	orrs	r4, r2
  HAL_StatusTypeDef ret = HAL_OK;
 8003242:	2200      	movs	r2, #0
 8003244:	9200      	str	r2, [sp, #0]
      break;
 8003246:	e7c3      	b.n	80031d0 <USB_ActivateEndpoint+0x2c>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003248:	2280      	movs	r2, #128	@ 0x80
 800324a:	e7f8      	b.n	800323e <USB_ActivateEndpoint+0x9a>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800324c:	9801      	ldr	r0, [sp, #4]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800324e:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003250:	8807      	ldrh	r7, [r0, #0]
 8003252:	4855      	ldr	r0, [pc, #340]	@ (80033a8 <USB_ActivateEndpoint+0x204>)
 8003254:	4467      	add	r7, ip
 8003256:	183f      	adds	r7, r7, r0
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003258:	9801      	ldr	r0, [sp, #4]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800325a:	803d      	strh	r5, [r7, #0]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800325c:	8805      	ldrh	r5, [r0, #0]
 800325e:	4853      	ldr	r0, [pc, #332]	@ (80033ac <USB_ActivateEndpoint+0x208>)
 8003260:	4465      	add	r5, ip
 8003262:	182d      	adds	r5, r5, r0
 8003264:	882f      	ldrh	r7, [r5, #0]
 8003266:	05bf      	lsls	r7, r7, #22
 8003268:	0dbf      	lsrs	r7, r7, #22
 800326a:	802f      	strh	r7, [r5, #0]
 800326c:	2900      	cmp	r1, #0
 800326e:	d115      	bne.n	800329c <USB_ActivateEndpoint+0xf8>
 8003270:	2780      	movs	r7, #128	@ 0x80
 8003272:	8829      	ldrh	r1, [r5, #0]
 8003274:	023f      	lsls	r7, r7, #8
 8003276:	4339      	orrs	r1, r7
 8003278:	8029      	strh	r1, [r5, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800327a:	8819      	ldrh	r1, [r3, #0]
 800327c:	0449      	lsls	r1, r1, #17
 800327e:	d504      	bpl.n	800328a <USB_ActivateEndpoint+0xe6>
 8003280:	8819      	ldrh	r1, [r3, #0]
 8003282:	4021      	ands	r1, r4
 8003284:	4c4a      	ldr	r4, [pc, #296]	@ (80033b0 <USB_ActivateEndpoint+0x20c>)
 8003286:	4321      	orrs	r1, r4
 8003288:	8019      	strh	r1, [r3, #0]
      if (ep->num == 0U)
 800328a:	494a      	ldr	r1, [pc, #296]	@ (80033b4 <USB_ActivateEndpoint+0x210>)
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800328c:	881c      	ldrh	r4, [r3, #0]
 800328e:	400c      	ands	r4, r1
 8003290:	21c0      	movs	r1, #192	@ 0xc0
      if (ep->num == 0U)
 8003292:	2e00      	cmp	r6, #0
 8003294:	d000      	beq.n	8003298 <USB_ActivateEndpoint+0xf4>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8003296:	2180      	movs	r1, #128	@ 0x80
 8003298:	0189      	lsls	r1, r1, #6
 800329a:	e7c9      	b.n	8003230 <USB_ActivateEndpoint+0x8c>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800329c:	293e      	cmp	r1, #62	@ 0x3e
 800329e:	d808      	bhi.n	80032b2 <USB_ActivateEndpoint+0x10e>
 80032a0:	2001      	movs	r0, #1
 80032a2:	084f      	lsrs	r7, r1, #1
 80032a4:	4001      	ands	r1, r0
 80032a6:	187f      	adds	r7, r7, r1
 80032a8:	8829      	ldrh	r1, [r5, #0]
 80032aa:	02bf      	lsls	r7, r7, #10
 80032ac:	4339      	orrs	r1, r7
 80032ae:	b289      	uxth	r1, r1
 80032b0:	e7e2      	b.n	8003278 <USB_ActivateEndpoint+0xd4>
 80032b2:	201f      	movs	r0, #31
 80032b4:	094f      	lsrs	r7, r1, #5
 80032b6:	4001      	ands	r1, r0
 80032b8:	0008      	movs	r0, r1
 80032ba:	4241      	negs	r1, r0
 80032bc:	4141      	adcs	r1, r0
 80032be:	1a7f      	subs	r7, r7, r1
 80032c0:	8829      	ldrh	r1, [r5, #0]
 80032c2:	02bf      	lsls	r7, r7, #10
 80032c4:	4339      	orrs	r1, r7
 80032c6:	4f3c      	ldr	r7, [pc, #240]	@ (80033b8 <USB_ActivateEndpoint+0x214>)
 80032c8:	430f      	orrs	r7, r1
 80032ca:	b2bf      	uxth	r7, r7
 80032cc:	802f      	strh	r7, [r5, #0]
 80032ce:	e7d4      	b.n	800327a <USB_ActivateEndpoint+0xd6>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80032d0:	881d      	ldrh	r5, [r3, #0]
    if (ep->type == EP_TYPE_BULK)
 80032d2:	2f02      	cmp	r7, #2
 80032d4:	d13a      	bne.n	800334c <USB_ActivateEndpoint+0x1a8>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80032d6:	4e39      	ldr	r6, [pc, #228]	@ (80033bc <USB_ActivateEndpoint+0x218>)
 80032d8:	4025      	ands	r5, r4
 80032da:	4335      	orrs	r5, r6
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80032dc:	9801      	ldr	r0, [sp, #4]
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80032de:	801d      	strh	r5, [r3, #0]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80032e0:	8805      	ldrh	r5, [r0, #0]
 80032e2:	2080      	movs	r0, #128	@ 0x80
 80032e4:	890e      	ldrh	r6, [r1, #8]
 80032e6:	4465      	add	r5, ip
 80032e8:	00c0      	lsls	r0, r0, #3
 80032ea:	0876      	lsrs	r6, r6, #1
 80032ec:	182d      	adds	r5, r5, r0
 80032ee:	0076      	lsls	r6, r6, #1
 80032f0:	9801      	ldr	r0, [sp, #4]
 80032f2:	802e      	strh	r6, [r5, #0]
 80032f4:	8805      	ldrh	r5, [r0, #0]
 80032f6:	894e      	ldrh	r6, [r1, #10]
 80032f8:	482b      	ldr	r0, [pc, #172]	@ (80033a8 <USB_ActivateEndpoint+0x204>)
 80032fa:	4465      	add	r5, ip
 80032fc:	0876      	lsrs	r6, r6, #1
 80032fe:	182d      	adds	r5, r5, r0
 8003300:	0076      	lsls	r6, r6, #1
 8003302:	802e      	strh	r6, [r5, #0]
    if (ep->is_in == 0U)
 8003304:	7849      	ldrb	r1, [r1, #1]
 8003306:	4e27      	ldr	r6, [pc, #156]	@ (80033a4 <USB_ActivateEndpoint+0x200>)
 8003308:	468c      	mov	ip, r1
 800330a:	2180      	movs	r1, #128	@ 0x80
 800330c:	4660      	mov	r0, ip
 800330e:	4d29      	ldr	r5, [pc, #164]	@ (80033b4 <USB_ActivateEndpoint+0x210>)
 8003310:	01c9      	lsls	r1, r1, #7
 8003312:	2800      	cmp	r0, #0
 8003314:	d11f      	bne.n	8003356 <USB_ActivateEndpoint+0x1b2>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003316:	881f      	ldrh	r7, [r3, #0]
 8003318:	420f      	tst	r7, r1
 800331a:	d004      	beq.n	8003326 <USB_ActivateEndpoint+0x182>
 800331c:	8819      	ldrh	r1, [r3, #0]
 800331e:	4f24      	ldr	r7, [pc, #144]	@ (80033b0 <USB_ActivateEndpoint+0x20c>)
 8003320:	4021      	ands	r1, r4
 8003322:	4339      	orrs	r1, r7
 8003324:	8019      	strh	r1, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003326:	8819      	ldrh	r1, [r3, #0]
 8003328:	0649      	lsls	r1, r1, #25
 800332a:	d504      	bpl.n	8003336 <USB_ActivateEndpoint+0x192>
 800332c:	8819      	ldrh	r1, [r3, #0]
 800332e:	4021      	ands	r1, r4
 8003330:	4c1b      	ldr	r4, [pc, #108]	@ (80033a0 <USB_ActivateEndpoint+0x1fc>)
 8003332:	4321      	orrs	r1, r4
 8003334:	8019      	strh	r1, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003336:	21c0      	movs	r1, #192	@ 0xc0
 8003338:	881c      	ldrh	r4, [r3, #0]
 800333a:	0189      	lsls	r1, r1, #6
 800333c:	402c      	ands	r4, r5
 800333e:	4061      	eors	r1, r4
 8003340:	4311      	orrs	r1, r2
 8003342:	b289      	uxth	r1, r1
 8003344:	8019      	strh	r1, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003346:	8819      	ldrh	r1, [r3, #0]
 8003348:	4031      	ands	r1, r6
 800334a:	e772      	b.n	8003232 <USB_ActivateEndpoint+0x8e>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800334c:	4e1c      	ldr	r6, [pc, #112]	@ (80033c0 <USB_ActivateEndpoint+0x21c>)
 800334e:	4035      	ands	r5, r6
 8003350:	4315      	orrs	r5, r2
 8003352:	b2ad      	uxth	r5, r5
 8003354:	e7c2      	b.n	80032dc <USB_ActivateEndpoint+0x138>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003356:	8818      	ldrh	r0, [r3, #0]
 8003358:	4208      	tst	r0, r1
 800335a:	d004      	beq.n	8003366 <USB_ActivateEndpoint+0x1c2>
 800335c:	8819      	ldrh	r1, [r3, #0]
 800335e:	4814      	ldr	r0, [pc, #80]	@ (80033b0 <USB_ActivateEndpoint+0x20c>)
 8003360:	4021      	ands	r1, r4
 8003362:	4301      	orrs	r1, r0
 8003364:	8019      	strh	r1, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003366:	8819      	ldrh	r1, [r3, #0]
 8003368:	0649      	lsls	r1, r1, #25
 800336a:	d504      	bpl.n	8003376 <USB_ActivateEndpoint+0x1d2>
 800336c:	8819      	ldrh	r1, [r3, #0]
 800336e:	4021      	ands	r1, r4
 8003370:	4c0b      	ldr	r4, [pc, #44]	@ (80033a0 <USB_ActivateEndpoint+0x1fc>)
 8003372:	4321      	orrs	r1, r4
 8003374:	8019      	strh	r1, [r3, #0]
      if (ep->type != EP_TYPE_ISOC)
 8003376:	2f01      	cmp	r7, #1
 8003378:	d009      	beq.n	800338e <USB_ActivateEndpoint+0x1ea>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800337a:	2120      	movs	r1, #32
 800337c:	881c      	ldrh	r4, [r3, #0]
 800337e:	4034      	ands	r4, r6
 8003380:	4061      	eors	r1, r4
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003382:	4311      	orrs	r1, r2
 8003384:	b289      	uxth	r1, r1
 8003386:	8019      	strh	r1, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003388:	8819      	ldrh	r1, [r3, #0]
 800338a:	4029      	ands	r1, r5
 800338c:	e751      	b.n	8003232 <USB_ActivateEndpoint+0x8e>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800338e:	8819      	ldrh	r1, [r3, #0]
 8003390:	4031      	ands	r1, r6
 8003392:	e7f6      	b.n	8003382 <USB_ActivateEndpoint+0x1de>
 8003394:	ffff898f 	.word	0xffff898f
 8003398:	ffff8080 	.word	0xffff8080
 800339c:	ffff8f8f 	.word	0xffff8f8f
 80033a0:	000080c0 	.word	0x000080c0
 80033a4:	ffff8fbf 	.word	0xffff8fbf
 80033a8:	00000404 	.word	0x00000404
 80033ac:	00000406 	.word	0x00000406
 80033b0:	0000c080 	.word	0x0000c080
 80033b4:	ffffbf8f 	.word	0xffffbf8f
 80033b8:	ffff8000 	.word	0xffff8000
 80033bc:	00008180 	.word	0x00008180
 80033c0:	ffff8e8f 	.word	0xffff8e8f

080033c4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80033c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80033c6:	780b      	ldrb	r3, [r1, #0]
    if (ep->is_in != 0U)
 80033c8:	784a      	ldrb	r2, [r1, #1]
  if (ep->doublebuffer == 0U)
 80033ca:	7b09      	ldrb	r1, [r1, #12]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	18c0      	adds	r0, r0, r3
 80033d0:	4b31      	ldr	r3, [pc, #196]	@ (8003498 <USB_DeactivateEndpoint+0xd4>)
  if (ep->doublebuffer == 0U)
 80033d2:	2900      	cmp	r1, #0
 80033d4:	d11a      	bne.n	800340c <USB_DeactivateEndpoint+0x48>
    if (ep->is_in != 0U)
 80033d6:	2a00      	cmp	r2, #0
 80033d8:	d00c      	beq.n	80033f4 <USB_DeactivateEndpoint+0x30>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80033da:	8802      	ldrh	r2, [r0, #0]
 80033dc:	0652      	lsls	r2, r2, #25
 80033de:	d505      	bpl.n	80033ec <USB_DeactivateEndpoint+0x28>
 80033e0:	8802      	ldrh	r2, [r0, #0]
 80033e2:	492e      	ldr	r1, [pc, #184]	@ (800349c <USB_DeactivateEndpoint+0xd8>)
 80033e4:	400a      	ands	r2, r1
 80033e6:	492e      	ldr	r1, [pc, #184]	@ (80034a0 <USB_DeactivateEndpoint+0xdc>)
 80033e8:	430a      	orrs	r2, r1
 80033ea:	8002      	strh	r2, [r0, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80033ec:	8802      	ldrh	r2, [r0, #0]
 80033ee:	492d      	ldr	r1, [pc, #180]	@ (80034a4 <USB_DeactivateEndpoint+0xe0>)
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
      PCD_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80033f0:	400a      	ands	r2, r1
 80033f2:	e02f      	b.n	8003454 <USB_DeactivateEndpoint+0x90>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80033f4:	8802      	ldrh	r2, [r0, #0]
 80033f6:	0452      	lsls	r2, r2, #17
 80033f8:	d505      	bpl.n	8003406 <USB_DeactivateEndpoint+0x42>
 80033fa:	8802      	ldrh	r2, [r0, #0]
 80033fc:	4927      	ldr	r1, [pc, #156]	@ (800349c <USB_DeactivateEndpoint+0xd8>)
 80033fe:	400a      	ands	r2, r1
 8003400:	4929      	ldr	r1, [pc, #164]	@ (80034a8 <USB_DeactivateEndpoint+0xe4>)
 8003402:	430a      	orrs	r2, r1
 8003404:	8002      	strh	r2, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003406:	8802      	ldrh	r2, [r0, #0]
 8003408:	4928      	ldr	r1, [pc, #160]	@ (80034ac <USB_DeactivateEndpoint+0xe8>)
 800340a:	e7f1      	b.n	80033f0 <USB_DeactivateEndpoint+0x2c>
    if (ep->is_in == 0U)
 800340c:	2780      	movs	r7, #128	@ 0x80
 800340e:	4e23      	ldr	r6, [pc, #140]	@ (800349c <USB_DeactivateEndpoint+0xd8>)
 8003410:	4d24      	ldr	r5, [pc, #144]	@ (80034a4 <USB_DeactivateEndpoint+0xe0>)
 8003412:	4926      	ldr	r1, [pc, #152]	@ (80034ac <USB_DeactivateEndpoint+0xe8>)
 8003414:	01ff      	lsls	r7, r7, #7
 8003416:	2a00      	cmp	r2, #0
 8003418:	d121      	bne.n	800345e <USB_DeactivateEndpoint+0x9a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800341a:	8802      	ldrh	r2, [r0, #0]
 800341c:	423a      	tst	r2, r7
 800341e:	d004      	beq.n	800342a <USB_DeactivateEndpoint+0x66>
 8003420:	8802      	ldrh	r2, [r0, #0]
 8003422:	4c21      	ldr	r4, [pc, #132]	@ (80034a8 <USB_DeactivateEndpoint+0xe4>)
 8003424:	4032      	ands	r2, r6
 8003426:	4322      	orrs	r2, r4
 8003428:	8002      	strh	r2, [r0, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800342a:	8802      	ldrh	r2, [r0, #0]
 800342c:	4c20      	ldr	r4, [pc, #128]	@ (80034b0 <USB_DeactivateEndpoint+0xec>)
 800342e:	0652      	lsls	r2, r2, #25
 8003430:	d504      	bpl.n	800343c <USB_DeactivateEndpoint+0x78>
 8003432:	8802      	ldrh	r2, [r0, #0]
 8003434:	4032      	ands	r2, r6
 8003436:	4322      	orrs	r2, r4
 8003438:	b292      	uxth	r2, r2
 800343a:	8002      	strh	r2, [r0, #0]
      PCD_TX_DTOG(USBx, ep->num);
 800343c:	8802      	ldrh	r2, [r0, #0]
 800343e:	4032      	ands	r2, r6
 8003440:	4314      	orrs	r4, r2
 8003442:	b2a4      	uxth	r4, r4
 8003444:	8004      	strh	r4, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003446:	8802      	ldrh	r2, [r0, #0]
 8003448:	400a      	ands	r2, r1
 800344a:	431a      	orrs	r2, r3
 800344c:	b292      	uxth	r2, r2
 800344e:	8002      	strh	r2, [r0, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003450:	8802      	ldrh	r2, [r0, #0]
 8003452:	402a      	ands	r2, r5
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003454:	4313      	orrs	r3, r2
 8003456:	b29b      	uxth	r3, r3
 8003458:	8003      	strh	r3, [r0, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 800345a:	2000      	movs	r0, #0
 800345c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800345e:	8802      	ldrh	r2, [r0, #0]
 8003460:	4c14      	ldr	r4, [pc, #80]	@ (80034b4 <USB_DeactivateEndpoint+0xf0>)
 8003462:	423a      	tst	r2, r7
 8003464:	d004      	beq.n	8003470 <USB_DeactivateEndpoint+0xac>
 8003466:	8802      	ldrh	r2, [r0, #0]
 8003468:	4032      	ands	r2, r6
 800346a:	4322      	orrs	r2, r4
 800346c:	b292      	uxth	r2, r2
 800346e:	8002      	strh	r2, [r0, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003470:	8802      	ldrh	r2, [r0, #0]
 8003472:	0652      	lsls	r2, r2, #25
 8003474:	d504      	bpl.n	8003480 <USB_DeactivateEndpoint+0xbc>
 8003476:	8802      	ldrh	r2, [r0, #0]
 8003478:	4f09      	ldr	r7, [pc, #36]	@ (80034a0 <USB_DeactivateEndpoint+0xdc>)
 800347a:	4032      	ands	r2, r6
 800347c:	433a      	orrs	r2, r7
 800347e:	8002      	strh	r2, [r0, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003480:	8802      	ldrh	r2, [r0, #0]
 8003482:	4032      	ands	r2, r6
 8003484:	4314      	orrs	r4, r2
 8003486:	b2a4      	uxth	r4, r4
 8003488:	8004      	strh	r4, [r0, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800348a:	8802      	ldrh	r2, [r0, #0]
 800348c:	402a      	ands	r2, r5
 800348e:	431a      	orrs	r2, r3
 8003490:	b292      	uxth	r2, r2
 8003492:	8002      	strh	r2, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003494:	8802      	ldrh	r2, [r0, #0]
 8003496:	e7ab      	b.n	80033f0 <USB_DeactivateEndpoint+0x2c>
 8003498:	ffff8080 	.word	0xffff8080
 800349c:	ffff8f8f 	.word	0xffff8f8f
 80034a0:	000080c0 	.word	0x000080c0
 80034a4:	ffff8fbf 	.word	0xffff8fbf
 80034a8:	0000c080 	.word	0x0000c080
 80034ac:	ffffbf8f 	.word	0xffffbf8f
 80034b0:	ffff80c0 	.word	0xffff80c0
 80034b4:	ffffc080 	.word	0xffffc080

080034b8 <USB_EPSetStall>:
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80034b8:	780b      	ldrb	r3, [r1, #0]
 80034ba:	4a0c      	ldr	r2, [pc, #48]	@ (80034ec <USB_EPSetStall+0x34>)
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	18c0      	adds	r0, r0, r3
  if (ep->is_in != 0U)
 80034c0:	784b      	ldrb	r3, [r1, #1]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80034c2:	8801      	ldrh	r1, [r0, #0]
  if (ep->is_in != 0U)
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d008      	beq.n	80034da <USB_EPSetStall+0x22>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80034c8:	4b09      	ldr	r3, [pc, #36]	@ (80034f0 <USB_EPSetStall+0x38>)
 80034ca:	4019      	ands	r1, r3
 80034cc:	2310      	movs	r3, #16
 80034ce:	404b      	eors	r3, r1
 80034d0:	4313      	orrs	r3, r2
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	8003      	strh	r3, [r0, #0]
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
 80034d6:	2000      	movs	r0, #0
 80034d8:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80034da:	4b06      	ldr	r3, [pc, #24]	@ (80034f4 <USB_EPSetStall+0x3c>)
 80034dc:	4019      	ands	r1, r3
 80034de:	2380      	movs	r3, #128	@ 0x80
 80034e0:	015b      	lsls	r3, r3, #5
 80034e2:	404b      	eors	r3, r1
 80034e4:	431a      	orrs	r2, r3
 80034e6:	b292      	uxth	r2, r2
 80034e8:	8002      	strh	r2, [r0, #0]
 80034ea:	e7f4      	b.n	80034d6 <USB_EPSetStall+0x1e>
 80034ec:	ffff8080 	.word	0xffff8080
 80034f0:	ffff8fbf 	.word	0xffff8fbf
 80034f4:	ffffbf8f 	.word	0xffffbf8f

080034f8 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 80034f8:	7b0b      	ldrb	r3, [r1, #12]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d119      	bne.n	8003532 <USB_EPClearStall+0x3a>
  {
    if (ep->is_in != 0U)
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80034fe:	780b      	ldrb	r3, [r1, #0]
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	18c0      	adds	r0, r0, r3
    if (ep->is_in != 0U)
 8003504:	784b      	ldrb	r3, [r1, #1]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d015      	beq.n	8003536 <USB_EPClearStall+0x3e>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800350a:	8803      	ldrh	r3, [r0, #0]
 800350c:	065b      	lsls	r3, r3, #25
 800350e:	d505      	bpl.n	800351c <USB_EPClearStall+0x24>
 8003510:	8803      	ldrh	r3, [r0, #0]
 8003512:	4a10      	ldr	r2, [pc, #64]	@ (8003554 <USB_EPClearStall+0x5c>)
 8003514:	4013      	ands	r3, r2
 8003516:	4a10      	ldr	r2, [pc, #64]	@ (8003558 <USB_EPClearStall+0x60>)
 8003518:	4313      	orrs	r3, r2
 800351a:	8003      	strh	r3, [r0, #0]

      if (ep->type != EP_TYPE_ISOC)
 800351c:	78cb      	ldrb	r3, [r1, #3]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d007      	beq.n	8003532 <USB_EPClearStall+0x3a>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003522:	4b0e      	ldr	r3, [pc, #56]	@ (800355c <USB_EPClearStall+0x64>)
 8003524:	8802      	ldrh	r2, [r0, #0]
 8003526:	401a      	ands	r2, r3
 8003528:	2320      	movs	r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800352a:	4053      	eors	r3, r2
 800352c:	4a0c      	ldr	r2, [pc, #48]	@ (8003560 <USB_EPClearStall+0x68>)
 800352e:	4313      	orrs	r3, r2
 8003530:	8003      	strh	r3, [r0, #0]
    }
  }

  return HAL_OK;
}
 8003532:	2000      	movs	r0, #0
 8003534:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003536:	8803      	ldrh	r3, [r0, #0]
 8003538:	045b      	lsls	r3, r3, #17
 800353a:	d505      	bpl.n	8003548 <USB_EPClearStall+0x50>
 800353c:	8803      	ldrh	r3, [r0, #0]
 800353e:	4a05      	ldr	r2, [pc, #20]	@ (8003554 <USB_EPClearStall+0x5c>)
 8003540:	4013      	ands	r3, r2
 8003542:	4a08      	ldr	r2, [pc, #32]	@ (8003564 <USB_EPClearStall+0x6c>)
 8003544:	4313      	orrs	r3, r2
 8003546:	8003      	strh	r3, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003548:	4b07      	ldr	r3, [pc, #28]	@ (8003568 <USB_EPClearStall+0x70>)
 800354a:	8802      	ldrh	r2, [r0, #0]
 800354c:	401a      	ands	r2, r3
 800354e:	23c0      	movs	r3, #192	@ 0xc0
 8003550:	019b      	lsls	r3, r3, #6
 8003552:	e7ea      	b.n	800352a <USB_EPClearStall+0x32>
 8003554:	ffff8f8f 	.word	0xffff8f8f
 8003558:	000080c0 	.word	0x000080c0
 800355c:	ffff8fbf 	.word	0xffff8fbf
 8003560:	00008080 	.word	0x00008080
 8003564:	0000c080 	.word	0x0000c080
 8003568:	ffffbf8f 	.word	0xffffbf8f

0800356c <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 800356c:	2900      	cmp	r1, #0
 800356e:	d102      	bne.n	8003576 <USB_SetDevAddress+0xa>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8003570:	2380      	movs	r3, #128	@ 0x80
 8003572:	304c      	adds	r0, #76	@ 0x4c
 8003574:	8003      	strh	r3, [r0, #0]
  }

  return HAL_OK;
}
 8003576:	2000      	movs	r0, #0
 8003578:	4770      	bx	lr

0800357a <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800357a:	2280      	movs	r2, #128	@ 0x80
 800357c:	3058      	adds	r0, #88	@ 0x58
 800357e:	8803      	ldrh	r3, [r0, #0]
 8003580:	0212      	lsls	r2, r2, #8
 8003582:	4313      	orrs	r3, r2
 8003584:	8003      	strh	r3, [r0, #0]

  return HAL_OK;
}
 8003586:	2000      	movs	r0, #0
 8003588:	4770      	bx	lr

0800358a <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800358a:	3006      	adds	r0, #6
 800358c:	8fc0      	ldrh	r0, [r0, #62]	@ 0x3e
 800358e:	b280      	uxth	r0, r0
  return tmpreg;
}
 8003590:	4770      	bx	lr

08003592 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003592:	b530      	push	{r4, r5, lr}
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003594:	2480      	movs	r4, #128	@ 0x80
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003596:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003598:	00e4      	lsls	r4, r4, #3
 800359a:	1912      	adds	r2, r2, r4
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800359c:	085b      	lsrs	r3, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800359e:	1880      	adds	r0, r0, r2

  for (count = n; count != 0U; count--)
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	18cb      	adds	r3, r1, r3
 80035a4:	1a40      	subs	r0, r0, r1
 80035a6:	180c      	adds	r4, r1, r0
 80035a8:	428b      	cmp	r3, r1
 80035aa:	d100      	bne.n	80035ae <USB_WritePMA+0x1c>
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
  }
}
 80035ac:	bd30      	pop	{r4, r5, pc}
    WrVal |= (uint16_t)pBuf[1] << 8;
 80035ae:	784a      	ldrb	r2, [r1, #1]
 80035b0:	780d      	ldrb	r5, [r1, #0]
 80035b2:	0212      	lsls	r2, r2, #8
 80035b4:	432a      	orrs	r2, r5
    *pdwVal = (WrVal & 0xFFFFU);
 80035b6:	8022      	strh	r2, [r4, #0]
    pBuf++;
 80035b8:	3102      	adds	r1, #2
  for (count = n; count != 0U; count--)
 80035ba:	e7f4      	b.n	80035a6 <USB_WritePMA+0x14>

080035bc <USB_EPStartXfer>:
{
 80035bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035be:	000c      	movs	r4, r1
  if (ep->is_in == 1U)
 80035c0:	7849      	ldrb	r1, [r1, #1]
{
 80035c2:	0005      	movs	r5, r0
    if (ep->doublebuffer == 0U)
 80035c4:	7b22      	ldrb	r2, [r4, #12]
{
 80035c6:	b087      	sub	sp, #28
  if (ep->is_in == 1U)
 80035c8:	2901      	cmp	r1, #1
 80035ca:	d000      	beq.n	80035ce <USB_EPStartXfer+0x12>
 80035cc:	e11b      	b.n	8003806 <USB_EPStartXfer+0x24a>
    if (ep->xfer_len > ep->maxpacket)
 80035ce:	6923      	ldr	r3, [r4, #16]
 80035d0:	69a7      	ldr	r7, [r4, #24]
 80035d2:	9302      	str	r3, [sp, #8]
 80035d4:	429f      	cmp	r7, r3
 80035d6:	d900      	bls.n	80035da <USB_EPStartXfer+0x1e>
 80035d8:	001f      	movs	r7, r3
    if (ep->doublebuffer == 0U)
 80035da:	002b      	movs	r3, r5
 80035dc:	3350      	adds	r3, #80	@ 0x50
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80035de:	6961      	ldr	r1, [r4, #20]
 80035e0:	9301      	str	r3, [sp, #4]
    if (ep->doublebuffer == 0U)
 80035e2:	2a00      	cmp	r2, #0
 80035e4:	d11d      	bne.n	8003622 <USB_EPStartXfer+0x66>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80035e6:	b2bf      	uxth	r7, r7
 80035e8:	003b      	movs	r3, r7
 80035ea:	88e2      	ldrh	r2, [r4, #6]
 80035ec:	0028      	movs	r0, r5
 80035ee:	f7ff ffd0 	bl	8003592 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80035f2:	9b01      	ldr	r3, [sp, #4]
 80035f4:	4abe      	ldr	r2, [pc, #760]	@ (80038f0 <USB_EPStartXfer+0x334>)
 80035f6:	8819      	ldrh	r1, [r3, #0]
 80035f8:	7823      	ldrb	r3, [r4, #0]
 80035fa:	18aa      	adds	r2, r5, r2
 80035fc:	00db      	lsls	r3, r3, #3
 80035fe:	1852      	adds	r2, r2, r1
 8003600:	189b      	adds	r3, r3, r2
 8003602:	801f      	strh	r7, [r3, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003604:	7823      	ldrb	r3, [r4, #0]
 8003606:	4abb      	ldr	r2, [pc, #748]	@ (80038f4 <USB_EPStartXfer+0x338>)
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	18eb      	adds	r3, r5, r3
 800360c:	8819      	ldrh	r1, [r3, #0]
 800360e:	4011      	ands	r1, r2
 8003610:	2230      	movs	r2, #48	@ 0x30
 8003612:	404a      	eors	r2, r1
 8003614:	49b8      	ldr	r1, [pc, #736]	@ (80038f8 <USB_EPStartXfer+0x33c>)
 8003616:	430a      	orrs	r2, r1
 8003618:	b292      	uxth	r2, r2
 800361a:	801a      	strh	r2, [r3, #0]
  return HAL_OK;
 800361c:	2000      	movs	r0, #0
}
 800361e:	b007      	add	sp, #28
 8003620:	bdf0      	pop	{r4, r5, r6, r7, pc}
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003622:	7822      	ldrb	r2, [r4, #0]
        if (ep->xfer_len_db > ep->maxpacket)
 8003624:	6a26      	ldr	r6, [r4, #32]
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003626:	0093      	lsls	r3, r2, #2
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003628:	00d2      	lsls	r2, r2, #3
 800362a:	9203      	str	r2, [sp, #12]
      if (ep->type == EP_TYPE_BULK)
 800362c:	78e0      	ldrb	r0, [r4, #3]
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800362e:	18eb      	adds	r3, r5, r3
      if (ep->type == EP_TYPE_BULK)
 8003630:	2802      	cmp	r0, #2
 8003632:	d000      	beq.n	8003636 <USB_EPStartXfer+0x7a>
 8003634:	e0d1      	b.n	80037da <USB_EPStartXfer+0x21e>
        if (ep->xfer_len_db > ep->maxpacket)
 8003636:	9a02      	ldr	r2, [sp, #8]
 8003638:	42b2      	cmp	r2, r6
 800363a:	d300      	bcc.n	800363e <USB_EPStartXfer+0x82>
 800363c:	e0bb      	b.n	80037b6 <USB_EPStartXfer+0x1fa>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800363e:	881a      	ldrh	r2, [r3, #0]
 8003640:	48ae      	ldr	r0, [pc, #696]	@ (80038fc <USB_EPStartXfer+0x340>)
          ep->xfer_len_db -= len;
 8003642:	1bf6      	subs	r6, r6, r7
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003644:	4010      	ands	r0, r2
 8003646:	4aae      	ldr	r2, [pc, #696]	@ (8003900 <USB_EPStartXfer+0x344>)
 8003648:	4310      	orrs	r0, r2
 800364a:	8018      	strh	r0, [r3, #0]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800364c:	881b      	ldrh	r3, [r3, #0]
 800364e:	2040      	movs	r0, #64	@ 0x40
 8003650:	469c      	mov	ip, r3
 8003652:	4662      	mov	r2, ip
 8003654:	4002      	ands	r2, r0
 8003656:	9205      	str	r2, [sp, #20]
 8003658:	4662      	mov	r2, ip
            ep->xfer_buff += len;
 800365a:	19cb      	adds	r3, r1, r7
 800365c:	9304      	str	r3, [sp, #16]
          ep->xfer_len_db -= len;
 800365e:	6226      	str	r6, [r4, #32]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003660:	b2bb      	uxth	r3, r7
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003662:	4202      	tst	r2, r0
 8003664:	d055      	beq.n	8003712 <USB_EPStartXfer+0x156>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003666:	9a01      	ldr	r2, [sp, #4]
 8003668:	8812      	ldrh	r2, [r2, #0]
 800366a:	4694      	mov	ip, r2
 800366c:	4aa5      	ldr	r2, [pc, #660]	@ (8003904 <USB_EPStartXfer+0x348>)
 800366e:	18a8      	adds	r0, r5, r2
 8003670:	9a03      	ldr	r2, [sp, #12]
 8003672:	4460      	add	r0, ip
 8003674:	1882      	adds	r2, r0, r2
 8003676:	8013      	strh	r3, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003678:	8962      	ldrh	r2, [r4, #10]
 800367a:	0028      	movs	r0, r5
 800367c:	f7ff ff89 	bl	8003592 <USB_WritePMA>
            ep->xfer_buff += len;
 8003680:	9b04      	ldr	r3, [sp, #16]
            if (ep->xfer_len_db > ep->maxpacket)
 8003682:	9a02      	ldr	r2, [sp, #8]
            ep->xfer_buff += len;
 8003684:	6163      	str	r3, [r4, #20]
              ep->xfer_len_db = 0U;
 8003686:	2300      	movs	r3, #0
            if (ep->xfer_len_db > ep->maxpacket)
 8003688:	42b2      	cmp	r2, r6
 800368a:	d201      	bcs.n	8003690 <USB_EPStartXfer+0xd4>
              ep->xfer_len_db -= len;
 800368c:	1bf3      	subs	r3, r6, r7
 800368e:	003e      	movs	r6, r7
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003690:	7862      	ldrb	r2, [r4, #1]
 8003692:	6223      	str	r3, [r4, #32]
 8003694:	b2b3      	uxth	r3, r6
 8003696:	2a00      	cmp	r2, #0
 8003698:	d12e      	bne.n	80036f8 <USB_EPStartXfer+0x13c>
 800369a:	9a01      	ldr	r2, [sp, #4]
 800369c:	4994      	ldr	r1, [pc, #592]	@ (80038f0 <USB_EPStartXfer+0x334>)
 800369e:	8810      	ldrh	r0, [r2, #0]
 80036a0:	7822      	ldrb	r2, [r4, #0]
 80036a2:	1869      	adds	r1, r5, r1
 80036a4:	1809      	adds	r1, r1, r0
 80036a6:	00d2      	lsls	r2, r2, #3
 80036a8:	1852      	adds	r2, r2, r1
 80036aa:	8811      	ldrh	r1, [r2, #0]
 80036ac:	0589      	lsls	r1, r1, #22
 80036ae:	0d89      	lsrs	r1, r1, #22
 80036b0:	8011      	strh	r1, [r2, #0]
 80036b2:	2e00      	cmp	r6, #0
 80036b4:	d10a      	bne.n	80036cc <USB_EPStartXfer+0x110>
 80036b6:	2080      	movs	r0, #128	@ 0x80
 80036b8:	8811      	ldrh	r1, [r2, #0]
 80036ba:	0200      	lsls	r0, r0, #8
 80036bc:	4301      	orrs	r1, r0
 80036be:	8011      	strh	r1, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80036c0:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80036c2:	9904      	ldr	r1, [sp, #16]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80036c4:	0028      	movs	r0, r5
 80036c6:	f7ff ff64 	bl	8003592 <USB_WritePMA>
 80036ca:	e79b      	b.n	8003604 <USB_EPStartXfer+0x48>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80036cc:	2e3e      	cmp	r6, #62	@ 0x3e
 80036ce:	d808      	bhi.n	80036e2 <USB_EPStartXfer+0x126>
 80036d0:	2101      	movs	r1, #1
 80036d2:	0870      	lsrs	r0, r6, #1
 80036d4:	4031      	ands	r1, r6
 80036d6:	1840      	adds	r0, r0, r1
 80036d8:	8811      	ldrh	r1, [r2, #0]
 80036da:	0280      	lsls	r0, r0, #10
 80036dc:	4301      	orrs	r1, r0
 80036de:	b289      	uxth	r1, r1
 80036e0:	e7ed      	b.n	80036be <USB_EPStartXfer+0x102>
 80036e2:	201f      	movs	r0, #31
 80036e4:	4030      	ands	r0, r6
 80036e6:	0971      	lsrs	r1, r6, #5
 80036e8:	4246      	negs	r6, r0
 80036ea:	4170      	adcs	r0, r6
 80036ec:	1a09      	subs	r1, r1, r0
 80036ee:	8810      	ldrh	r0, [r2, #0]
 80036f0:	0289      	lsls	r1, r1, #10
 80036f2:	4308      	orrs	r0, r1
 80036f4:	4984      	ldr	r1, [pc, #528]	@ (8003908 <USB_EPStartXfer+0x34c>)
 80036f6:	e7f1      	b.n	80036dc <USB_EPStartXfer+0x120>
 80036f8:	2a01      	cmp	r2, #1
 80036fa:	d1e1      	bne.n	80036c0 <USB_EPStartXfer+0x104>
 80036fc:	002a      	movs	r2, r5
 80036fe:	497c      	ldr	r1, [pc, #496]	@ (80038f0 <USB_EPStartXfer+0x334>)
 8003700:	3250      	adds	r2, #80	@ 0x50
 8003702:	8810      	ldrh	r0, [r2, #0]
 8003704:	7822      	ldrb	r2, [r4, #0]
 8003706:	1869      	adds	r1, r5, r1
 8003708:	00d2      	lsls	r2, r2, #3
 800370a:	1809      	adds	r1, r1, r0
 800370c:	1852      	adds	r2, r2, r1
 800370e:	8013      	strh	r3, [r2, #0]
 8003710:	e7d6      	b.n	80036c0 <USB_EPStartXfer+0x104>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003712:	9a01      	ldr	r2, [sp, #4]
 8003714:	8812      	ldrh	r2, [r2, #0]
 8003716:	4694      	mov	ip, r2
 8003718:	4a75      	ldr	r2, [pc, #468]	@ (80038f0 <USB_EPStartXfer+0x334>)
 800371a:	18a8      	adds	r0, r5, r2
 800371c:	9a03      	ldr	r2, [sp, #12]
 800371e:	4460      	add	r0, ip
 8003720:	1882      	adds	r2, r0, r2
 8003722:	8013      	strh	r3, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003724:	8922      	ldrh	r2, [r4, #8]
 8003726:	0028      	movs	r0, r5
 8003728:	f7ff ff33 	bl	8003592 <USB_WritePMA>
            ep->xfer_buff += len;
 800372c:	9b04      	ldr	r3, [sp, #16]
            if (ep->xfer_len_db > ep->maxpacket)
 800372e:	9a02      	ldr	r2, [sp, #8]
            ep->xfer_buff += len;
 8003730:	6163      	str	r3, [r4, #20]
              ep->xfer_len_db = 0U;
 8003732:	9b05      	ldr	r3, [sp, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8003734:	42b2      	cmp	r2, r6
 8003736:	d201      	bcs.n	800373c <USB_EPStartXfer+0x180>
              ep->xfer_len_db -= len;
 8003738:	1bf3      	subs	r3, r6, r7
 800373a:	003e      	movs	r6, r7
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800373c:	7862      	ldrb	r2, [r4, #1]
 800373e:	6223      	str	r3, [r4, #32]
 8003740:	b2b3      	uxth	r3, r6
 8003742:	2a00      	cmp	r2, #0
 8003744:	d12a      	bne.n	800379c <USB_EPStartXfer+0x1e0>
 8003746:	9a01      	ldr	r2, [sp, #4]
 8003748:	496e      	ldr	r1, [pc, #440]	@ (8003904 <USB_EPStartXfer+0x348>)
 800374a:	8810      	ldrh	r0, [r2, #0]
 800374c:	7822      	ldrb	r2, [r4, #0]
 800374e:	1869      	adds	r1, r5, r1
 8003750:	1809      	adds	r1, r1, r0
 8003752:	00d2      	lsls	r2, r2, #3
 8003754:	1852      	adds	r2, r2, r1
 8003756:	8811      	ldrh	r1, [r2, #0]
 8003758:	0589      	lsls	r1, r1, #22
 800375a:	0d89      	lsrs	r1, r1, #22
 800375c:	8011      	strh	r1, [r2, #0]
 800375e:	2e00      	cmp	r6, #0
 8003760:	d106      	bne.n	8003770 <USB_EPStartXfer+0x1b4>
 8003762:	2080      	movs	r0, #128	@ 0x80
 8003764:	8811      	ldrh	r1, [r2, #0]
 8003766:	0200      	lsls	r0, r0, #8
 8003768:	4301      	orrs	r1, r0
 800376a:	8011      	strh	r1, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800376c:	8962      	ldrh	r2, [r4, #10]
 800376e:	e7a8      	b.n	80036c2 <USB_EPStartXfer+0x106>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003770:	2e3e      	cmp	r6, #62	@ 0x3e
 8003772:	d808      	bhi.n	8003786 <USB_EPStartXfer+0x1ca>
 8003774:	2101      	movs	r1, #1
 8003776:	0870      	lsrs	r0, r6, #1
 8003778:	4031      	ands	r1, r6
 800377a:	1840      	adds	r0, r0, r1
 800377c:	8811      	ldrh	r1, [r2, #0]
 800377e:	0280      	lsls	r0, r0, #10
 8003780:	4301      	orrs	r1, r0
 8003782:	b289      	uxth	r1, r1
 8003784:	e7f1      	b.n	800376a <USB_EPStartXfer+0x1ae>
 8003786:	201f      	movs	r0, #31
 8003788:	0971      	lsrs	r1, r6, #5
 800378a:	4006      	ands	r6, r0
 800378c:	4270      	negs	r0, r6
 800378e:	4146      	adcs	r6, r0
 8003790:	8810      	ldrh	r0, [r2, #0]
 8003792:	1b89      	subs	r1, r1, r6
 8003794:	0289      	lsls	r1, r1, #10
 8003796:	4308      	orrs	r0, r1
 8003798:	495b      	ldr	r1, [pc, #364]	@ (8003908 <USB_EPStartXfer+0x34c>)
 800379a:	e7f1      	b.n	8003780 <USB_EPStartXfer+0x1c4>
 800379c:	2a01      	cmp	r2, #1
 800379e:	d1e5      	bne.n	800376c <USB_EPStartXfer+0x1b0>
 80037a0:	002a      	movs	r2, r5
 80037a2:	4958      	ldr	r1, [pc, #352]	@ (8003904 <USB_EPStartXfer+0x348>)
 80037a4:	3250      	adds	r2, #80	@ 0x50
 80037a6:	8810      	ldrh	r0, [r2, #0]
 80037a8:	7822      	ldrb	r2, [r4, #0]
 80037aa:	1869      	adds	r1, r5, r1
 80037ac:	00d2      	lsls	r2, r2, #3
 80037ae:	1809      	adds	r1, r1, r0
 80037b0:	1852      	adds	r2, r2, r1
 80037b2:	8013      	strh	r3, [r2, #0]
 80037b4:	e7da      	b.n	800376c <USB_EPStartXfer+0x1b0>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80037b6:	8818      	ldrh	r0, [r3, #0]
 80037b8:	4f54      	ldr	r7, [pc, #336]	@ (800390c <USB_EPStartXfer+0x350>)
 80037ba:	4a4f      	ldr	r2, [pc, #316]	@ (80038f8 <USB_EPStartXfer+0x33c>)
 80037bc:	4038      	ands	r0, r7
 80037be:	4310      	orrs	r0, r2
 80037c0:	b280      	uxth	r0, r0
 80037c2:	8018      	strh	r0, [r3, #0]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80037c4:	9b01      	ldr	r3, [sp, #4]
 80037c6:	9a03      	ldr	r2, [sp, #12]
 80037c8:	8818      	ldrh	r0, [r3, #0]
 80037ca:	4b49      	ldr	r3, [pc, #292]	@ (80038f0 <USB_EPStartXfer+0x334>)
 80037cc:	18eb      	adds	r3, r5, r3
 80037ce:	181b      	adds	r3, r3, r0
 80037d0:	189a      	adds	r2, r3, r2
 80037d2:	b2b3      	uxth	r3, r6
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80037d4:	8013      	strh	r3, [r2, #0]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80037d6:	8922      	ldrh	r2, [r4, #8]
 80037d8:	e774      	b.n	80036c4 <USB_EPStartXfer+0x108>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80037da:	8818      	ldrh	r0, [r3, #0]
        ep->xfer_len_db -= len;
 80037dc:	1bf6      	subs	r6, r6, r7
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80037de:	9a01      	ldr	r2, [sp, #4]
        ep->xfer_len_db -= len;
 80037e0:	6226      	str	r6, [r4, #32]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80037e2:	8816      	ldrh	r6, [r2, #0]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80037e4:	b2bb      	uxth	r3, r7
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80037e6:	0640      	lsls	r0, r0, #25
 80037e8:	d507      	bpl.n	80037fa <USB_EPStartXfer+0x23e>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80037ea:	4a46      	ldr	r2, [pc, #280]	@ (8003904 <USB_EPStartXfer+0x348>)
 80037ec:	18a8      	adds	r0, r5, r2
 80037ee:	9a03      	ldr	r2, [sp, #12]
 80037f0:	1980      	adds	r0, r0, r6
 80037f2:	1882      	adds	r2, r0, r2
 80037f4:	8013      	strh	r3, [r2, #0]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80037f6:	8962      	ldrh	r2, [r4, #10]
 80037f8:	e764      	b.n	80036c4 <USB_EPStartXfer+0x108>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80037fa:	4a3d      	ldr	r2, [pc, #244]	@ (80038f0 <USB_EPStartXfer+0x334>)
 80037fc:	18a8      	adds	r0, r5, r2
 80037fe:	9a03      	ldr	r2, [sp, #12]
 8003800:	1980      	adds	r0, r0, r6
 8003802:	1882      	adds	r2, r0, r2
 8003804:	e7e6      	b.n	80037d4 <USB_EPStartXfer+0x218>
    if (ep->doublebuffer == 0U)
 8003806:	2a00      	cmp	r2, #0
 8003808:	d11c      	bne.n	8003844 <USB_EPStartXfer+0x288>
      if (ep->xfer_len > ep->maxpacket)
 800380a:	69a3      	ldr	r3, [r4, #24]
 800380c:	6921      	ldr	r1, [r4, #16]
 800380e:	428b      	cmp	r3, r1
 8003810:	d901      	bls.n	8003816 <USB_EPStartXfer+0x25a>
        ep->xfer_len -= len;
 8003812:	1a5a      	subs	r2, r3, r1
 8003814:	000b      	movs	r3, r1
 8003816:	61a2      	str	r2, [r4, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003818:	002a      	movs	r2, r5
 800381a:	493a      	ldr	r1, [pc, #232]	@ (8003904 <USB_EPStartXfer+0x348>)
 800381c:	3250      	adds	r2, #80	@ 0x50
 800381e:	8810      	ldrh	r0, [r2, #0]
 8003820:	7822      	ldrb	r2, [r4, #0]
 8003822:	1869      	adds	r1, r5, r1
 8003824:	00d2      	lsls	r2, r2, #3
 8003826:	1809      	adds	r1, r1, r0
 8003828:	1852      	adds	r2, r2, r1
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800382a:	8811      	ldrh	r1, [r2, #0]
 800382c:	0589      	lsls	r1, r1, #22
 800382e:	0d89      	lsrs	r1, r1, #22
 8003830:	8011      	strh	r1, [r2, #0]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d000      	beq.n	8003838 <USB_EPStartXfer+0x27c>
 8003836:	e0d6      	b.n	80039e6 <USB_EPStartXfer+0x42a>
 8003838:	2180      	movs	r1, #128	@ 0x80
 800383a:	8813      	ldrh	r3, [r2, #0]
 800383c:	0209      	lsls	r1, r1, #8
 800383e:	430b      	orrs	r3, r1
 8003840:	8013      	strh	r3, [r2, #0]
 8003842:	e03d      	b.n	80038c0 <USB_EPStartXfer+0x304>
      if (ep->type == EP_TYPE_BULK)
 8003844:	78e3      	ldrb	r3, [r4, #3]
 8003846:	2b02      	cmp	r3, #2
 8003848:	d000      	beq.n	800384c <USB_EPStartXfer+0x290>
 800384a:	e08c      	b.n	8003966 <USB_EPStartXfer+0x3aa>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800384c:	2900      	cmp	r1, #0
 800384e:	d124      	bne.n	800389a <USB_EPStartXfer+0x2de>
 8003850:	0006      	movs	r6, r0
 8003852:	4a27      	ldr	r2, [pc, #156]	@ (80038f0 <USB_EPStartXfer+0x334>)
 8003854:	3650      	adds	r6, #80	@ 0x50
 8003856:	8833      	ldrh	r3, [r6, #0]
 8003858:	7820      	ldrb	r0, [r4, #0]
 800385a:	18aa      	adds	r2, r5, r2
 800385c:	18d2      	adds	r2, r2, r3
 800385e:	00c0      	lsls	r0, r0, #3
 8003860:	1812      	adds	r2, r2, r0
 8003862:	8813      	ldrh	r3, [r2, #0]
 8003864:	059b      	lsls	r3, r3, #22
 8003866:	0d9b      	lsrs	r3, r3, #22
 8003868:	8013      	strh	r3, [r2, #0]
 800386a:	6923      	ldr	r3, [r4, #16]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d134      	bne.n	80038da <USB_EPStartXfer+0x31e>
 8003870:	2780      	movs	r7, #128	@ 0x80
 8003872:	8811      	ldrh	r1, [r2, #0]
 8003874:	023f      	lsls	r7, r7, #8
 8003876:	4339      	orrs	r1, r7
 8003878:	8011      	strh	r1, [r2, #0]
 800387a:	4a22      	ldr	r2, [pc, #136]	@ (8003904 <USB_EPStartXfer+0x348>)
 800387c:	8831      	ldrh	r1, [r6, #0]
 800387e:	18aa      	adds	r2, r5, r2
 8003880:	1852      	adds	r2, r2, r1
 8003882:	1812      	adds	r2, r2, r0
 8003884:	8811      	ldrh	r1, [r2, #0]
 8003886:	0589      	lsls	r1, r1, #22
 8003888:	0d89      	lsrs	r1, r1, #22
 800388a:	8011      	strh	r1, [r2, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d154      	bne.n	800393a <USB_EPStartXfer+0x37e>
 8003890:	2180      	movs	r1, #128	@ 0x80
 8003892:	8813      	ldrh	r3, [r2, #0]
 8003894:	0209      	lsls	r1, r1, #8
 8003896:	430b      	orrs	r3, r1
 8003898:	8013      	strh	r3, [r2, #0]
        if (ep->xfer_count != 0U)
 800389a:	69e3      	ldr	r3, [r4, #28]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00f      	beq.n	80038c0 <USB_EPStartXfer+0x304>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80038a0:	7823      	ldrb	r3, [r4, #0]
 80038a2:	491b      	ldr	r1, [pc, #108]	@ (8003910 <USB_EPStartXfer+0x354>)
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	18eb      	adds	r3, r5, r3
 80038a8:	881a      	ldrh	r2, [r3, #0]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80038aa:	400a      	ands	r2, r1
 80038ac:	428a      	cmp	r2, r1
 80038ae:	d001      	beq.n	80038b4 <USB_EPStartXfer+0x2f8>
 80038b0:	2a00      	cmp	r2, #0
 80038b2:	d105      	bne.n	80038c0 <USB_EPStartXfer+0x304>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80038b4:	881a      	ldrh	r2, [r3, #0]
 80038b6:	4911      	ldr	r1, [pc, #68]	@ (80038fc <USB_EPStartXfer+0x340>)
 80038b8:	400a      	ands	r2, r1
 80038ba:	4916      	ldr	r1, [pc, #88]	@ (8003914 <USB_EPStartXfer+0x358>)
 80038bc:	430a      	orrs	r2, r1
 80038be:	801a      	strh	r2, [r3, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80038c0:	7823      	ldrb	r3, [r4, #0]
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	18ed      	adds	r5, r5, r3
 80038c6:	882a      	ldrh	r2, [r5, #0]
 80038c8:	4b13      	ldr	r3, [pc, #76]	@ (8003918 <USB_EPStartXfer+0x35c>)
 80038ca:	401a      	ands	r2, r3
 80038cc:	23c0      	movs	r3, #192	@ 0xc0
 80038ce:	019b      	lsls	r3, r3, #6
 80038d0:	4053      	eors	r3, r2
 80038d2:	4a12      	ldr	r2, [pc, #72]	@ (800391c <USB_EPStartXfer+0x360>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	802b      	strh	r3, [r5, #0]
 80038d8:	e6a0      	b.n	800361c <USB_EPStartXfer+0x60>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80038da:	2b3e      	cmp	r3, #62	@ 0x3e
 80038dc:	d820      	bhi.n	8003920 <USB_EPStartXfer+0x364>
 80038de:	2101      	movs	r1, #1
 80038e0:	085f      	lsrs	r7, r3, #1
 80038e2:	4019      	ands	r1, r3
 80038e4:	187f      	adds	r7, r7, r1
 80038e6:	8811      	ldrh	r1, [r2, #0]
 80038e8:	02bf      	lsls	r7, r7, #10
 80038ea:	4339      	orrs	r1, r7
 80038ec:	b289      	uxth	r1, r1
 80038ee:	e7c3      	b.n	8003878 <USB_EPStartXfer+0x2bc>
 80038f0:	00000402 	.word	0x00000402
 80038f4:	ffff8fbf 	.word	0xffff8fbf
 80038f8:	ffff8080 	.word	0xffff8080
 80038fc:	ffff8f8f 	.word	0xffff8f8f
 8003900:	00008180 	.word	0x00008180
 8003904:	00000406 	.word	0x00000406
 8003908:	ffff8000 	.word	0xffff8000
 800390c:	ffff8e8f 	.word	0xffff8e8f
 8003910:	00004040 	.word	0x00004040
 8003914:	000080c0 	.word	0x000080c0
 8003918:	ffffbf8f 	.word	0xffffbf8f
 800391c:	00008080 	.word	0x00008080
 8003920:	271f      	movs	r7, #31
 8003922:	401f      	ands	r7, r3
 8003924:	0039      	movs	r1, r7
 8003926:	424f      	negs	r7, r1
 8003928:	414f      	adcs	r7, r1
 800392a:	0959      	lsrs	r1, r3, #5
 800392c:	1bc9      	subs	r1, r1, r7
 800392e:	8817      	ldrh	r7, [r2, #0]
 8003930:	9101      	str	r1, [sp, #4]
 8003932:	0289      	lsls	r1, r1, #10
 8003934:	430f      	orrs	r7, r1
 8003936:	4937      	ldr	r1, [pc, #220]	@ (8003a14 <USB_EPStartXfer+0x458>)
 8003938:	e7d7      	b.n	80038ea <USB_EPStartXfer+0x32e>
 800393a:	2b3e      	cmp	r3, #62	@ 0x3e
 800393c:	d808      	bhi.n	8003950 <USB_EPStartXfer+0x394>
 800393e:	2001      	movs	r0, #1
 8003940:	0859      	lsrs	r1, r3, #1
 8003942:	4003      	ands	r3, r0
 8003944:	18c9      	adds	r1, r1, r3
 8003946:	8813      	ldrh	r3, [r2, #0]
 8003948:	0289      	lsls	r1, r1, #10
 800394a:	430b      	orrs	r3, r1
 800394c:	b29b      	uxth	r3, r3
 800394e:	e7a3      	b.n	8003898 <USB_EPStartXfer+0x2dc>
 8003950:	201f      	movs	r0, #31
 8003952:	0959      	lsrs	r1, r3, #5
 8003954:	4003      	ands	r3, r0
 8003956:	4258      	negs	r0, r3
 8003958:	4143      	adcs	r3, r0
 800395a:	1ac9      	subs	r1, r1, r3
 800395c:	8813      	ldrh	r3, [r2, #0]
 800395e:	0289      	lsls	r1, r1, #10
 8003960:	4319      	orrs	r1, r3
 8003962:	4b2c      	ldr	r3, [pc, #176]	@ (8003a14 <USB_EPStartXfer+0x458>)
 8003964:	e7f1      	b.n	800394a <USB_EPStartXfer+0x38e>
        return HAL_ERROR;
 8003966:	2001      	movs	r0, #1
      else if (ep->type == EP_TYPE_ISOC)
 8003968:	4283      	cmp	r3, r0
 800396a:	d000      	beq.n	800396e <USB_EPStartXfer+0x3b2>
 800396c:	e657      	b.n	800361e <USB_EPStartXfer+0x62>
        if (ep->xfer_len > ep->maxpacket)
 800396e:	69a3      	ldr	r3, [r4, #24]
 8003970:	6922      	ldr	r2, [r4, #16]
          ep->xfer_len = 0U;
 8003972:	2000      	movs	r0, #0
        if (ep->xfer_len > ep->maxpacket)
 8003974:	4293      	cmp	r3, r2
 8003976:	d901      	bls.n	800397c <USB_EPStartXfer+0x3c0>
          ep->xfer_len -= len;
 8003978:	1a98      	subs	r0, r3, r2
 800397a:	0013      	movs	r3, r2
 800397c:	61a0      	str	r0, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800397e:	2900      	cmp	r1, #0
 8003980:	d19e      	bne.n	80038c0 <USB_EPStartXfer+0x304>
 8003982:	002e      	movs	r6, r5
 8003984:	4a24      	ldr	r2, [pc, #144]	@ (8003a18 <USB_EPStartXfer+0x45c>)
 8003986:	3650      	adds	r6, #80	@ 0x50
 8003988:	8831      	ldrh	r1, [r6, #0]
 800398a:	7820      	ldrb	r0, [r4, #0]
 800398c:	18aa      	adds	r2, r5, r2
 800398e:	1852      	adds	r2, r2, r1
 8003990:	00c0      	lsls	r0, r0, #3
 8003992:	1812      	adds	r2, r2, r0
 8003994:	8811      	ldrh	r1, [r2, #0]
 8003996:	0589      	lsls	r1, r1, #22
 8003998:	0d89      	lsrs	r1, r1, #22
 800399a:	8011      	strh	r1, [r2, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d10a      	bne.n	80039b6 <USB_EPStartXfer+0x3fa>
 80039a0:	2780      	movs	r7, #128	@ 0x80
 80039a2:	8811      	ldrh	r1, [r2, #0]
 80039a4:	023f      	lsls	r7, r7, #8
 80039a6:	4339      	orrs	r1, r7
 80039a8:	8011      	strh	r1, [r2, #0]
 80039aa:	4a1c      	ldr	r2, [pc, #112]	@ (8003a1c <USB_EPStartXfer+0x460>)
 80039ac:	8831      	ldrh	r1, [r6, #0]
 80039ae:	18aa      	adds	r2, r5, r2
 80039b0:	1852      	adds	r2, r2, r1
 80039b2:	1812      	adds	r2, r2, r0
 80039b4:	e739      	b.n	800382a <USB_EPStartXfer+0x26e>
 80039b6:	2b3e      	cmp	r3, #62	@ 0x3e
 80039b8:	d808      	bhi.n	80039cc <USB_EPStartXfer+0x410>
 80039ba:	2101      	movs	r1, #1
 80039bc:	085f      	lsrs	r7, r3, #1
 80039be:	4019      	ands	r1, r3
 80039c0:	187f      	adds	r7, r7, r1
 80039c2:	8811      	ldrh	r1, [r2, #0]
 80039c4:	02bf      	lsls	r7, r7, #10
 80039c6:	4339      	orrs	r1, r7
 80039c8:	b289      	uxth	r1, r1
 80039ca:	e7ed      	b.n	80039a8 <USB_EPStartXfer+0x3ec>
 80039cc:	271f      	movs	r7, #31
 80039ce:	401f      	ands	r7, r3
 80039d0:	0039      	movs	r1, r7
 80039d2:	424f      	negs	r7, r1
 80039d4:	414f      	adcs	r7, r1
 80039d6:	0959      	lsrs	r1, r3, #5
 80039d8:	1bc9      	subs	r1, r1, r7
 80039da:	8817      	ldrh	r7, [r2, #0]
 80039dc:	9101      	str	r1, [sp, #4]
 80039de:	0289      	lsls	r1, r1, #10
 80039e0:	430f      	orrs	r7, r1
 80039e2:	490c      	ldr	r1, [pc, #48]	@ (8003a14 <USB_EPStartXfer+0x458>)
 80039e4:	e7ef      	b.n	80039c6 <USB_EPStartXfer+0x40a>
 80039e6:	2b3e      	cmp	r3, #62	@ 0x3e
 80039e8:	d808      	bhi.n	80039fc <USB_EPStartXfer+0x440>
 80039ea:	2001      	movs	r0, #1
 80039ec:	0859      	lsrs	r1, r3, #1
 80039ee:	4003      	ands	r3, r0
 80039f0:	18c9      	adds	r1, r1, r3
 80039f2:	8813      	ldrh	r3, [r2, #0]
 80039f4:	0289      	lsls	r1, r1, #10
 80039f6:	430b      	orrs	r3, r1
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	e721      	b.n	8003840 <USB_EPStartXfer+0x284>
 80039fc:	201f      	movs	r0, #31
 80039fe:	0959      	lsrs	r1, r3, #5
 8003a00:	4003      	ands	r3, r0
 8003a02:	4258      	negs	r0, r3
 8003a04:	4143      	adcs	r3, r0
 8003a06:	1ac9      	subs	r1, r1, r3
 8003a08:	8813      	ldrh	r3, [r2, #0]
 8003a0a:	0289      	lsls	r1, r1, #10
 8003a0c:	4319      	orrs	r1, r3
 8003a0e:	4b01      	ldr	r3, [pc, #4]	@ (8003a14 <USB_EPStartXfer+0x458>)
 8003a10:	e7f1      	b.n	80039f6 <USB_EPStartXfer+0x43a>
 8003a12:	46c0      	nop			@ (mov r8, r8)
 8003a14:	ffff8000 	.word	0xffff8000
 8003a18:	00000402 	.word	0x00000402
 8003a1c:	00000406 	.word	0x00000406

08003a20 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003a20:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003a22:	2580      	movs	r5, #128	@ 0x80
  uint32_t n = (uint32_t)wNBytes >> 1;
 8003a24:	085c      	lsrs	r4, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003a26:	00ed      	lsls	r5, r5, #3
 8003a28:	1952      	adds	r2, r2, r5

  for (count = n; count != 0U; count--)
 8003a2a:	0026      	movs	r6, r4
  uint8_t *pBuf = pbUsrBuf;
 8003a2c:	000d      	movs	r5, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003a2e:	1880      	adds	r0, r0, r2
  for (count = n; count != 0U; count--)
 8003a30:	1a47      	subs	r7, r0, r1
 8003a32:	19ea      	adds	r2, r5, r7
 8003a34:	2e00      	cmp	r6, #0
 8003a36:	d106      	bne.n	8003a46 <USB_ReadPMA+0x26>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8003a38:	07db      	lsls	r3, r3, #31
 8003a3a:	d503      	bpl.n	8003a44 <USB_ReadPMA+0x24>
 8003a3c:	0064      	lsls	r4, r4, #1
  {
    RdVal = *pdwVal;
 8003a3e:	1900      	adds	r0, r0, r4
 8003a40:	8803      	ldrh	r3, [r0, #0]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8003a42:	550b      	strb	r3, [r1, r4]
  }
}
 8003a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RdVal = *(__IO uint16_t *)pdwVal;
 8003a46:	8812      	ldrh	r2, [r2, #0]
  for (count = n; count != 0U; count--)
 8003a48:	3e01      	subs	r6, #1
    RdVal = *(__IO uint16_t *)pdwVal;
 8003a4a:	b292      	uxth	r2, r2
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8003a4c:	702a      	strb	r2, [r5, #0]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8003a4e:	0a12      	lsrs	r2, r2, #8
 8003a50:	706a      	strb	r2, [r5, #1]
    pBuf++;
 8003a52:	3502      	adds	r5, #2
  for (count = n; count != 0U; count--)
 8003a54:	e7ed      	b.n	8003a32 <USB_ReadPMA+0x12>
	...

08003a58 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003a58:	23af      	movs	r3, #175	@ 0xaf
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	58c3      	ldr	r3, [r0, r3]
{
 8003a5e:	b570      	push	{r4, r5, r6, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00e      	beq.n	8003a82 <USBD_CDC_EP0_RxReady+0x2a>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003a64:	22ae      	movs	r2, #174	@ 0xae
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003a66:	2580      	movs	r5, #128	@ 0x80
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003a68:	0092      	lsls	r2, r2, #2
 8003a6a:	5884      	ldr	r4, [r0, r2]
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003a6c:	00ad      	lsls	r5, r5, #2
 8003a6e:	5d60      	ldrb	r0, [r4, r5]
 8003a70:	28ff      	cmp	r0, #255	@ 0xff
 8003a72:	d006      	beq.n	8003a82 <USBD_CDC_EP0_RxReady+0x2a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003a74:	4a04      	ldr	r2, [pc, #16]	@ (8003a88 <USBD_CDC_EP0_RxReady+0x30>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	0021      	movs	r1, r4
 8003a7a:	5ca2      	ldrb	r2, [r4, r2]
 8003a7c:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8003a7e:	23ff      	movs	r3, #255	@ 0xff
 8003a80:	5563      	strb	r3, [r4, r5]

  }
  return USBD_OK;
}
 8003a82:	2000      	movs	r0, #0
 8003a84:	bd70      	pop	{r4, r5, r6, pc}
 8003a86:	46c0      	nop			@ (mov r8, r8)
 8003a88:	00000201 	.word	0x00000201

08003a8c <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8003a8c:	2343      	movs	r3, #67	@ 0x43
 8003a8e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
 8003a90:	4800      	ldr	r0, [pc, #0]	@ (8003a94 <USBD_CDC_GetFSCfgDesc+0x8>)
}
 8003a92:	4770      	bx	lr
 8003a94:	20000050 	.word	0x20000050

08003a98 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8003a98:	2343      	movs	r3, #67	@ 0x43
 8003a9a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
 8003a9c:	4800      	ldr	r0, [pc, #0]	@ (8003aa0 <USBD_CDC_GetHSCfgDesc+0x8>)
}
 8003a9e:	4770      	bx	lr
 8003aa0:	20000094 	.word	0x20000094

08003aa4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8003aa4:	2343      	movs	r3, #67	@ 0x43
 8003aa6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8003aa8:	4800      	ldr	r0, [pc, #0]	@ (8003aac <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
}
 8003aaa:	4770      	bx	lr
 8003aac:	2000000c 	.word	0x2000000c

08003ab0 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8003ab0:	230a      	movs	r3, #10
 8003ab2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8003ab4:	4800      	ldr	r0, [pc, #0]	@ (8003ab8 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
}
 8003ab6:	4770      	bx	lr
 8003ab8:	20000110 	.word	0x20000110

08003abc <USBD_CDC_DataOut>:
{
 8003abc:	b570      	push	{r4, r5, r6, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003abe:	26ae      	movs	r6, #174	@ 0xae
 8003ac0:	00b6      	lsls	r6, r6, #2
{
 8003ac2:	0004      	movs	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003ac4:	5985      	ldr	r5, [r0, r6]
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8003ac6:	f000 ff3f 	bl	8004948 <USBD_LL_GetRxDataSize>
 8003aca:	2383      	movs	r3, #131	@ 0x83
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	50e8      	str	r0, [r5, r3]
  if (pdev->pClassData != NULL)
 8003ad0:	59a3      	ldr	r3, [r4, r6]
    return USBD_FAIL;
 8003ad2:	2002      	movs	r0, #2
  if (pdev->pClassData != NULL)
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00a      	beq.n	8003aee <USBD_CDC_DataOut+0x32>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8003ad8:	2383      	movs	r3, #131	@ 0x83
 8003ada:	2281      	movs	r2, #129	@ 0x81
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	18e9      	adds	r1, r5, r3
 8003ae0:	33b0      	adds	r3, #176	@ 0xb0
 8003ae2:	58e3      	ldr	r3, [r4, r3]
 8003ae4:	0092      	lsls	r2, r2, #2
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	58a8      	ldr	r0, [r5, r2]
 8003aea:	4798      	blx	r3
    return USBD_OK;
 8003aec:	2000      	movs	r0, #0
}
 8003aee:	bd70      	pop	{r4, r5, r6, pc}

08003af0 <USBD_CDC_DataIn>:
{
 8003af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8003af2:	23ae      	movs	r3, #174	@ 0xae
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	58c7      	ldr	r7, [r0, r3]
{
 8003af8:	0004      	movs	r4, r0
 8003afa:	000e      	movs	r6, r1
    return USBD_FAIL;
 8003afc:	2002      	movs	r0, #2
  if (pdev->pClassData != NULL)
 8003afe:	2f00      	cmp	r7, #0
 8003b00:	d016      	beq.n	8003b30 <USBD_CDC_DataIn+0x40>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8003b02:	2514      	movs	r5, #20
 8003b04:	434d      	muls	r5, r1
 8003b06:	1965      	adds	r5, r4, r5
 8003b08:	69e8      	ldr	r0, [r5, #28]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8003b0a:	3308      	adds	r3, #8
 8003b0c:	58e3      	ldr	r3, [r4, r3]
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8003b0e:	2800      	cmp	r0, #0
 8003b10:	d00f      	beq.n	8003b32 <USBD_CDC_DataIn+0x42>
 8003b12:	2228      	movs	r2, #40	@ 0x28
 8003b14:	434a      	muls	r2, r1
 8003b16:	189b      	adds	r3, r3, r2
 8003b18:	6a19      	ldr	r1, [r3, #32]
 8003b1a:	f7fc fb97 	bl	800024c <__aeabi_uidivmod>
 8003b1e:	1e0a      	subs	r2, r1, #0
 8003b20:	d107      	bne.n	8003b32 <USBD_CDC_DataIn+0x42>
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8003b22:	000b      	movs	r3, r1
      pdev->ep_in[epnum].total_length = 0U;
 8003b24:	61e9      	str	r1, [r5, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8003b26:	0020      	movs	r0, r4
 8003b28:	0031      	movs	r1, r6
 8003b2a:	f000 fefb 	bl	8004924 <USBD_LL_Transmit>
    return USBD_OK;
 8003b2e:	2000      	movs	r0, #0
}
 8003b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 8003b32:	2385      	movs	r3, #133	@ 0x85
 8003b34:	2200      	movs	r2, #0
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	50fa      	str	r2, [r7, r3]
 8003b3a:	e7f8      	b.n	8003b2e <USBD_CDC_DataIn+0x3e>

08003b3c <USBD_CDC_Setup>:
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003b3c:	23ae      	movs	r3, #174	@ 0xae
{
 8003b3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	58c6      	ldr	r6, [r0, r3]
  uint8_t ifalt = 0U;
 8003b44:	466b      	mov	r3, sp
  uint16_t status_info = 0U;
 8003b46:	466a      	mov	r2, sp
{
 8003b48:	000d      	movs	r5, r1
  uint8_t ifalt = 0U;
 8003b4a:	1d59      	adds	r1, r3, #5
 8003b4c:	2300      	movs	r3, #0
{
 8003b4e:	0004      	movs	r4, r0
  uint8_t ifalt = 0U;
 8003b50:	700b      	strb	r3, [r1, #0]
  uint16_t status_info = 0U;
 8003b52:	80d3      	strh	r3, [r2, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003b54:	782b      	ldrb	r3, [r5, #0]
  uint16_t status_info = 0U;
 8003b56:	1d90      	adds	r0, r2, #6
 8003b58:	001f      	movs	r7, r3
 8003b5a:	2260      	movs	r2, #96	@ 0x60
 8003b5c:	4017      	ands	r7, r2
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003b5e:	4213      	tst	r3, r2
 8003b60:	d026      	beq.n	8003bb0 <USBD_CDC_Setup+0x74>
 8003b62:	2f20      	cmp	r7, #32
 8003b64:	d13f      	bne.n	8003be6 <USBD_CDC_Setup+0xaa>
      if (req->wLength)
 8003b66:	88ea      	ldrh	r2, [r5, #6]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003b68:	7868      	ldrb	r0, [r5, #1]
      if (req->wLength)
 8003b6a:	2a00      	cmp	r2, #0
 8003b6c:	d019      	beq.n	8003ba2 <USBD_CDC_Setup+0x66>
        if (req->bmRequest & 0x80U)
 8003b6e:	b25b      	sxtb	r3, r3
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	da0b      	bge.n	8003b8c <USBD_CDC_Setup+0x50>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003b74:	23af      	movs	r3, #175	@ 0xaf
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	58e3      	ldr	r3, [r4, r3]
 8003b7a:	0031      	movs	r1, r6
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	4798      	blx	r3
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003b80:	0031      	movs	r1, r6
 8003b82:	88ea      	ldrh	r2, [r5, #6]
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8003b84:	0020      	movs	r0, r4
 8003b86:	f000 fc94 	bl	80044b2 <USBD_CtlSendData>
 8003b8a:	e008      	b.n	8003b9e <USBD_CDC_Setup+0x62>
          hcdc->CmdOpCode = req->bRequest;
 8003b8c:	2380      	movs	r3, #128	@ 0x80
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	54f0      	strb	r0, [r6, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 8003b92:	4b18      	ldr	r3, [pc, #96]	@ (8003bf4 <USBD_CDC_Setup+0xb8>)
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003b94:	0031      	movs	r1, r6
 8003b96:	0020      	movs	r0, r4
          hcdc->CmdLength = (uint8_t)req->wLength;
 8003b98:	54f2      	strb	r2, [r6, r3]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003b9a:	f000 fca0 	bl	80044de <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 8003b9e:	2000      	movs	r0, #0
}
 8003ba0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003ba2:	23af      	movs	r3, #175	@ 0xaf
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	58e3      	ldr	r3, [r4, r3]
 8003ba8:	0029      	movs	r1, r5
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	4798      	blx	r3
 8003bae:	e7f6      	b.n	8003b9e <USBD_CDC_Setup+0x62>
      switch (req->bRequest)
 8003bb0:	786b      	ldrb	r3, [r5, #1]
 8003bb2:	2b0a      	cmp	r3, #10
 8003bb4:	d00b      	beq.n	8003bce <USBD_CDC_Setup+0x92>
 8003bb6:	2b0b      	cmp	r3, #11
 8003bb8:	d010      	beq.n	8003bdc <USBD_CDC_Setup+0xa0>
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d113      	bne.n	8003be6 <USBD_CDC_Setup+0xaa>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003bbe:	23a7      	movs	r3, #167	@ 0xa7
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	5ce3      	ldrb	r3, [r4, r3]
 8003bc4:	2b03      	cmp	r3, #3
 8003bc6:	d10e      	bne.n	8003be6 <USBD_CDC_Setup+0xaa>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8003bc8:	2202      	movs	r2, #2
 8003bca:	0001      	movs	r1, r0
 8003bcc:	e7da      	b.n	8003b84 <USBD_CDC_Setup+0x48>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003bce:	23a7      	movs	r3, #167	@ 0xa7
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	5ce3      	ldrb	r3, [r4, r3]
 8003bd4:	2b03      	cmp	r3, #3
 8003bd6:	d106      	bne.n	8003be6 <USBD_CDC_Setup+0xaa>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8003bd8:	2201      	movs	r2, #1
 8003bda:	e7d3      	b.n	8003b84 <USBD_CDC_Setup+0x48>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8003bdc:	23a7      	movs	r3, #167	@ 0xa7
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	5ce3      	ldrb	r3, [r4, r3]
 8003be2:	2b03      	cmp	r3, #3
 8003be4:	d0db      	beq.n	8003b9e <USBD_CDC_Setup+0x62>
          USBD_CtlError(pdev, req);
 8003be6:	0020      	movs	r0, r4
 8003be8:	0029      	movs	r1, r5
 8003bea:	f000 fc3b 	bl	8004464 <USBD_CtlError>
            ret = USBD_FAIL;
 8003bee:	2002      	movs	r0, #2
 8003bf0:	e7d6      	b.n	8003ba0 <USBD_CDC_Setup+0x64>
 8003bf2:	46c0      	nop			@ (mov r8, r8)
 8003bf4:	00000201 	.word	0x00000201

08003bf8 <USBD_CDC_DeInit>:
{
 8003bf8:	b570      	push	{r4, r5, r6, lr}
 8003bfa:	0004      	movs	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8003bfc:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8003bfe:	2181      	movs	r1, #129	@ 0x81
 8003c00:	f000 fe59 	bl	80048b6 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8003c04:	2101      	movs	r1, #1
 8003c06:	0020      	movs	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8003c08:	62e5      	str	r5, [r4, #44]	@ 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8003c0a:	f000 fe54 	bl	80048b6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8003c0e:	0023      	movs	r3, r4
  if (pdev->pClassData != NULL)
 8003c10:	26ae      	movs	r6, #174	@ 0xae
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8003c12:	33fc      	adds	r3, #252	@ 0xfc
 8003c14:	671d      	str	r5, [r3, #112]	@ 0x70
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8003c16:	2182      	movs	r1, #130	@ 0x82
 8003c18:	0020      	movs	r0, r4
  if (pdev->pClassData != NULL)
 8003c1a:	00b6      	lsls	r6, r6, #2
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8003c1c:	f000 fe4b 	bl	80048b6 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8003c20:	59a3      	ldr	r3, [r4, r6]
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8003c22:	6425      	str	r5, [r4, #64]	@ 0x40
  if (pdev->pClassData != NULL)
 8003c24:	42ab      	cmp	r3, r5
 8003c26:	d008      	beq.n	8003c3a <USBD_CDC_DeInit+0x42>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8003c28:	23af      	movs	r3, #175	@ 0xaf
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	58e3      	ldr	r3, [r4, r3]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003c32:	59a0      	ldr	r0, [r4, r6]
 8003c34:	f000 fe94 	bl	8004960 <USBD_static_free>
    pdev->pClassData = NULL;
 8003c38:	51a5      	str	r5, [r4, r6]
}
 8003c3a:	2000      	movs	r0, #0
 8003c3c:	bd70      	pop	{r4, r5, r6, pc}

08003c3e <USBD_CDC_Init>:
{
 8003c3e:	b570      	push	{r4, r5, r6, lr}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003c40:	7c03      	ldrb	r3, [r0, #16]
{
 8003c42:	0004      	movs	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d13a      	bne.n	8003cbe <USBD_CDC_Init+0x80>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003c48:	2380      	movs	r3, #128	@ 0x80
 8003c4a:	2181      	movs	r1, #129	@ 0x81
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	2202      	movs	r2, #2
 8003c50:	f000 fe25 	bl	800489e <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003c54:	2101      	movs	r1, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003c56:	2380      	movs	r3, #128	@ 0x80
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003c58:	62e1      	str	r1, [r4, #44]	@ 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003c5a:	009b      	lsls	r3, r3, #2
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003c5c:	2202      	movs	r2, #2
 8003c5e:	0020      	movs	r0, r4
 8003c60:	f000 fe1d 	bl	800489e <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003c64:	0023      	movs	r3, r4
 8003c66:	2601      	movs	r6, #1
 8003c68:	33fc      	adds	r3, #252	@ 0xfc
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8003c6a:	2203      	movs	r2, #3
 8003c6c:	2182      	movs	r1, #130	@ 0x82
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003c6e:	671e      	str	r6, [r3, #112]	@ 0x70
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8003c70:	0020      	movs	r0, r4
 8003c72:	2308      	movs	r3, #8
 8003c74:	f000 fe13 	bl	800489e <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8003c78:	2087      	movs	r0, #135	@ 0x87
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8003c7a:	6426      	str	r6, [r4, #64]	@ 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8003c7c:	0080      	lsls	r0, r0, #2
 8003c7e:	f000 fe6b 	bl	8004958 <USBD_static_malloc>
 8003c82:	23ae      	movs	r3, #174	@ 0xae
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	0005      	movs	r5, r0
 8003c88:	50e0      	str	r0, [r4, r3]
    ret = 1U;
 8003c8a:	0030      	movs	r0, r6
  if (pdev->pClassData == NULL)
 8003c8c:	2d00      	cmp	r5, #0
 8003c8e:	d015      	beq.n	8003cbc <USBD_CDC_Init+0x7e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8003c90:	3304      	adds	r3, #4
 8003c92:	58e3      	ldr	r3, [r4, r3]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4798      	blx	r3
    hcdc->TxState = 0U;
 8003c98:	2285      	movs	r2, #133	@ 0x85
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	0092      	lsls	r2, r2, #2
 8003c9e:	50ab      	str	r3, [r5, r2]
    hcdc->RxState = 0U;
 8003ca0:	3204      	adds	r2, #4
 8003ca2:	50ab      	str	r3, [r5, r2]
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003ca4:	7c23      	ldrb	r3, [r4, #16]
 8003ca6:	3a14      	subs	r2, #20
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d111      	bne.n	8003cd0 <USBD_CDC_Init+0x92>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003cac:	2380      	movs	r3, #128	@ 0x80
 8003cae:	009b      	lsls	r3, r3, #2
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003cb0:	0031      	movs	r1, r6
 8003cb2:	0020      	movs	r0, r4
 8003cb4:	58aa      	ldr	r2, [r5, r2]
 8003cb6:	f000 fe3e 	bl	8004936 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8003cba:	2000      	movs	r0, #0
}
 8003cbc:	bd70      	pop	{r4, r5, r6, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003cbe:	2340      	movs	r3, #64	@ 0x40
 8003cc0:	2181      	movs	r1, #129	@ 0x81
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	f000 fdeb 	bl	800489e <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003cc8:	2101      	movs	r1, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003cca:	2340      	movs	r3, #64	@ 0x40
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003ccc:	62e1      	str	r1, [r4, #44]	@ 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003cce:	e7c5      	b.n	8003c5c <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003cd0:	2340      	movs	r3, #64	@ 0x40
 8003cd2:	e7ed      	b.n	8003cb0 <USBD_CDC_Init+0x72>

08003cd4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8003cd4:	0003      	movs	r3, r0
  uint8_t  ret = USBD_FAIL;
 8003cd6:	2002      	movs	r0, #2

  if (fops != NULL)
 8003cd8:	2900      	cmp	r1, #0
 8003cda:	d003      	beq.n	8003ce4 <USBD_CDC_RegisterInterface+0x10>
  {
    pdev->pUserData = fops;
 8003cdc:	22af      	movs	r2, #175	@ 0xaf
    ret = USBD_OK;
 8003cde:	2000      	movs	r0, #0
    pdev->pUserData = fops;
 8003ce0:	0092      	lsls	r2, r2, #2
 8003ce2:	5099      	str	r1, [r3, r2]
  }

  return ret;
}
 8003ce4:	4770      	bx	lr

08003ce6 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003ce6:	23ae      	movs	r3, #174	@ 0xae
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	58c3      	ldr	r3, [r0, r3]

  hcdc->TxBuffer = pbuff;
 8003cec:	2082      	movs	r0, #130	@ 0x82
 8003cee:	0080      	lsls	r0, r0, #2
 8003cf0:	5019      	str	r1, [r3, r0]
  hcdc->TxLength = length;
 8003cf2:	2184      	movs	r1, #132	@ 0x84
 8003cf4:	0089      	lsls	r1, r1, #2

  return USBD_OK;
}
 8003cf6:	2000      	movs	r0, #0
  hcdc->TxLength = length;
 8003cf8:	505a      	str	r2, [r3, r1]
}
 8003cfa:	4770      	bx	lr

08003cfc <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8003cfc:	23ae      	movs	r3, #174	@ 0xae
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	58c2      	ldr	r2, [r0, r3]
 8003d02:	3bb4      	subs	r3, #180	@ 0xb4

  return USBD_OK;
}
 8003d04:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8003d06:	50d1      	str	r1, [r2, r3]
}
 8003d08:	4770      	bx	lr

08003d0a <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003d0a:	23ae      	movs	r3, #174	@ 0xae
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	58c2      	ldr	r2, [r0, r3]
{
 8003d10:	b510      	push	{r4, lr}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 8003d12:	2302      	movs	r3, #2
  if (pdev->pClassData != NULL)
 8003d14:	2a00      	cmp	r2, #0
 8003d16:	d012      	beq.n	8003d3e <USBD_CDC_TransmitPacket+0x34>
    if (hcdc->TxState == 0U)
 8003d18:	2185      	movs	r1, #133	@ 0x85
 8003d1a:	0089      	lsls	r1, r1, #2
 8003d1c:	5854      	ldr	r4, [r2, r1]
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	2c00      	cmp	r4, #0
 8003d22:	d10c      	bne.n	8003d3e <USBD_CDC_TransmitPacket+0x34>
      hcdc->TxState = 1U;
 8003d24:	5053      	str	r3, [r2, r1]
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8003d26:	2384      	movs	r3, #132	@ 0x84
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8003d2c:	390c      	subs	r1, #12
 8003d2e:	5852      	ldr	r2, [r2, r1]
 8003d30:	3988      	subs	r1, #136	@ 0x88
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8003d32:	6303      	str	r3, [r0, #48]	@ 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8003d34:	39ff      	subs	r1, #255	@ 0xff
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	f000 fdf4 	bl	8004924 <USBD_LL_Transmit>
      return USBD_OK;
 8003d3c:	0023      	movs	r3, r4
  }
}
 8003d3e:	0018      	movs	r0, r3
 8003d40:	bd10      	pop	{r4, pc}

08003d42 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003d42:	23ae      	movs	r3, #174	@ 0xae
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	58c2      	ldr	r2, [r0, r3]
{
 8003d48:	b510      	push	{r4, lr}
    }
    return USBD_OK;
  }
  else
  {
    return USBD_FAIL;
 8003d4a:	2302      	movs	r3, #2
  if (pdev->pClassData != NULL)
 8003d4c:	2a00      	cmp	r2, #0
 8003d4e:	d00b      	beq.n	8003d68 <USBD_CDC_ReceivePacket+0x26>
      USBD_LL_PrepareReceive(pdev,
 8003d50:	2381      	movs	r3, #129	@ 0x81
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	58d2      	ldr	r2, [r2, r3]
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003d56:	7c03      	ldrb	r3, [r0, #16]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d107      	bne.n	8003d6c <USBD_CDC_ReceivePacket+0x2a>
      USBD_LL_PrepareReceive(pdev,
 8003d5c:	2380      	movs	r3, #128	@ 0x80
 8003d5e:	009b      	lsls	r3, r3, #2
      USBD_LL_PrepareReceive(pdev,
 8003d60:	2101      	movs	r1, #1
 8003d62:	f000 fde8 	bl	8004936 <USBD_LL_PrepareReceive>
    return USBD_OK;
 8003d66:	2300      	movs	r3, #0
  }
}
 8003d68:	0018      	movs	r0, r3
 8003d6a:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8003d6c:	2340      	movs	r3, #64	@ 0x40
 8003d6e:	e7f7      	b.n	8003d60 <USBD_CDC_ReceivePacket+0x1e>

08003d70 <USBD_Init>:
  if (pdev == NULL)
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8003d70:	2302      	movs	r3, #2
{
 8003d72:	b510      	push	{r4, lr}
  if (pdev == NULL)
 8003d74:	2800      	cmp	r0, #0
 8003d76:	d013      	beq.n	8003da0 <USBD_Init+0x30>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8003d78:	23ad      	movs	r3, #173	@ 0xad
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	58c4      	ldr	r4, [r0, r3]
 8003d7e:	2c00      	cmp	r4, #0
 8003d80:	d001      	beq.n	8003d86 <USBD_Init+0x16>
  {
    pdev->pClass = NULL;
 8003d82:	2400      	movs	r4, #0
 8003d84:	50c4      	str	r4, [r0, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8003d86:	2900      	cmp	r1, #0
 8003d88:	d002      	beq.n	8003d90 <USBD_Init+0x20>
  {
    pdev->pDesc = pdesc;
 8003d8a:	23ac      	movs	r3, #172	@ 0xac
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	50c1      	str	r1, [r0, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003d90:	23a7      	movs	r3, #167	@ 0xa7
 8003d92:	2101      	movs	r1, #1
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	54c1      	strb	r1, [r0, r3]
  pdev->id = id;
 8003d98:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8003d9a:	f000 fd37 	bl	800480c <USBD_LL_Init>

  return USBD_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	0018      	movs	r0, r3
 8003da2:	bd10      	pop	{r4, pc}

08003da4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8003da4:	0003      	movs	r3, r0
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8003da6:	2002      	movs	r0, #2
  if (pclass != NULL)
 8003da8:	2900      	cmp	r1, #0
 8003daa:	d003      	beq.n	8003db4 <USBD_RegisterClass+0x10>
    pdev->pClass = pclass;
 8003dac:	22ad      	movs	r2, #173	@ 0xad
    status = USBD_OK;
 8003dae:	2000      	movs	r0, #0
    pdev->pClass = pclass;
 8003db0:	0092      	lsls	r2, r2, #2
 8003db2:	5099      	str	r1, [r3, r2]
  }

  return status;
}
 8003db4:	4770      	bx	lr

08003db6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8003db6:	b510      	push	{r4, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8003db8:	f000 fd68 	bl	800488c <USBD_LL_Start>

  return USBD_OK;
}
 8003dbc:	2000      	movs	r0, #0
 8003dbe:	bd10      	pop	{r4, pc}

08003dc0 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8003dc0:	23ad      	movs	r3, #173	@ 0xad
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	58c2      	ldr	r2, [r0, r3]
{
 8003dc6:	b510      	push	{r4, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8003dc8:	2302      	movs	r3, #2
  if (pdev->pClass != NULL)
 8003dca:	2a00      	cmp	r2, #0
 8003dcc:	d004      	beq.n	8003dd8 <USBD_SetClassConfig+0x18>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8003dce:	6813      	ldr	r3, [r2, #0]
 8003dd0:	4798      	blx	r3
 8003dd2:	1e43      	subs	r3, r0, #1
 8003dd4:	4198      	sbcs	r0, r3
 8003dd6:	0043      	lsls	r3, r0, #1
      ret = USBD_OK;
    }
  }

  return ret;
}
 8003dd8:	0018      	movs	r0, r3
 8003dda:	bd10      	pop	{r4, pc}

08003ddc <USBD_ClrClassConfig>:
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8003ddc:	23ad      	movs	r3, #173	@ 0xad
{
 8003dde:	b510      	push	{r4, lr}
  pdev->pClass->DeInit(pdev, cfgidx);
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	58c3      	ldr	r3, [r0, r3]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	4798      	blx	r3

  return USBD_OK;
}
 8003de8:	2000      	movs	r0, #0
 8003dea:	bd10      	pop	{r4, pc}

08003dec <USBD_LL_SetupStage>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003dec:	23aa      	movs	r3, #170	@ 0xaa
 8003dee:	009b      	lsls	r3, r3, #2
{
 8003df0:	b570      	push	{r4, r5, r6, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003df2:	18c5      	adds	r5, r0, r3
{
 8003df4:	0004      	movs	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003df6:	0028      	movs	r0, r5
 8003df8:	f000 fb20 	bl	800443c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8003dfc:	23a5      	movs	r3, #165	@ 0xa5
 8003dfe:	2201      	movs	r2, #1
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	50e2      	str	r2, [r4, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8003e04:	4b11      	ldr	r3, [pc, #68]	@ (8003e4c <USBD_LL_SetupStage+0x60>)
 8003e06:	5ae2      	ldrh	r2, [r4, r3]
 8003e08:	3b16      	subs	r3, #22
 8003e0a:	50e2      	str	r2, [r4, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8003e0c:	3310      	adds	r3, #16
 8003e0e:	5ce1      	ldrb	r1, [r4, r3]
 8003e10:	231f      	movs	r3, #31
 8003e12:	400b      	ands	r3, r1
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d009      	beq.n	8003e2c <USBD_LL_SetupStage+0x40>
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d00c      	beq.n	8003e36 <USBD_LL_SetupStage+0x4a>
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d10f      	bne.n	8003e40 <USBD_LL_SetupStage+0x54>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8003e20:	0029      	movs	r1, r5
 8003e22:	0020      	movs	r0, r4
 8003e24:	f000 f91a 	bl	800405c <USBD_StdDevReq>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return USBD_OK;
}
 8003e28:	2000      	movs	r0, #0
 8003e2a:	bd70      	pop	{r4, r5, r6, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8003e2c:	0029      	movs	r1, r5
 8003e2e:	0020      	movs	r0, r4
 8003e30:	f000 fa4a 	bl	80042c8 <USBD_StdItfReq>
      break;
 8003e34:	e7f8      	b.n	8003e28 <USBD_LL_SetupStage+0x3c>
      USBD_StdEPReq(pdev, &pdev->request);
 8003e36:	0029      	movs	r1, r5
 8003e38:	0020      	movs	r0, r4
 8003e3a:	f000 fa6d 	bl	8004318 <USBD_StdEPReq>
      break;
 8003e3e:	e7f3      	b.n	8003e28 <USBD_LL_SetupStage+0x3c>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8003e40:	237f      	movs	r3, #127	@ 0x7f
 8003e42:	0020      	movs	r0, r4
 8003e44:	4399      	bics	r1, r3
 8003e46:	f000 fd3f 	bl	80048c8 <USBD_LL_StallEP>
      break;
 8003e4a:	e7ed      	b.n	8003e28 <USBD_LL_SetupStage+0x3c>
 8003e4c:	000002ae 	.word	0x000002ae

08003e50 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8003e50:	b570      	push	{r4, r5, r6, lr}
 8003e52:	0004      	movs	r4, r0
 8003e54:	0015      	movs	r5, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8003e56:	2900      	cmp	r1, #0
 8003e58:	d12e      	bne.n	8003eb8 <USBD_LL_DataOutStage+0x68>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003e5a:	23a5      	movs	r3, #165	@ 0xa5
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	58c2      	ldr	r2, [r0, r3]
 8003e60:	2a03      	cmp	r2, #3
 8003e62:	d123      	bne.n	8003eac <USBD_LL_DataOutStage+0x5c>
    {
      if (pep->rem_length > pep->maxpacket)
 8003e64:	0002      	movs	r2, r0
 8003e66:	3255      	adds	r2, #85	@ 0x55
 8003e68:	32ff      	adds	r2, #255	@ 0xff
 8003e6a:	68d3      	ldr	r3, [r2, #12]
 8003e6c:	6910      	ldr	r0, [r2, #16]
 8003e6e:	4283      	cmp	r3, r0
 8003e70:	d90b      	bls.n	8003e8a <USBD_LL_DataOutStage+0x3a>
      {
        pep->rem_length -= pep->maxpacket;
 8003e72:	1a1b      	subs	r3, r3, r0
 8003e74:	60d3      	str	r3, [r2, #12]

        USBD_CtlContinueRx(pdev, pdata,
 8003e76:	b282      	uxth	r2, r0
 8003e78:	4298      	cmp	r0, r3
 8003e7a:	d900      	bls.n	8003e7e <USBD_LL_DataOutStage+0x2e>
 8003e7c:	b29a      	uxth	r2, r3
 8003e7e:	0029      	movs	r1, r5
 8003e80:	0020      	movs	r0, r4
 8003e82:	f000 fb3c 	bl	80044fe <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8003e86:	2000      	movs	r0, #0
}
 8003e88:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8003e8a:	23ad      	movs	r3, #173	@ 0xad
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	58e3      	ldr	r3, [r4, r3]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d006      	beq.n	8003ea4 <USBD_LL_DataOutStage+0x54>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003e96:	22a7      	movs	r2, #167	@ 0xa7
 8003e98:	0092      	lsls	r2, r2, #2
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8003e9a:	5ca2      	ldrb	r2, [r4, r2]
 8003e9c:	2a03      	cmp	r2, #3
 8003e9e:	d101      	bne.n	8003ea4 <USBD_LL_DataOutStage+0x54>
          pdev->pClass->EP0_RxReady(pdev);
 8003ea0:	0020      	movs	r0, r4
 8003ea2:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8003ea4:	0020      	movs	r0, r4
 8003ea6:	f000 fb32 	bl	800450e <USBD_CtlSendStatus>
 8003eaa:	e7ec      	b.n	8003e86 <USBD_LL_DataOutStage+0x36>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8003eac:	2a05      	cmp	r2, #5
 8003eae:	d1ea      	bne.n	8003e86 <USBD_LL_DataOutStage+0x36>
        pdev->ep0_state = USBD_EP0_IDLE;
 8003eb0:	50c1      	str	r1, [r0, r3]
        USBD_LL_StallEP(pdev, 0U);
 8003eb2:	f000 fd09 	bl	80048c8 <USBD_LL_StallEP>
 8003eb6:	e7e6      	b.n	8003e86 <USBD_LL_DataOutStage+0x36>
  else if ((pdev->pClass->DataOut != NULL) &&
 8003eb8:	23ad      	movs	r3, #173	@ 0xad
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	58c3      	ldr	r3, [r0, r3]
    return USBD_FAIL;
 8003ebe:	2002      	movs	r0, #2
  else if ((pdev->pClass->DataOut != NULL) &&
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d0e0      	beq.n	8003e88 <USBD_LL_DataOutStage+0x38>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003ec6:	22a7      	movs	r2, #167	@ 0xa7
 8003ec8:	0092      	lsls	r2, r2, #2
  else if ((pdev->pClass->DataOut != NULL) &&
 8003eca:	5ca2      	ldrb	r2, [r4, r2]
 8003ecc:	2a03      	cmp	r2, #3
 8003ece:	d1db      	bne.n	8003e88 <USBD_LL_DataOutStage+0x38>
    pdev->pClass->DataOut(pdev, epnum);
 8003ed0:	0020      	movs	r0, r4
 8003ed2:	4798      	blx	r3
 8003ed4:	e7d7      	b.n	8003e86 <USBD_LL_DataOutStage+0x36>

08003ed6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8003ed6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ed8:	000d      	movs	r5, r1
 8003eda:	0004      	movs	r4, r0
 8003edc:	0011      	movs	r1, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8003ede:	2d00      	cmp	r5, #0
 8003ee0:	d14d      	bne.n	8003f7e <USBD_LL_DataInStage+0xa8>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8003ee2:	23a5      	movs	r3, #165	@ 0xa5
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	58c3      	ldr	r3, [r0, r3]
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d13e      	bne.n	8003f6a <USBD_LL_DataInStage+0x94>
    {
      if (pep->rem_length > pep->maxpacket)
 8003eec:	6a03      	ldr	r3, [r0, #32]
 8003eee:	6a46      	ldr	r6, [r0, #36]	@ 0x24
 8003ef0:	42b3      	cmp	r3, r6
 8003ef2:	d911      	bls.n	8003f18 <USBD_LL_DataInStage+0x42>
      {
        pep->rem_length -= pep->maxpacket;
 8003ef4:	1b9b      	subs	r3, r3, r6
 8003ef6:	6203      	str	r3, [r0, #32]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	f000 fae8 	bl	80044ce <USBD_CtlContinueSendData>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003efe:	002b      	movs	r3, r5
 8003f00:	002a      	movs	r2, r5
 8003f02:	0029      	movs	r1, r5
 8003f04:	0020      	movs	r0, r4
 8003f06:	f000 fd16 	bl	8004936 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8003f0a:	23a8      	movs	r3, #168	@ 0xa8
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	5ce2      	ldrb	r2, [r4, r3]
 8003f10:	2a01      	cmp	r2, #1
 8003f12:	d031      	beq.n	8003f78 <USBD_LL_DataInStage+0xa2>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8003f14:	2000      	movs	r0, #0
}
 8003f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8003f18:	69c7      	ldr	r7, [r0, #28]
 8003f1a:	0031      	movs	r1, r6
 8003f1c:	0038      	movs	r0, r7
 8003f1e:	f7fc f995 	bl	800024c <__aeabi_uidivmod>
 8003f22:	1e0d      	subs	r5, r1, #0
 8003f24:	d10c      	bne.n	8003f40 <USBD_LL_DataInStage+0x6a>
 8003f26:	42be      	cmp	r6, r7
 8003f28:	d80a      	bhi.n	8003f40 <USBD_LL_DataInStage+0x6a>
            (pep->total_length < pdev->ep0_data_len))
 8003f2a:	26a6      	movs	r6, #166	@ 0xa6
 8003f2c:	00b6      	lsls	r6, r6, #2
            (pep->total_length >= pep->maxpacket) &&
 8003f2e:	59a3      	ldr	r3, [r4, r6]
 8003f30:	429f      	cmp	r7, r3
 8003f32:	d205      	bcs.n	8003f40 <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8003f34:	000a      	movs	r2, r1
 8003f36:	0020      	movs	r0, r4
 8003f38:	f000 fac9 	bl	80044ce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8003f3c:	51a5      	str	r5, [r4, r6]
 8003f3e:	e7de      	b.n	8003efe <USBD_LL_DataInStage+0x28>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8003f40:	23ad      	movs	r3, #173	@ 0xad
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	58e3      	ldr	r3, [r4, r3]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d006      	beq.n	8003f5a <USBD_LL_DataInStage+0x84>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003f4c:	22a7      	movs	r2, #167	@ 0xa7
 8003f4e:	0092      	lsls	r2, r2, #2
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8003f50:	5ca2      	ldrb	r2, [r4, r2]
 8003f52:	2a03      	cmp	r2, #3
 8003f54:	d101      	bne.n	8003f5a <USBD_LL_DataInStage+0x84>
            pdev->pClass->EP0_TxSent(pdev);
 8003f56:	0020      	movs	r0, r4
 8003f58:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8003f5a:	2180      	movs	r1, #128	@ 0x80
 8003f5c:	0020      	movs	r0, r4
 8003f5e:	f000 fcb3 	bl	80048c8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8003f62:	0020      	movs	r0, r4
 8003f64:	f000 fadf 	bl	8004526 <USBD_CtlReceiveStatus>
 8003f68:	e7cf      	b.n	8003f0a <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8003f6a:	2204      	movs	r2, #4
 8003f6c:	4393      	bics	r3, r2
 8003f6e:	d1cc      	bne.n	8003f0a <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8003f70:	2180      	movs	r1, #128	@ 0x80
 8003f72:	f000 fca9 	bl	80048c8 <USBD_LL_StallEP>
 8003f76:	e7c8      	b.n	8003f0a <USBD_LL_DataInStage+0x34>
      pdev->dev_test_mode = 0U;
 8003f78:	2200      	movs	r2, #0
 8003f7a:	54e2      	strb	r2, [r4, r3]
 8003f7c:	e7ca      	b.n	8003f14 <USBD_LL_DataInStage+0x3e>
  else if ((pdev->pClass->DataIn != NULL) &&
 8003f7e:	23ad      	movs	r3, #173	@ 0xad
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	58c3      	ldr	r3, [r0, r3]
    return USBD_FAIL;
 8003f84:	2002      	movs	r0, #2
  else if ((pdev->pClass->DataIn != NULL) &&
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d0c4      	beq.n	8003f16 <USBD_LL_DataInStage+0x40>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003f8c:	22a7      	movs	r2, #167	@ 0xa7
 8003f8e:	0092      	lsls	r2, r2, #2
  else if ((pdev->pClass->DataIn != NULL) &&
 8003f90:	5ca2      	ldrb	r2, [r4, r2]
 8003f92:	2a03      	cmp	r2, #3
 8003f94:	d1bf      	bne.n	8003f16 <USBD_LL_DataInStage+0x40>
    pdev->pClass->DataIn(pdev, epnum);
 8003f96:	0029      	movs	r1, r5
 8003f98:	0020      	movs	r0, r4
 8003f9a:	4798      	blx	r3
 8003f9c:	e7ba      	b.n	8003f14 <USBD_LL_DataInStage+0x3e>

08003f9e <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003f9e:	2200      	movs	r2, #0
{
 8003fa0:	b570      	push	{r4, r5, r6, lr}
 8003fa2:	0004      	movs	r4, r0
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003fa4:	0011      	movs	r1, r2
 8003fa6:	2340      	movs	r3, #64	@ 0x40
 8003fa8:	f000 fc79 	bl	800489e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8003fac:	0023      	movs	r3, r4
 8003fae:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003fb0:	2640      	movs	r6, #64	@ 0x40
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8003fb2:	33fc      	adds	r3, #252	@ 0xfc

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003fb4:	2180      	movs	r1, #128	@ 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8003fb6:	65dd      	str	r5, [r3, #92]	@ 0x5c
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003fb8:	669e      	str	r6, [r3, #104]	@ 0x68
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003fba:	2200      	movs	r2, #0
 8003fbc:	0033      	movs	r3, r6
 8003fbe:	0020      	movs	r0, r4
 8003fc0:	f000 fc6d 	bl	800489e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003fc4:	23a7      	movs	r3, #167	@ 0xa7
  pdev->ep0_state = USBD_EP0_IDLE;
 8003fc6:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003fc8:	009b      	lsls	r3, r3, #2
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8003fca:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003fcc:	6266      	str	r6, [r4, #36]	@ 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003fce:	54e5      	strb	r5, [r4, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8003fd0:	3b08      	subs	r3, #8
 8003fd2:	50e1      	str	r1, [r4, r3]
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;
 8003fd4:	3310      	adds	r3, #16
  pdev->dev_config = 0U;
 8003fd6:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8003fd8:	50e1      	str	r1, [r4, r3]

  if (pdev->pClassData)
 8003fda:	3314      	adds	r3, #20
 8003fdc:	58e3      	ldr	r3, [r4, r3]
 8003fde:	428b      	cmp	r3, r1
 8003fe0:	d005      	beq.n	8003fee <USBD_LL_Reset+0x50>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8003fe2:	23ad      	movs	r3, #173	@ 0xad
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	58e3      	ldr	r3, [r4, r3]
 8003fe8:	0020      	movs	r0, r4
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	4798      	blx	r3
  }

  return USBD_OK;
}
 8003fee:	2000      	movs	r0, #0
 8003ff0:	bd70      	pop	{r4, r5, r6, pc}

08003ff2 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8003ff2:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8003ff4:	2000      	movs	r0, #0
 8003ff6:	4770      	bx	lr

08003ff8 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8003ff8:	23a7      	movs	r3, #167	@ 0xa7
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	5cc1      	ldrb	r1, [r0, r3]
 8003ffe:	4a03      	ldr	r2, [pc, #12]	@ (800400c <USBD_LL_Suspend+0x14>)
 8004000:	5481      	strb	r1, [r0, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004002:	2204      	movs	r2, #4
 8004004:	54c2      	strb	r2, [r0, r3]

  return USBD_OK;
}
 8004006:	2000      	movs	r0, #0
 8004008:	4770      	bx	lr
 800400a:	46c0      	nop			@ (mov r8, r8)
 800400c:	0000029d 	.word	0x0000029d

08004010 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004010:	23a7      	movs	r3, #167	@ 0xa7
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	5cc2      	ldrb	r2, [r0, r3]
 8004016:	2a04      	cmp	r2, #4
 8004018:	d102      	bne.n	8004020 <USBD_LL_Resume+0x10>
  {
    pdev->dev_state = pdev->dev_old_state;
 800401a:	4a02      	ldr	r2, [pc, #8]	@ (8004024 <USBD_LL_Resume+0x14>)
 800401c:	5c82      	ldrb	r2, [r0, r2]
 800401e:	54c2      	strb	r2, [r0, r3]
  }

  return USBD_OK;
}
 8004020:	2000      	movs	r0, #0
 8004022:	4770      	bx	lr
 8004024:	0000029d 	.word	0x0000029d

08004028 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004028:	23a7      	movs	r3, #167	@ 0xa7
{
 800402a:	b510      	push	{r4, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	5cc3      	ldrb	r3, [r0, r3]
 8004030:	2b03      	cmp	r3, #3
 8004032:	d106      	bne.n	8004042 <USBD_LL_SOF+0x1a>
  {
    if (pdev->pClass->SOF != NULL)
 8004034:	23ad      	movs	r3, #173	@ 0xad
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	58c3      	ldr	r3, [r0, r3]
 800403a:	69db      	ldr	r3, [r3, #28]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d000      	beq.n	8004042 <USBD_LL_SOF+0x1a>
    {
      pdev->pClass->SOF(pdev);
 8004040:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 8004042:	2000      	movs	r0, #0
 8004044:	bd10      	pop	{r4, pc}

08004046 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 8004046:	b510      	push	{r4, lr}
 8004048:	0004      	movs	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 800404a:	2180      	movs	r1, #128	@ 0x80
 800404c:	f000 fc3c 	bl	80048c8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8004050:	2100      	movs	r1, #0
 8004052:	0020      	movs	r0, r4
 8004054:	f000 fc38 	bl	80048c8 <USBD_LL_StallEP>
}
 8004058:	bd10      	pop	{r4, pc}
	...

0800405c <USBD_StdDevReq>:
{
 800405c:	2260      	movs	r2, #96	@ 0x60
 800405e:	780b      	ldrb	r3, [r1, #0]
 8004060:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004062:	4013      	ands	r3, r2
 8004064:	000d      	movs	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004066:	0019      	movs	r1, r3
 8004068:	1892      	adds	r2, r2, r2
 800406a:	3920      	subs	r1, #32
{
 800406c:	0004      	movs	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800406e:	4211      	tst	r1, r2
 8004070:	d012      	beq.n	8004098 <USBD_StdDevReq+0x3c>
 8004072:	2b00      	cmp	r3, #0
 8004074:	d000      	beq.n	8004078 <USBD_StdDevReq+0x1c>
 8004076:	e096      	b.n	80041a6 <USBD_StdDevReq+0x14a>
      switch (req->bRequest)
 8004078:	7868      	ldrb	r0, [r5, #1]
 800407a:	2809      	cmp	r0, #9
 800407c:	d900      	bls.n	8004080 <USBD_StdDevReq+0x24>
 800407e:	e092      	b.n	80041a6 <USBD_StdDevReq+0x14a>
 8004080:	f7fc f854 	bl	800012c <__gnu_thumb1_case_uhi>
 8004084:	010d00f0 	.word	0x010d00f0
 8004088:	01050091 	.word	0x01050091
 800408c:	00830091 	.word	0x00830091
 8004090:	00910012 	.word	0x00910012
 8004094:	00a400da 	.word	0x00a400da
      pdev->pClass->Setup(pdev, req);
 8004098:	23ad      	movs	r3, #173	@ 0xad
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	58c3      	ldr	r3, [r0, r3]
 800409e:	0029      	movs	r1, r5
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	4798      	blx	r3
}
 80040a4:	2000      	movs	r0, #0
 80040a6:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  uint16_t len = 0U;
 80040a8:	2300      	movs	r3, #0
 80040aa:	466a      	mov	r2, sp
 80040ac:	80d3      	strh	r3, [r2, #6]
  switch (req->wValue >> 8)
 80040ae:	886b      	ldrh	r3, [r5, #2]
 80040b0:	0a18      	lsrs	r0, r3, #8
 80040b2:	3801      	subs	r0, #1
 80040b4:	2806      	cmp	r0, #6
 80040b6:	d876      	bhi.n	80041a6 <USBD_StdDevReq+0x14a>
 80040b8:	f7fc f82e 	bl	8000118 <__gnu_thumb1_case_uqi>
 80040bc:	75261704 	.word	0x75261704
 80040c0:	4075      	.short	0x4075
 80040c2:	4b          	.byte	0x4b
 80040c3:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80040c4:	23ac      	movs	r3, #172	@ 0xac
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	58e3      	ldr	r3, [r4, r3]
 80040ca:	7c20      	ldrb	r0, [r4, #16]
 80040cc:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80040ce:	466a      	mov	r2, sp
 80040d0:	1d91      	adds	r1, r2, #6
 80040d2:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 80040d4:	466b      	mov	r3, sp
 80040d6:	88d9      	ldrh	r1, [r3, #6]
 80040d8:	88ea      	ldrh	r2, [r5, #6]
 80040da:	2900      	cmp	r1, #0
 80040dc:	d050      	beq.n	8004180 <USBD_StdDevReq+0x124>
 80040de:	2a00      	cmp	r2, #0
 80040e0:	d143      	bne.n	800416a <USBD_StdDevReq+0x10e>
        USBD_CtlSendStatus(pdev);
 80040e2:	0020      	movs	r0, r4
 80040e4:	f000 fa13 	bl	800450e <USBD_CtlSendStatus>
 80040e8:	e7dc      	b.n	80040a4 <USBD_StdDevReq+0x48>
      pdev->pClass->Setup(pdev, req);
 80040ea:	23ad      	movs	r3, #173	@ 0xad
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80040ec:	7c22      	ldrb	r2, [r4, #16]
      pdev->pClass->Setup(pdev, req);
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	58e3      	ldr	r3, [r4, r3]
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80040f2:	2a00      	cmp	r2, #0
 80040f4:	d106      	bne.n	8004104 <USBD_StdDevReq+0xa8>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80040f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80040f8:	466a      	mov	r2, sp
 80040fa:	1d90      	adds	r0, r2, #6
 80040fc:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80040fe:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004100:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8004102:	e7e7      	b.n	80040d4 <USBD_StdDevReq+0x78>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004106:	e7f7      	b.n	80040f8 <USBD_StdDevReq+0x9c>
      switch ((uint8_t)(req->wValue))
 8004108:	b2d8      	uxtb	r0, r3
 800410a:	2805      	cmp	r0, #5
 800410c:	d84b      	bhi.n	80041a6 <USBD_StdDevReq+0x14a>
 800410e:	23ac      	movs	r3, #172	@ 0xac
 8004110:	009b      	lsls	r3, r3, #2
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004112:	58e3      	ldr	r3, [r4, r3]
 8004114:	f7fc f800 	bl	8000118 <__gnu_thumb1_case_uqi>
 8004118:	0c0a0803 	.word	0x0c0a0803
 800411c:	100e      	.short	0x100e
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d040      	beq.n	80041a6 <USBD_StdDevReq+0x14a>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8004124:	7c20      	ldrb	r0, [r4, #16]
 8004126:	e7d2      	b.n	80040ce <USBD_StdDevReq+0x72>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	e7f9      	b.n	8004120 <USBD_StdDevReq+0xc4>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	e7f7      	b.n	8004120 <USBD_StdDevReq+0xc4>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	e7f5      	b.n	8004120 <USBD_StdDevReq+0xc4>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	e7f3      	b.n	8004120 <USBD_StdDevReq+0xc4>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	e7f1      	b.n	8004120 <USBD_StdDevReq+0xc4>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800413c:	7c23      	ldrb	r3, [r4, #16]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d131      	bne.n	80041a6 <USBD_StdDevReq+0x14a>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004142:	23ad      	movs	r3, #173	@ 0xad
 8004144:	466a      	mov	r2, sp
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	58e3      	ldr	r3, [r4, r3]
 800414a:	1d90      	adds	r0, r2, #6
 800414c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800414e:	4798      	blx	r3
  if (err != 0U)
 8004150:	e7c0      	b.n	80040d4 <USBD_StdDevReq+0x78>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004152:	7c23      	ldrb	r3, [r4, #16]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d126      	bne.n	80041a6 <USBD_StdDevReq+0x14a>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004158:	23ad      	movs	r3, #173	@ 0xad
 800415a:	466a      	mov	r2, sp
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	58e3      	ldr	r3, [r4, r3]
 8004160:	1d90      	adds	r0, r2, #6
 8004162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004164:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004166:	2307      	movs	r3, #7
 8004168:	e7ca      	b.n	8004100 <USBD_StdDevReq+0xa4>
      len = MIN(len, req->wLength);
 800416a:	1c0b      	adds	r3, r1, #0
 800416c:	4291      	cmp	r1, r2
 800416e:	d900      	bls.n	8004172 <USBD_StdDevReq+0x116>
 8004170:	1c13      	adds	r3, r2, #0
 8004172:	4669      	mov	r1, sp
 8004174:	b29a      	uxth	r2, r3
 8004176:	80cb      	strh	r3, [r1, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004178:	0001      	movs	r1, r0
 800417a:	0020      	movs	r0, r4
 800417c:	f000 f999 	bl	80044b2 <USBD_CtlSendData>
    if (req->wLength == 0U)
 8004180:	88eb      	ldrh	r3, [r5, #6]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d000      	beq.n	8004188 <USBD_StdDevReq+0x12c>
 8004186:	e78d      	b.n	80040a4 <USBD_StdDevReq+0x48>
 8004188:	e7ab      	b.n	80040e2 <USBD_StdDevReq+0x86>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800418a:	88ab      	ldrh	r3, [r5, #4]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d10a      	bne.n	80041a6 <USBD_StdDevReq+0x14a>
 8004190:	88eb      	ldrh	r3, [r5, #6]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d107      	bne.n	80041a6 <USBD_StdDevReq+0x14a>
 8004196:	886e      	ldrh	r6, [r5, #2]
 8004198:	2e7f      	cmp	r6, #127	@ 0x7f
 800419a:	d804      	bhi.n	80041a6 <USBD_StdDevReq+0x14a>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800419c:	25a7      	movs	r5, #167	@ 0xa7
 800419e:	00ad      	lsls	r5, r5, #2
 80041a0:	5d63      	ldrb	r3, [r4, r5]
 80041a2:	2b03      	cmp	r3, #3
 80041a4:	d103      	bne.n	80041ae <USBD_StdDevReq+0x152>
        USBD_CtlError(pdev, req);
 80041a6:	0020      	movs	r0, r4
 80041a8:	f7ff ff4d 	bl	8004046 <USBD_CtlError.constprop.0>
        break;
 80041ac:	e77a      	b.n	80040a4 <USBD_StdDevReq+0x48>
      pdev->dev_address = dev_addr;
 80041ae:	4b44      	ldr	r3, [pc, #272]	@ (80042c0 <USBD_StdDevReq+0x264>)
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80041b0:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 80041b2:	54e1      	strb	r1, [r4, r3]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80041b4:	0020      	movs	r0, r4
 80041b6:	f000 fbac 	bl	8004912 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80041ba:	0020      	movs	r0, r4
 80041bc:	f000 f9a7 	bl	800450e <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80041c0:	2302      	movs	r3, #2
      if (dev_addr != 0U)
 80041c2:	2e00      	cmp	r6, #0
 80041c4:	d100      	bne.n	80041c8 <USBD_StdDevReq+0x16c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 80041c6:	2301      	movs	r3, #1
 80041c8:	5563      	strb	r3, [r4, r5]
 80041ca:	e76b      	b.n	80040a4 <USBD_StdDevReq+0x48>
  cfgidx = (uint8_t)(req->wValue);
 80041cc:	78a9      	ldrb	r1, [r5, #2]
 80041ce:	4d3d      	ldr	r5, [pc, #244]	@ (80042c4 <USBD_StdDevReq+0x268>)
 80041d0:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80041d2:	2901      	cmp	r1, #1
 80041d4:	d8e7      	bhi.n	80041a6 <USBD_StdDevReq+0x14a>
    switch (pdev->dev_state)
 80041d6:	23a7      	movs	r3, #167	@ 0xa7
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	5ce2      	ldrb	r2, [r4, r3]
 80041dc:	2a02      	cmp	r2, #2
 80041de:	d009      	beq.n	80041f4 <USBD_StdDevReq+0x198>
 80041e0:	2a03      	cmp	r2, #3
 80041e2:	d015      	beq.n	8004210 <USBD_StdDevReq+0x1b4>
        USBD_CtlError(pdev, req);
 80041e4:	0020      	movs	r0, r4
 80041e6:	f7ff ff2e 	bl	8004046 <USBD_CtlError.constprop.0>
        USBD_ClrClassConfig(pdev, cfgidx);
 80041ea:	0020      	movs	r0, r4
 80041ec:	7829      	ldrb	r1, [r5, #0]
 80041ee:	f7ff fdf5 	bl	8003ddc <USBD_ClrClassConfig>
        break;
 80041f2:	e757      	b.n	80040a4 <USBD_StdDevReq+0x48>
        if (cfgidx)
 80041f4:	2900      	cmp	r1, #0
 80041f6:	d100      	bne.n	80041fa <USBD_StdDevReq+0x19e>
 80041f8:	e773      	b.n	80040e2 <USBD_StdDevReq+0x86>
          pdev->dev_config = cfgidx;
 80041fa:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80041fc:	2203      	movs	r2, #3
          pdev->dev_config = cfgidx;
 80041fe:	6061      	str	r1, [r4, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004200:	54e2      	strb	r2, [r4, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004202:	0020      	movs	r0, r4
 8004204:	f7ff fddc 	bl	8003dc0 <USBD_SetClassConfig>
 8004208:	2802      	cmp	r0, #2
 800420a:	d000      	beq.n	800420e <USBD_StdDevReq+0x1b2>
 800420c:	e769      	b.n	80040e2 <USBD_StdDevReq+0x86>
 800420e:	e7ca      	b.n	80041a6 <USBD_StdDevReq+0x14a>
        if (cfgidx == 0U)
 8004210:	2900      	cmp	r1, #0
 8004212:	d106      	bne.n	8004222 <USBD_StdDevReq+0x1c6>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8004214:	2202      	movs	r2, #2
          USBD_ClrClassConfig(pdev, cfgidx);
 8004216:	0020      	movs	r0, r4
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8004218:	54e2      	strb	r2, [r4, r3]
          pdev->dev_config = cfgidx;
 800421a:	6061      	str	r1, [r4, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800421c:	f7ff fdde 	bl	8003ddc <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8004220:	e75f      	b.n	80040e2 <USBD_StdDevReq+0x86>
        else if (cfgidx != pdev->dev_config)
 8004222:	6861      	ldr	r1, [r4, #4]
 8004224:	2901      	cmp	r1, #1
 8004226:	d100      	bne.n	800422a <USBD_StdDevReq+0x1ce>
 8004228:	e75b      	b.n	80040e2 <USBD_StdDevReq+0x86>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800422a:	b2c9      	uxtb	r1, r1
 800422c:	0020      	movs	r0, r4
 800422e:	f7ff fdd5 	bl	8003ddc <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8004232:	7829      	ldrb	r1, [r5, #0]
 8004234:	6061      	str	r1, [r4, #4]
 8004236:	e7e4      	b.n	8004202 <USBD_StdDevReq+0x1a6>
  if (req->wLength != 1U)
 8004238:	88ea      	ldrh	r2, [r5, #6]
 800423a:	2a01      	cmp	r2, #1
 800423c:	d1b3      	bne.n	80041a6 <USBD_StdDevReq+0x14a>
    switch (pdev->dev_state)
 800423e:	23a7      	movs	r3, #167	@ 0xa7
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	5ce3      	ldrb	r3, [r4, r3]
 8004244:	2b02      	cmp	r3, #2
 8004246:	d806      	bhi.n	8004256 <USBD_StdDevReq+0x1fa>
 8004248:	2b00      	cmp	r3, #0
 800424a:	d0ac      	beq.n	80041a6 <USBD_StdDevReq+0x14a>
        pdev->dev_default_config = 0U;
 800424c:	2300      	movs	r3, #0
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800424e:	0021      	movs	r1, r4
        pdev->dev_default_config = 0U;
 8004250:	60a3      	str	r3, [r4, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8004252:	3108      	adds	r1, #8
 8004254:	e002      	b.n	800425c <USBD_StdDevReq+0x200>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8004256:	1d21      	adds	r1, r4, #4
    switch (pdev->dev_state)
 8004258:	2b03      	cmp	r3, #3
 800425a:	d1a4      	bne.n	80041a6 <USBD_StdDevReq+0x14a>
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800425c:	0020      	movs	r0, r4
 800425e:	f000 f928 	bl	80044b2 <USBD_CtlSendData>
      break;
 8004262:	e71f      	b.n	80040a4 <USBD_StdDevReq+0x48>
  switch (pdev->dev_state)
 8004264:	23a7      	movs	r3, #167	@ 0xa7
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	5ce3      	ldrb	r3, [r4, r3]
 800426a:	3b01      	subs	r3, #1
 800426c:	2b02      	cmp	r3, #2
 800426e:	d89a      	bhi.n	80041a6 <USBD_StdDevReq+0x14a>
      if (req->wLength != 0x2U)
 8004270:	88eb      	ldrh	r3, [r5, #6]
 8004272:	2b02      	cmp	r3, #2
 8004274:	d197      	bne.n	80041a6 <USBD_StdDevReq+0x14a>
      if (pdev->dev_remote_wakeup)
 8004276:	23a9      	movs	r3, #169	@ 0xa9
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	58e2      	ldr	r2, [r4, r3]
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800427c:	2301      	movs	r3, #1
      if (pdev->dev_remote_wakeup)
 800427e:	2a00      	cmp	r2, #0
 8004280:	d000      	beq.n	8004284 <USBD_StdDevReq+0x228>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8004282:	3302      	adds	r3, #2
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8004284:	0021      	movs	r1, r4
 8004286:	2202      	movs	r2, #2
 8004288:	60e3      	str	r3, [r4, #12]
 800428a:	310c      	adds	r1, #12
 800428c:	e7e6      	b.n	800425c <USBD_StdDevReq+0x200>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800428e:	886b      	ldrh	r3, [r5, #2]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d000      	beq.n	8004296 <USBD_StdDevReq+0x23a>
 8004294:	e706      	b.n	80040a4 <USBD_StdDevReq+0x48>
    pdev->dev_remote_wakeup = 1U;
 8004296:	22a9      	movs	r2, #169	@ 0xa9
 8004298:	0092      	lsls	r2, r2, #2
 800429a:	50a3      	str	r3, [r4, r2]
    USBD_CtlSendStatus(pdev);
 800429c:	e721      	b.n	80040e2 <USBD_StdDevReq+0x86>
  switch (pdev->dev_state)
 800429e:	23a7      	movs	r3, #167	@ 0xa7
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	5ce3      	ldrb	r3, [r4, r3]
 80042a4:	3b01      	subs	r3, #1
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d900      	bls.n	80042ac <USBD_StdDevReq+0x250>
 80042aa:	e77c      	b.n	80041a6 <USBD_StdDevReq+0x14a>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80042ac:	886b      	ldrh	r3, [r5, #2]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d000      	beq.n	80042b4 <USBD_StdDevReq+0x258>
 80042b2:	e6f7      	b.n	80040a4 <USBD_StdDevReq+0x48>
        pdev->dev_remote_wakeup = 0U;
 80042b4:	23a9      	movs	r3, #169	@ 0xa9
 80042b6:	2200      	movs	r2, #0
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	50e2      	str	r2, [r4, r3]
 80042bc:	e711      	b.n	80040e2 <USBD_StdDevReq+0x86>
 80042be:	46c0      	nop			@ (mov r8, r8)
 80042c0:	0000029e 	.word	0x0000029e
 80042c4:	200003ec 	.word	0x200003ec

080042c8 <USBD_StdItfReq>:
{
 80042c8:	2360      	movs	r3, #96	@ 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80042ca:	780a      	ldrb	r2, [r1, #0]
{
 80042cc:	b570      	push	{r4, r5, r6, lr}
 80042ce:	4013      	ands	r3, r2
 80042d0:	0004      	movs	r4, r0
 80042d2:	000d      	movs	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80042d4:	0652      	lsls	r2, r2, #25
 80042d6:	d501      	bpl.n	80042dc <USBD_StdItfReq+0x14>
 80042d8:	2b40      	cmp	r3, #64	@ 0x40
 80042da:	d119      	bne.n	8004310 <USBD_StdItfReq+0x48>
      switch (pdev->dev_state)
 80042dc:	23a7      	movs	r3, #167	@ 0xa7
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	5ce3      	ldrb	r3, [r4, r3]
 80042e2:	3b01      	subs	r3, #1
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d813      	bhi.n	8004310 <USBD_StdItfReq+0x48>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80042e8:	792b      	ldrb	r3, [r5, #4]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d810      	bhi.n	8004310 <USBD_StdItfReq+0x48>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80042ee:	23ad      	movs	r3, #173	@ 0xad
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	58e3      	ldr	r3, [r4, r3]
 80042f4:	0029      	movs	r1, r5
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	0020      	movs	r0, r4
 80042fa:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 80042fc:	88eb      	ldrh	r3, [r5, #6]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d104      	bne.n	800430c <USBD_StdItfReq+0x44>
 8004302:	2800      	cmp	r0, #0
 8004304:	d102      	bne.n	800430c <USBD_StdItfReq+0x44>
              USBD_CtlSendStatus(pdev);
 8004306:	0020      	movs	r0, r4
 8004308:	f000 f901 	bl	800450e <USBD_CtlSendStatus>
}
 800430c:	2000      	movs	r0, #0
 800430e:	bd70      	pop	{r4, r5, r6, pc}
          USBD_CtlError(pdev, req);
 8004310:	0020      	movs	r0, r4
 8004312:	f7ff fe98 	bl	8004046 <USBD_CtlError.constprop.0>
          break;
 8004316:	e7f9      	b.n	800430c <USBD_StdItfReq+0x44>

08004318 <USBD_StdEPReq>:
{
 8004318:	b570      	push	{r4, r5, r6, lr}
 800431a:	780a      	ldrb	r2, [r1, #0]
 800431c:	0004      	movs	r4, r0
 800431e:	000b      	movs	r3, r1
  ep_addr  = LOBYTE(req->wIndex);
 8004320:	8888      	ldrh	r0, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004322:	2160      	movs	r1, #96	@ 0x60
 8004324:	400a      	ands	r2, r1
 8004326:	0015      	movs	r5, r2
 8004328:	1849      	adds	r1, r1, r1
 800432a:	3d20      	subs	r5, #32
 800432c:	420d      	tst	r5, r1
 800432e:	d026      	beq.n	800437e <USBD_StdEPReq+0x66>
 8004330:	2a00      	cmp	r2, #0
 8004332:	d134      	bne.n	800439e <USBD_StdEPReq+0x86>
      switch (req->bRequest)
 8004334:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8004336:	b2c1      	uxtb	r1, r0
      switch (req->bRequest)
 8004338:	2a01      	cmp	r2, #1
 800433a:	d043      	beq.n	80043c4 <USBD_StdEPReq+0xac>
 800433c:	2a03      	cmp	r2, #3
 800433e:	d027      	beq.n	8004390 <USBD_StdEPReq+0x78>
 8004340:	2a00      	cmp	r2, #0
 8004342:	d12c      	bne.n	800439e <USBD_StdEPReq+0x86>
          switch (pdev->dev_state)
 8004344:	23a7      	movs	r3, #167	@ 0xa7
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	5ce3      	ldrb	r3, [r4, r3]
 800434a:	2b02      	cmp	r3, #2
 800434c:	d054      	beq.n	80043f8 <USBD_StdEPReq+0xe0>
 800434e:	2b03      	cmp	r3, #3
 8004350:	d125      	bne.n	800439e <USBD_StdEPReq+0x86>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004352:	230f      	movs	r3, #15
 8004354:	2214      	movs	r2, #20
 8004356:	400b      	ands	r3, r1
 8004358:	4353      	muls	r3, r2
 800435a:	18e3      	adds	r3, r4, r3
              if ((ep_addr & 0x80U) == 0x80U)
 800435c:	0600      	lsls	r0, r0, #24
 800435e:	d55b      	bpl.n	8004418 <USBD_StdEPReq+0x100>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d01b      	beq.n	800439e <USBD_StdEPReq+0x86>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004366:	237f      	movs	r3, #127	@ 0x7f
 8004368:	400b      	ands	r3, r1
 800436a:	3301      	adds	r3, #1
 800436c:	4353      	muls	r3, r2
 800436e:	18e5      	adds	r5, r4, r3
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004370:	064b      	lsls	r3, r1, #25
 8004372:	d15c      	bne.n	800442e <USBD_StdEPReq+0x116>
{
 8004374:	2300      	movs	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004376:	2202      	movs	r2, #2
 8004378:	0029      	movs	r1, r5
                pep->status = 0x0000U;
 800437a:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800437c:	e048      	b.n	8004410 <USBD_StdEPReq+0xf8>
      pdev->pClass->Setup(pdev, req);
 800437e:	22ad      	movs	r2, #173	@ 0xad
 8004380:	0092      	lsls	r2, r2, #2
 8004382:	58a2      	ldr	r2, [r4, r2]
 8004384:	0019      	movs	r1, r3
 8004386:	0020      	movs	r0, r4
 8004388:	6892      	ldr	r2, [r2, #8]
 800438a:	4790      	blx	r2
}
 800438c:	2000      	movs	r0, #0
 800438e:	bd70      	pop	{r4, r5, r6, pc}
          switch (pdev->dev_state)
 8004390:	22a7      	movs	r2, #167	@ 0xa7
 8004392:	0092      	lsls	r2, r2, #2
 8004394:	5ca2      	ldrb	r2, [r4, r2]
 8004396:	2a02      	cmp	r2, #2
 8004398:	d024      	beq.n	80043e4 <USBD_StdEPReq+0xcc>
 800439a:	2a03      	cmp	r2, #3
 800439c:	d003      	beq.n	80043a6 <USBD_StdEPReq+0x8e>
              USBD_CtlError(pdev, req);
 800439e:	0020      	movs	r0, r4
 80043a0:	f7ff fe51 	bl	8004046 <USBD_CtlError.constprop.0>
              break;
 80043a4:	e7f2      	b.n	800438c <USBD_StdEPReq+0x74>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80043a6:	885a      	ldrh	r2, [r3, #2]
 80043a8:	2a00      	cmp	r2, #0
 80043aa:	d107      	bne.n	80043bc <USBD_StdEPReq+0xa4>
                if ((ep_addr != 0x00U) &&
 80043ac:	064a      	lsls	r2, r1, #25
 80043ae:	d005      	beq.n	80043bc <USBD_StdEPReq+0xa4>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80043b0:	88db      	ldrh	r3, [r3, #6]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d102      	bne.n	80043bc <USBD_StdEPReq+0xa4>
                  USBD_LL_StallEP(pdev, ep_addr);
 80043b6:	0020      	movs	r0, r4
 80043b8:	f000 fa86 	bl	80048c8 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 80043bc:	0020      	movs	r0, r4
 80043be:	f000 f8a6 	bl	800450e <USBD_CtlSendStatus>
              break;
 80043c2:	e7e3      	b.n	800438c <USBD_StdEPReq+0x74>
          switch (pdev->dev_state)
 80043c4:	22a7      	movs	r2, #167	@ 0xa7
 80043c6:	0092      	lsls	r2, r2, #2
 80043c8:	5ca2      	ldrb	r2, [r4, r2]
 80043ca:	2a02      	cmp	r2, #2
 80043cc:	d00a      	beq.n	80043e4 <USBD_StdEPReq+0xcc>
 80043ce:	2a03      	cmp	r2, #3
 80043d0:	d1e5      	bne.n	800439e <USBD_StdEPReq+0x86>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80043d2:	885b      	ldrh	r3, [r3, #2]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d1d9      	bne.n	800438c <USBD_StdEPReq+0x74>
                if ((ep_addr & 0x7FU) != 0x00U)
 80043d8:	064b      	lsls	r3, r1, #25
 80043da:	d0ef      	beq.n	80043bc <USBD_StdEPReq+0xa4>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80043dc:	0020      	movs	r0, r4
 80043de:	f000 fa7c 	bl	80048da <USBD_LL_ClearStallEP>
 80043e2:	e7eb      	b.n	80043bc <USBD_StdEPReq+0xa4>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80043e4:	064b      	lsls	r3, r1, #25
 80043e6:	d0da      	beq.n	800439e <USBD_StdEPReq+0x86>
                USBD_LL_StallEP(pdev, ep_addr);
 80043e8:	0020      	movs	r0, r4
 80043ea:	f000 fa6d 	bl	80048c8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80043ee:	2180      	movs	r1, #128	@ 0x80
 80043f0:	0020      	movs	r0, r4
 80043f2:	f000 fa69 	bl	80048c8 <USBD_LL_StallEP>
 80043f6:	e7c9      	b.n	800438c <USBD_StdEPReq+0x74>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80043f8:	0649      	lsls	r1, r1, #25
 80043fa:	d1d0      	bne.n	800439e <USBD_StdEPReq+0x86>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80043fc:	0021      	movs	r1, r4
 80043fe:	3155      	adds	r1, #85	@ 0x55
 8004400:	31ff      	adds	r1, #255	@ 0xff
 8004402:	0600      	lsls	r0, r0, #24
 8004404:	d501      	bpl.n	800440a <USBD_StdEPReq+0xf2>
 8004406:	3941      	subs	r1, #65	@ 0x41
 8004408:	39ff      	subs	r1, #255	@ 0xff
              pep->status = 0x0000U;
 800440a:	2300      	movs	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800440c:	2202      	movs	r2, #2
              pep->status = 0x0000U;
 800440e:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004410:	0020      	movs	r0, r4
 8004412:	f000 f84e 	bl	80044b2 <USBD_CtlSendData>
              break;
 8004416:	e7b9      	b.n	800438c <USBD_StdEPReq+0x74>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004418:	33fc      	adds	r3, #252	@ 0xfc
 800441a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800441c:	2b00      	cmp	r3, #0
 800441e:	d0be      	beq.n	800439e <USBD_StdEPReq+0x86>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004420:	237f      	movs	r3, #127	@ 0x7f
 8004422:	400b      	ands	r3, r1
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004424:	435a      	muls	r2, r3
 8004426:	3255      	adds	r2, #85	@ 0x55
 8004428:	32ff      	adds	r2, #255	@ 0xff
 800442a:	18a5      	adds	r5, r4, r2
 800442c:	e7a0      	b.n	8004370 <USBD_StdEPReq+0x58>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800442e:	0020      	movs	r0, r4
 8004430:	f000 fa5c 	bl	80048ec <USBD_LL_IsStallEP>
 8004434:	2800      	cmp	r0, #0
 8004436:	d09d      	beq.n	8004374 <USBD_StdEPReq+0x5c>
 8004438:	2301      	movs	r3, #1
 800443a:	e79c      	b.n	8004376 <USBD_StdEPReq+0x5e>

0800443c <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 800443c:	780b      	ldrb	r3, [r1, #0]
 800443e:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8004440:	784b      	ldrb	r3, [r1, #1]
 8004442:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8004444:	78cb      	ldrb	r3, [r1, #3]
 8004446:	788a      	ldrb	r2, [r1, #2]
 8004448:	021b      	lsls	r3, r3, #8
 800444a:	4313      	orrs	r3, r2
 800444c:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800444e:	794b      	ldrb	r3, [r1, #5]
 8004450:	790a      	ldrb	r2, [r1, #4]
 8004452:	021b      	lsls	r3, r3, #8
 8004454:	4313      	orrs	r3, r2
 8004456:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8004458:	79cb      	ldrb	r3, [r1, #7]
 800445a:	798a      	ldrb	r2, [r1, #6]
 800445c:	021b      	lsls	r3, r3, #8
 800445e:	4313      	orrs	r3, r2
 8004460:	80c3      	strh	r3, [r0, #6]
}
 8004462:	4770      	bx	lr

08004464 <USBD_CtlError>:
{
 8004464:	b510      	push	{r4, lr}
 8004466:	0004      	movs	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8004468:	2180      	movs	r1, #128	@ 0x80
 800446a:	f000 fa2d 	bl	80048c8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800446e:	2100      	movs	r1, #0
 8004470:	0020      	movs	r0, r4
 8004472:	f000 fa29 	bl	80048c8 <USBD_LL_StallEP>
}
 8004476:	bd10      	pop	{r4, pc}

08004478 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8004478:	b570      	push	{r4, r5, r6, lr}
 800447a:	0004      	movs	r4, r0
 800447c:	000d      	movs	r5, r1
 800447e:	0016      	movs	r6, r2
  uint8_t idx = 0U;

  if (desc != NULL)
 8004480:	2800      	cmp	r0, #0
 8004482:	d00d      	beq.n	80044a0 <USBD_GetString+0x28>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8004484:	f7fb fe40 	bl	8000108 <strlen>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8004488:	b2c3      	uxtb	r3, r0
 800448a:	3301      	adds	r3, #1
 800448c:	005b      	lsls	r3, r3, #1
 800448e:	8033      	strh	r3, [r6, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8004490:	702b      	strb	r3, [r5, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8004492:	2303      	movs	r3, #3
      unicode[idx++] =  0U;
 8004494:	2000      	movs	r0, #0
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8004496:	706b      	strb	r3, [r5, #1]
 8004498:	3b01      	subs	r3, #1
    while (*desc != '\0')
 800449a:	7821      	ldrb	r1, [r4, #0]
 800449c:	2900      	cmp	r1, #0
 800449e:	d100      	bne.n	80044a2 <USBD_GetString+0x2a>
}
 80044a0:	bd70      	pop	{r4, r5, r6, pc}
      unicode[idx++] = *desc++;
 80044a2:	1c5a      	adds	r2, r3, #1
 80044a4:	54e9      	strb	r1, [r5, r3]
 80044a6:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 80044a8:	3302      	adds	r3, #2
      unicode[idx++] = *desc++;
 80044aa:	3401      	adds	r4, #1
      unicode[idx++] =  0U;
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	54a8      	strb	r0, [r5, r2]
 80044b0:	e7f3      	b.n	800449a <USBD_GetString+0x22>

080044b2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80044b2:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80044b4:	22a5      	movs	r2, #165	@ 0xa5
{
 80044b6:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80044b8:	2402      	movs	r4, #2
 80044ba:	0092      	lsls	r2, r2, #2
 80044bc:	5084      	str	r4, [r0, r2]
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80044be:	000a      	movs	r2, r1
  pdev->ep_in[0].total_length = len;
 80044c0:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80044c2:	2100      	movs	r1, #0
  pdev->ep_in[0].rem_length   = len;
 80044c4:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80044c6:	f000 fa2d 	bl	8004924 <USBD_LL_Transmit>

  return USBD_OK;
}
 80044ca:	2000      	movs	r0, #0
 80044cc:	bd10      	pop	{r4, pc}

080044ce <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80044ce:	b510      	push	{r4, lr}
 80044d0:	0013      	movs	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80044d2:	000a      	movs	r2, r1
 80044d4:	2100      	movs	r1, #0
 80044d6:	f000 fa25 	bl	8004924 <USBD_LL_Transmit>

  return USBD_OK;
}
 80044da:	2000      	movs	r0, #0
 80044dc:	bd10      	pop	{r4, pc}

080044de <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80044de:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80044e0:	22a5      	movs	r2, #165	@ 0xa5
{
 80044e2:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80044e4:	2403      	movs	r4, #3
 80044e6:	0092      	lsls	r2, r2, #2
 80044e8:	5084      	str	r4, [r0, r2]
  pdev->ep_out[0].total_length = len;
 80044ea:	0002      	movs	r2, r0
 80044ec:	32fc      	adds	r2, #252	@ 0xfc
 80044ee:	6613      	str	r3, [r2, #96]	@ 0x60
  pdev->ep_out[0].rem_length   = len;
 80044f0:	6653      	str	r3, [r2, #100]	@ 0x64

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80044f2:	000a      	movs	r2, r1
 80044f4:	2100      	movs	r1, #0
 80044f6:	f000 fa1e 	bl	8004936 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80044fa:	2000      	movs	r0, #0
 80044fc:	bd10      	pop	{r4, pc}

080044fe <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80044fe:	b510      	push	{r4, lr}
 8004500:	0013      	movs	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004502:	000a      	movs	r2, r1
 8004504:	2100      	movs	r1, #0
 8004506:	f000 fa16 	bl	8004936 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800450a:	2000      	movs	r0, #0
 800450c:	bd10      	pop	{r4, pc}

0800450e <USBD_CtlSendStatus>:
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800450e:	23a5      	movs	r3, #165	@ 0xa5
 8004510:	2204      	movs	r2, #4
 8004512:	009b      	lsls	r3, r3, #2
{
 8004514:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004516:	50c2      	str	r2, [r0, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8004518:	2300      	movs	r3, #0
 800451a:	001a      	movs	r2, r3
 800451c:	0019      	movs	r1, r3
 800451e:	f000 fa01 	bl	8004924 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004522:	2000      	movs	r0, #0
 8004524:	bd10      	pop	{r4, pc}

08004526 <USBD_CtlReceiveStatus>:
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8004526:	23a5      	movs	r3, #165	@ 0xa5
 8004528:	2205      	movs	r2, #5
 800452a:	009b      	lsls	r3, r3, #2
{
 800452c:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800452e:	50c2      	str	r2, [r0, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004530:	2300      	movs	r3, #0
 8004532:	001a      	movs	r2, r3
 8004534:	0019      	movs	r1, r3
 8004536:	f000 f9fe 	bl	8004936 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800453a:	2000      	movs	r0, #0
 800453c:	bd10      	pop	{r4, pc}
	...

08004540 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8004540:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8004542:	4c11      	ldr	r4, [pc, #68]	@ (8004588 <MX_USB_DEVICE_Init+0x48>)
 8004544:	2200      	movs	r2, #0
 8004546:	0020      	movs	r0, r4
 8004548:	4910      	ldr	r1, [pc, #64]	@ (800458c <MX_USB_DEVICE_Init+0x4c>)
 800454a:	f7ff fc11 	bl	8003d70 <USBD_Init>
 800454e:	2800      	cmp	r0, #0
 8004550:	d001      	beq.n	8004556 <MX_USB_DEVICE_Init+0x16>
  {
    Error_Handler();
 8004552:	f7fc f94b 	bl	80007ec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8004556:	0020      	movs	r0, r4
 8004558:	490d      	ldr	r1, [pc, #52]	@ (8004590 <MX_USB_DEVICE_Init+0x50>)
 800455a:	f7ff fc23 	bl	8003da4 <USBD_RegisterClass>
 800455e:	2800      	cmp	r0, #0
 8004560:	d001      	beq.n	8004566 <MX_USB_DEVICE_Init+0x26>
  {
    Error_Handler();
 8004562:	f7fc f943 	bl	80007ec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8004566:	0020      	movs	r0, r4
 8004568:	490a      	ldr	r1, [pc, #40]	@ (8004594 <MX_USB_DEVICE_Init+0x54>)
 800456a:	f7ff fbb3 	bl	8003cd4 <USBD_CDC_RegisterInterface>
 800456e:	2800      	cmp	r0, #0
 8004570:	d001      	beq.n	8004576 <MX_USB_DEVICE_Init+0x36>
  {
    Error_Handler();
 8004572:	f7fc f93b 	bl	80007ec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8004576:	0020      	movs	r0, r4
 8004578:	f7ff fc1d 	bl	8003db6 <USBD_Start>
 800457c:	2800      	cmp	r0, #0
 800457e:	d001      	beq.n	8004584 <MX_USB_DEVICE_Init+0x44>
  {
    Error_Handler();
 8004580:	f7fc f934 	bl	80007ec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8004584:	bd10      	pop	{r4, pc}
 8004586:	46c0      	nop			@ (mov r8, r8)
 8004588:	200003f0 	.word	0x200003f0
 800458c:	20000160 	.word	0x20000160
 8004590:	200000d8 	.word	0x200000d8
 8004594:	2000011c 	.word	0x2000011c

08004598 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8004598:	2000      	movs	r0, #0
 800459a:	4770      	bx	lr

0800459c <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800459c:	2000      	movs	r0, #0
 800459e:	4770      	bx	lr

080045a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80045a0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80045a2:	4c05      	ldr	r4, [pc, #20]	@ (80045b8 <CDC_Receive_FS+0x18>)
{
 80045a4:	0001      	movs	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80045a6:	0020      	movs	r0, r4
 80045a8:	f7ff fba8 	bl	8003cfc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80045ac:	0020      	movs	r0, r4
 80045ae:	f7ff fbc8 	bl	8003d42 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 80045b2:	2000      	movs	r0, #0
 80045b4:	bd10      	pop	{r4, pc}
 80045b6:	46c0      	nop			@ (mov r8, r8)
 80045b8:	200003f0 	.word	0x200003f0

080045bc <CDC_Init_FS>:
{
 80045bc:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80045be:	4c06      	ldr	r4, [pc, #24]	@ (80045d8 <CDC_Init_FS+0x1c>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	0020      	movs	r0, r4
 80045c4:	4905      	ldr	r1, [pc, #20]	@ (80045dc <CDC_Init_FS+0x20>)
 80045c6:	f7ff fb8e 	bl	8003ce6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80045ca:	0020      	movs	r0, r4
 80045cc:	4904      	ldr	r1, [pc, #16]	@ (80045e0 <CDC_Init_FS+0x24>)
 80045ce:	f7ff fb95 	bl	8003cfc <USBD_CDC_SetRxBuffer>
}
 80045d2:	2000      	movs	r0, #0
 80045d4:	bd10      	pop	{r4, pc}
 80045d6:	46c0      	nop			@ (mov r8, r8)
 80045d8:	200003f0 	.word	0x200003f0
 80045dc:	200006b4 	.word	0x200006b4
 80045e0:	20000734 	.word	0x20000734

080045e4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80045e4:	000a      	movs	r2, r1
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80045e6:	21ae      	movs	r1, #174	@ 0xae
{
 80045e8:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80045ea:	4c08      	ldr	r4, [pc, #32]	@ (800460c <CDC_Transmit_FS+0x28>)
 80045ec:	0089      	lsls	r1, r1, #2
{
 80045ee:	0003      	movs	r3, r0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80045f0:	5860      	ldr	r0, [r4, r1]
  if (hcdc->TxState != 0){
 80045f2:	39a4      	subs	r1, #164	@ 0xa4
 80045f4:	5841      	ldr	r1, [r0, r1]
    return USBD_BUSY;
 80045f6:	2001      	movs	r0, #1
  if (hcdc->TxState != 0){
 80045f8:	2900      	cmp	r1, #0
 80045fa:	d106      	bne.n	800460a <CDC_Transmit_FS+0x26>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80045fc:	0019      	movs	r1, r3
 80045fe:	0020      	movs	r0, r4
 8004600:	f7ff fb71 	bl	8003ce6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8004604:	0020      	movs	r0, r4
 8004606:	f7ff fb80 	bl	8003d0a <USBD_CDC_TransmitPacket>
  /* USER CODE END 7 */
  return result;
}
 800460a:	bd10      	pop	{r4, pc}
 800460c:	200003f0 	.word	0x200003f0

08004610 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8004610:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
 8004612:	4801      	ldr	r0, [pc, #4]	@ (8004618 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8004614:	800b      	strh	r3, [r1, #0]
}
 8004616:	4770      	bx	lr
 8004618:	2000014c 	.word	0x2000014c

0800461c <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800461c:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
 800461e:	4801      	ldr	r0, [pc, #4]	@ (8004624 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8004620:	800b      	strh	r3, [r1, #0]
}
 8004622:	4770      	bx	lr
 8004624:	20000148 	.word	0x20000148

08004628 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8004628:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800462a:	2600      	movs	r6, #0
 800462c:	0052      	lsls	r2, r2, #1
 800462e:	188a      	adds	r2, r1, r2
  for (idx = 0; idx < len; idx++)
 8004630:	428a      	cmp	r2, r1
 8004632:	d100      	bne.n	8004636 <IntToUnicode+0xe>
  }
}
 8004634:	bd70      	pop	{r4, r5, r6, pc}
    if (((value >> 28)) < 0xA)
 8004636:	0f05      	lsrs	r5, r0, #28
      pbuf[2 * idx] = (value >> 28) + '0';
 8004638:	b2ec      	uxtb	r4, r5
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800463a:	0023      	movs	r3, r4
 800463c:	3337      	adds	r3, #55	@ 0x37
    if (((value >> 28)) < 0xA)
 800463e:	2d09      	cmp	r5, #9
 8004640:	d800      	bhi.n	8004644 <IntToUnicode+0x1c>
      pbuf[2 * idx] = (value >> 28) + '0';
 8004642:	3b07      	subs	r3, #7
 8004644:	700b      	strb	r3, [r1, #0]
    pbuf[2 * idx + 1] = 0;
 8004646:	704e      	strb	r6, [r1, #1]
    value = value << 4;
 8004648:	0100      	lsls	r0, r0, #4
  for (idx = 0; idx < len; idx++)
 800464a:	3102      	adds	r1, #2
 800464c:	e7f0      	b.n	8004630 <IntToUnicode+0x8>
	...

08004650 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8004650:	231a      	movs	r3, #26
{
 8004652:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8004654:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8004656:	4b0a      	ldr	r3, [pc, #40]	@ (8004680 <USBD_FS_SerialStrDescriptor+0x30>)
 8004658:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800465a:	4b0a      	ldr	r3, [pc, #40]	@ (8004684 <USBD_FS_SerialStrDescriptor+0x34>)
  deviceserial0 += deviceserial2;
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	18c0      	adds	r0, r0, r3
  if (deviceserial0 != 0)
 8004660:	2800      	cmp	r0, #0
 8004662:	d00a      	beq.n	800467a <USBD_FS_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8004664:	4b08      	ldr	r3, [pc, #32]	@ (8004688 <USBD_FS_SerialStrDescriptor+0x38>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8004666:	2208      	movs	r2, #8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8004668:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800466a:	4908      	ldr	r1, [pc, #32]	@ (800468c <USBD_FS_SerialStrDescriptor+0x3c>)
 800466c:	f7ff ffdc 	bl	8004628 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8004670:	2204      	movs	r2, #4
 8004672:	0020      	movs	r0, r4
 8004674:	4906      	ldr	r1, [pc, #24]	@ (8004690 <USBD_FS_SerialStrDescriptor+0x40>)
 8004676:	f7ff ffd7 	bl	8004628 <IntToUnicode>
  return (uint8_t *) USBD_StringSerial;
 800467a:	4806      	ldr	r0, [pc, #24]	@ (8004694 <USBD_FS_SerialStrDescriptor+0x44>)
}
 800467c:	bd10      	pop	{r4, pc}
 800467e:	46c0      	nop			@ (mov r8, r8)
 8004680:	1ffff7ac 	.word	0x1ffff7ac
 8004684:	1ffff7b4 	.word	0x1ffff7b4
 8004688:	1ffff7b0 	.word	0x1ffff7b0
 800468c:	2000012e 	.word	0x2000012e
 8004690:	2000013e 	.word	0x2000013e
 8004694:	2000012c 	.word	0x2000012c

08004698 <USBD_FS_ManufacturerStrDescriptor>:
{
 8004698:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800469a:	4c04      	ldr	r4, [pc, #16]	@ (80046ac <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 800469c:	000a      	movs	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800469e:	0021      	movs	r1, r4
 80046a0:	4803      	ldr	r0, [pc, #12]	@ (80046b0 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80046a2:	f7ff fee9 	bl	8004478 <USBD_GetString>
}
 80046a6:	0020      	movs	r0, r4
 80046a8:	bd10      	pop	{r4, pc}
 80046aa:	46c0      	nop			@ (mov r8, r8)
 80046ac:	200007b4 	.word	0x200007b4
 80046b0:	080053e5 	.word	0x080053e5

080046b4 <USBD_FS_ProductStrDescriptor>:
{
 80046b4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80046b6:	4c04      	ldr	r4, [pc, #16]	@ (80046c8 <USBD_FS_ProductStrDescriptor+0x14>)
{
 80046b8:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80046ba:	0021      	movs	r1, r4
 80046bc:	4803      	ldr	r0, [pc, #12]	@ (80046cc <USBD_FS_ProductStrDescriptor+0x18>)
 80046be:	f7ff fedb 	bl	8004478 <USBD_GetString>
}
 80046c2:	0020      	movs	r0, r4
 80046c4:	bd10      	pop	{r4, pc}
 80046c6:	46c0      	nop			@ (mov r8, r8)
 80046c8:	200007b4 	.word	0x200007b4
 80046cc:	080053f8 	.word	0x080053f8

080046d0 <USBD_FS_ConfigStrDescriptor>:
{
 80046d0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80046d2:	4c04      	ldr	r4, [pc, #16]	@ (80046e4 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 80046d4:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80046d6:	0021      	movs	r1, r4
 80046d8:	4803      	ldr	r0, [pc, #12]	@ (80046e8 <USBD_FS_ConfigStrDescriptor+0x18>)
 80046da:	f7ff fecd 	bl	8004478 <USBD_GetString>
}
 80046de:	0020      	movs	r0, r4
 80046e0:	bd10      	pop	{r4, pc}
 80046e2:	46c0      	nop			@ (mov r8, r8)
 80046e4:	200007b4 	.word	0x200007b4
 80046e8:	0800540e 	.word	0x0800540e

080046ec <USBD_FS_InterfaceStrDescriptor>:
{
 80046ec:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80046ee:	4c04      	ldr	r4, [pc, #16]	@ (8004700 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 80046f0:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80046f2:	0021      	movs	r1, r4
 80046f4:	4803      	ldr	r0, [pc, #12]	@ (8004704 <USBD_FS_InterfaceStrDescriptor+0x18>)
 80046f6:	f7ff febf 	bl	8004478 <USBD_GetString>
}
 80046fa:	0020      	movs	r0, r4
 80046fc:	bd10      	pop	{r4, pc}
 80046fe:	46c0      	nop			@ (mov r8, r8)
 8004700:	200007b4 	.word	0x200007b4
 8004704:	08005419 	.word	0x08005419

08004708 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8004708:	2800      	cmp	r0, #0
 800470a:	d003      	beq.n	8004714 <USBD_Get_USB_Status+0xc>
 800470c:	3802      	subs	r0, #2
 800470e:	1e43      	subs	r3, r0, #1
 8004710:	4198      	sbcs	r0, r3
 8004712:	3001      	adds	r0, #1
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8004714:	4770      	bx	lr
	...

08004718 <HAL_PCD_MspInit>:
{
 8004718:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 800471a:	4b0b      	ldr	r3, [pc, #44]	@ (8004748 <HAL_PCD_MspInit+0x30>)
 800471c:	6802      	ldr	r2, [r0, #0]
 800471e:	429a      	cmp	r2, r3
 8004720:	d111      	bne.n	8004746 <HAL_PCD_MspInit+0x2e>
    __HAL_RCC_USB_CLK_ENABLE();
 8004722:	2180      	movs	r1, #128	@ 0x80
 8004724:	4b09      	ldr	r3, [pc, #36]	@ (800474c <HAL_PCD_MspInit+0x34>)
 8004726:	0409      	lsls	r1, r1, #16
 8004728:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800472a:	201f      	movs	r0, #31
    __HAL_RCC_USB_CLK_ENABLE();
 800472c:	430a      	orrs	r2, r1
 800472e:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8004730:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8004732:	69db      	ldr	r3, [r3, #28]
 8004734:	400b      	ands	r3, r1
 8004736:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8004738:	0011      	movs	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 800473a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800473c:	f7fc fa80 	bl	8000c40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8004740:	201f      	movs	r0, #31
 8004742:	f7fc faa7 	bl	8000c94 <HAL_NVIC_EnableIRQ>
}
 8004746:	bd07      	pop	{r0, r1, r2, pc}
 8004748:	40005c00 	.word	0x40005c00
 800474c:	40021000 	.word	0x40021000

08004750 <HAL_PCD_SetupStageCallback>:
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8004750:	23a6      	movs	r3, #166	@ 0xa6
{
 8004752:	b510      	push	{r4, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	18c1      	adds	r1, r0, r3
 8004758:	3340      	adds	r3, #64	@ 0x40
 800475a:	58c0      	ldr	r0, [r0, r3]
 800475c:	f7ff fb46 	bl	8003dec <USBD_LL_SetupStage>
}
 8004760:	bd10      	pop	{r4, pc}

08004762 <HAL_PCD_DataOutStageCallback>:
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8004762:	2328      	movs	r3, #40	@ 0x28
 8004764:	434b      	muls	r3, r1
 8004766:	18c3      	adds	r3, r0, r3
 8004768:	33fc      	adds	r3, #252	@ 0xfc
 800476a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800476c:	23b6      	movs	r3, #182	@ 0xb6
{
 800476e:	b510      	push	{r4, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	58c0      	ldr	r0, [r0, r3]
 8004774:	f7ff fb6c 	bl	8003e50 <USBD_LL_DataOutStage>
}
 8004778:	bd10      	pop	{r4, pc}

0800477a <HAL_PCD_DataInStageCallback>:
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800477a:	2328      	movs	r3, #40	@ 0x28
 800477c:	434b      	muls	r3, r1
 800477e:	18c3      	adds	r3, r0, r3
 8004780:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004782:	23b6      	movs	r3, #182	@ 0xb6
{
 8004784:	b510      	push	{r4, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	58c0      	ldr	r0, [r0, r3]
 800478a:	f7ff fba4 	bl	8003ed6 <USBD_LL_DataInStage>
}
 800478e:	bd10      	pop	{r4, pc}

08004790 <HAL_PCD_SOFCallback>:
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8004790:	23b6      	movs	r3, #182	@ 0xb6
{
 8004792:	b510      	push	{r4, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	58c0      	ldr	r0, [r0, r3]
 8004798:	f7ff fc46 	bl	8004028 <USBD_LL_SOF>
}
 800479c:	bd10      	pop	{r4, pc}

0800479e <HAL_PCD_ResetCallback>:
{
 800479e:	b570      	push	{r4, r5, r6, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80047a0:	7943      	ldrb	r3, [r0, #5]
{
 80047a2:	0004      	movs	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d001      	beq.n	80047ac <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 80047a8:	f7fc f820 	bl	80007ec <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80047ac:	25b6      	movs	r5, #182	@ 0xb6
 80047ae:	00ad      	lsls	r5, r5, #2
 80047b0:	2101      	movs	r1, #1
 80047b2:	5960      	ldr	r0, [r4, r5]
 80047b4:	f7ff fc1d 	bl	8003ff2 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80047b8:	5960      	ldr	r0, [r4, r5]
 80047ba:	f7ff fbf0 	bl	8003f9e <USBD_LL_Reset>
}
 80047be:	bd70      	pop	{r4, r5, r6, pc}

080047c0 <HAL_PCD_SuspendCallback>:
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80047c0:	23b6      	movs	r3, #182	@ 0xb6
{
 80047c2:	b510      	push	{r4, lr}
 80047c4:	0004      	movs	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	58c0      	ldr	r0, [r0, r3]
 80047ca:	f7ff fc15 	bl	8003ff8 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 80047ce:	7a63      	ldrb	r3, [r4, #9]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d004      	beq.n	80047de <HAL_PCD_SuspendCallback+0x1e>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80047d4:	2306      	movs	r3, #6
 80047d6:	4a02      	ldr	r2, [pc, #8]	@ (80047e0 <HAL_PCD_SuspendCallback+0x20>)
 80047d8:	6911      	ldr	r1, [r2, #16]
 80047da:	430b      	orrs	r3, r1
 80047dc:	6113      	str	r3, [r2, #16]
}
 80047de:	bd10      	pop	{r4, pc}
 80047e0:	e000ed00 	.word	0xe000ed00

080047e4 <HAL_PCD_ResumeCallback>:
{
 80047e4:	b510      	push	{r4, lr}
  if (hpcd->Init.low_power_enable)
 80047e6:	7a43      	ldrb	r3, [r0, #9]
{
 80047e8:	0004      	movs	r4, r0
  if (hpcd->Init.low_power_enable)
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d006      	beq.n	80047fc <HAL_PCD_ResumeCallback+0x18>
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80047ee:	2106      	movs	r1, #6
 80047f0:	4a05      	ldr	r2, [pc, #20]	@ (8004808 <HAL_PCD_ResumeCallback+0x24>)
 80047f2:	6913      	ldr	r3, [r2, #16]
 80047f4:	438b      	bics	r3, r1
 80047f6:	6113      	str	r3, [r2, #16]
  SystemClock_Config();
 80047f8:	f7fb fe18 	bl	800042c <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80047fc:	23b6      	movs	r3, #182	@ 0xb6
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	58e0      	ldr	r0, [r4, r3]
 8004802:	f7ff fc05 	bl	8004010 <USBD_LL_Resume>
}
 8004806:	bd10      	pop	{r4, pc}
 8004808:	e000ed00 	.word	0xe000ed00

0800480c <USBD_LL_Init>:
  hpcd_USB_FS.pData = pdev;
 800480c:	23b6      	movs	r3, #182	@ 0xb6
{
 800480e:	b570      	push	{r4, r5, r6, lr}
 8004810:	0004      	movs	r4, r0
  hpcd_USB_FS.pData = pdev;
 8004812:	481c      	ldr	r0, [pc, #112]	@ (8004884 <USBD_LL_Init+0x78>)
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	50c4      	str	r4, [r0, r3]
  hpcd_USB_FS.Instance = USB;
 8004818:	4b1b      	ldr	r3, [pc, #108]	@ (8004888 <USBD_LL_Init+0x7c>)
  pdev->pData = &hpcd_USB_FS;
 800481a:	25b0      	movs	r5, #176	@ 0xb0
  hpcd_USB_FS.Instance = USB;
 800481c:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800481e:	2382      	movs	r3, #130	@ 0x82
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	8083      	strh	r3, [r0, #4]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004824:	2302      	movs	r3, #2
 8004826:	71c3      	strb	r3, [r0, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8004828:	2300      	movs	r3, #0
  pdev->pData = &hpcd_USB_FS;
 800482a:	00ad      	lsls	r5, r5, #2
 800482c:	5160      	str	r0, [r4, r5]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800482e:	7243      	strb	r3, [r0, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8004830:	8143      	strh	r3, [r0, #10]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8004832:	f7fc fbfd 	bl	8001030 <HAL_PCD_Init>
 8004836:	2800      	cmp	r0, #0
 8004838:	d001      	beq.n	800483e <USBD_LL_Init+0x32>
    Error_Handler( );
 800483a:	f7fb ffd7 	bl	80007ec <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800483e:	2200      	movs	r2, #0
 8004840:	5960      	ldr	r0, [r4, r5]
 8004842:	0011      	movs	r1, r2
 8004844:	2318      	movs	r3, #24
 8004846:	f7fd fa32 	bl	8001cae <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800484a:	5960      	ldr	r0, [r4, r5]
 800484c:	2358      	movs	r3, #88	@ 0x58
 800484e:	2200      	movs	r2, #0
 8004850:	2180      	movs	r1, #128	@ 0x80
 8004852:	f7fd fa2c 	bl	8001cae <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8004856:	5960      	ldr	r0, [r4, r5]
 8004858:	23c0      	movs	r3, #192	@ 0xc0
 800485a:	2200      	movs	r2, #0
 800485c:	2181      	movs	r1, #129	@ 0x81
 800485e:	f7fd fa26 	bl	8001cae <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8004862:	2388      	movs	r3, #136	@ 0x88
 8004864:	5960      	ldr	r0, [r4, r5]
 8004866:	2200      	movs	r2, #0
 8004868:	2101      	movs	r1, #1
 800486a:	005b      	lsls	r3, r3, #1
 800486c:	f7fd fa1f 	bl	8001cae <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8004870:	2380      	movs	r3, #128	@ 0x80
 8004872:	5960      	ldr	r0, [r4, r5]
 8004874:	2200      	movs	r2, #0
 8004876:	2182      	movs	r1, #130	@ 0x82
 8004878:	005b      	lsls	r3, r3, #1
 800487a:	f7fd fa18 	bl	8001cae <HAL_PCDEx_PMAConfig>
}
 800487e:	2000      	movs	r0, #0
 8004880:	bd70      	pop	{r4, r5, r6, pc}
 8004882:	46c0      	nop			@ (mov r8, r8)
 8004884:	20000bd4 	.word	0x20000bd4
 8004888:	40005c00 	.word	0x40005c00

0800488c <USBD_LL_Start>:
  hal_status = HAL_PCD_Start(pdev->pData);
 800488c:	23b0      	movs	r3, #176	@ 0xb0
{
 800488e:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	58c0      	ldr	r0, [r0, r3]
 8004894:	f7fc fc18 	bl	80010c8 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004898:	f7ff ff36 	bl	8004708 <USBD_Get_USB_Status>
}
 800489c:	bd10      	pop	{r4, pc}

0800489e <USBD_LL_OpenEP>:
{
 800489e:	b510      	push	{r4, lr}
 80048a0:	0014      	movs	r4, r2
 80048a2:	001a      	movs	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80048a4:	0023      	movs	r3, r4
 80048a6:	24b0      	movs	r4, #176	@ 0xb0
 80048a8:	00a4      	lsls	r4, r4, #2
 80048aa:	5900      	ldr	r0, [r0, r4]
 80048ac:	f7fd f916 	bl	8001adc <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80048b0:	f7ff ff2a 	bl	8004708 <USBD_Get_USB_Status>
}
 80048b4:	bd10      	pop	{r4, pc}

080048b6 <USBD_LL_CloseEP>:
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80048b6:	23b0      	movs	r3, #176	@ 0xb0
{
 80048b8:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	58c0      	ldr	r0, [r0, r3]
 80048be:	f7fd f939 	bl	8001b34 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80048c2:	f7ff ff21 	bl	8004708 <USBD_Get_USB_Status>
}
 80048c6:	bd10      	pop	{r4, pc}

080048c8 <USBD_LL_StallEP>:
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80048c8:	23b0      	movs	r3, #176	@ 0xb0
{
 80048ca:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	58c0      	ldr	r0, [r0, r3]
 80048d0:	f7fd f991 	bl	8001bf6 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80048d4:	f7ff ff18 	bl	8004708 <USBD_Get_USB_Status>
}
 80048d8:	bd10      	pop	{r4, pc}

080048da <USBD_LL_ClearStallEP>:
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80048da:	23b0      	movs	r3, #176	@ 0xb0
{
 80048dc:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	58c0      	ldr	r0, [r0, r3]
 80048e2:	f7fd f9b6 	bl	8001c52 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80048e6:	f7ff ff0f 	bl	8004708 <USBD_Get_USB_Status>
}
 80048ea:	bd10      	pop	{r4, pc}

080048ec <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80048ec:	23b0      	movs	r3, #176	@ 0xb0
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	58c3      	ldr	r3, [r0, r3]
  if((ep_addr & 0x80) == 0x80)
 80048f2:	b248      	sxtb	r0, r1
 80048f4:	2228      	movs	r2, #40	@ 0x28
 80048f6:	2800      	cmp	r0, #0
 80048f8:	da05      	bge.n	8004906 <USBD_LL_IsStallEP+0x1a>
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80048fa:	207f      	movs	r0, #127	@ 0x7f
 80048fc:	4001      	ands	r1, r0
 80048fe:	434a      	muls	r2, r1
 8004900:	189b      	adds	r3, r3, r2
 8004902:	7c98      	ldrb	r0, [r3, #18]
}
 8004904:	4770      	bx	lr
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8004906:	434a      	muls	r2, r1
 8004908:	189b      	adds	r3, r3, r2
 800490a:	3353      	adds	r3, #83	@ 0x53
 800490c:	33ff      	adds	r3, #255	@ 0xff
 800490e:	7818      	ldrb	r0, [r3, #0]
 8004910:	e7f8      	b.n	8004904 <USBD_LL_IsStallEP+0x18>

08004912 <USBD_LL_SetUSBAddress>:
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004912:	23b0      	movs	r3, #176	@ 0xb0
{
 8004914:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	58c0      	ldr	r0, [r0, r3]
 800491a:	f7fc fbe8 	bl	80010ee <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800491e:	f7ff fef3 	bl	8004708 <USBD_Get_USB_Status>
}
 8004922:	bd10      	pop	{r4, pc}

08004924 <USBD_LL_Transmit>:
{
 8004924:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8004926:	24b0      	movs	r4, #176	@ 0xb0
 8004928:	00a4      	lsls	r4, r4, #2
 800492a:	5900      	ldr	r0, [r0, r4]
 800492c:	f7fd f94b 	bl	8001bc6 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004930:	f7ff feea 	bl	8004708 <USBD_Get_USB_Status>
}
 8004934:	bd10      	pop	{r4, pc}

08004936 <USBD_LL_PrepareReceive>:
{
 8004936:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8004938:	24b0      	movs	r4, #176	@ 0xb0
 800493a:	00a4      	lsls	r4, r4, #2
 800493c:	5900      	ldr	r0, [r0, r4]
 800493e:	f7fd f91f 	bl	8001b80 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004942:	f7ff fee1 	bl	8004708 <USBD_Get_USB_Status>
}
 8004946:	bd10      	pop	{r4, pc}

08004948 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8004948:	23b0      	movs	r3, #176	@ 0xb0
{
 800494a:	b510      	push	{r4, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	58c0      	ldr	r0, [r0, r3]
 8004950:	f7fd f931 	bl	8001bb6 <HAL_PCD_EP_GetRxCount>
}
 8004954:	bd10      	pop	{r4, pc}
	...

08004958 <USBD_static_malloc>:
  return mem;
 8004958:	4800      	ldr	r0, [pc, #0]	@ (800495c <USBD_static_malloc+0x4>)
}
 800495a:	4770      	bx	lr
 800495c:	200009b4 	.word	0x200009b4

08004960 <USBD_static_free>:
}
 8004960:	4770      	bx	lr
	...

08004964 <std>:
 8004964:	2300      	movs	r3, #0
 8004966:	b510      	push	{r4, lr}
 8004968:	0004      	movs	r4, r0
 800496a:	6003      	str	r3, [r0, #0]
 800496c:	6043      	str	r3, [r0, #4]
 800496e:	6083      	str	r3, [r0, #8]
 8004970:	8181      	strh	r1, [r0, #12]
 8004972:	6643      	str	r3, [r0, #100]	@ 0x64
 8004974:	81c2      	strh	r2, [r0, #14]
 8004976:	6103      	str	r3, [r0, #16]
 8004978:	6143      	str	r3, [r0, #20]
 800497a:	6183      	str	r3, [r0, #24]
 800497c:	0019      	movs	r1, r3
 800497e:	2208      	movs	r2, #8
 8004980:	305c      	adds	r0, #92	@ 0x5c
 8004982:	f000 f9ff 	bl	8004d84 <memset>
 8004986:	4b0b      	ldr	r3, [pc, #44]	@ (80049b4 <std+0x50>)
 8004988:	6224      	str	r4, [r4, #32]
 800498a:	6263      	str	r3, [r4, #36]	@ 0x24
 800498c:	4b0a      	ldr	r3, [pc, #40]	@ (80049b8 <std+0x54>)
 800498e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004990:	4b0a      	ldr	r3, [pc, #40]	@ (80049bc <std+0x58>)
 8004992:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004994:	4b0a      	ldr	r3, [pc, #40]	@ (80049c0 <std+0x5c>)
 8004996:	6323      	str	r3, [r4, #48]	@ 0x30
 8004998:	4b0a      	ldr	r3, [pc, #40]	@ (80049c4 <std+0x60>)
 800499a:	429c      	cmp	r4, r3
 800499c:	d005      	beq.n	80049aa <std+0x46>
 800499e:	4b0a      	ldr	r3, [pc, #40]	@ (80049c8 <std+0x64>)
 80049a0:	429c      	cmp	r4, r3
 80049a2:	d002      	beq.n	80049aa <std+0x46>
 80049a4:	4b09      	ldr	r3, [pc, #36]	@ (80049cc <std+0x68>)
 80049a6:	429c      	cmp	r4, r3
 80049a8:	d103      	bne.n	80049b2 <std+0x4e>
 80049aa:	0020      	movs	r0, r4
 80049ac:	3058      	adds	r0, #88	@ 0x58
 80049ae:	f000 fa69 	bl	8004e84 <__retarget_lock_init_recursive>
 80049b2:	bd10      	pop	{r4, pc}
 80049b4:	08004bad 	.word	0x08004bad
 80049b8:	08004bd5 	.word	0x08004bd5
 80049bc:	08004c0d 	.word	0x08004c0d
 80049c0:	08004c39 	.word	0x08004c39
 80049c4:	20000eb0 	.word	0x20000eb0
 80049c8:	20000f18 	.word	0x20000f18
 80049cc:	20000f80 	.word	0x20000f80

080049d0 <stdio_exit_handler>:
 80049d0:	b510      	push	{r4, lr}
 80049d2:	4a03      	ldr	r2, [pc, #12]	@ (80049e0 <stdio_exit_handler+0x10>)
 80049d4:	4903      	ldr	r1, [pc, #12]	@ (80049e4 <stdio_exit_handler+0x14>)
 80049d6:	4804      	ldr	r0, [pc, #16]	@ (80049e8 <stdio_exit_handler+0x18>)
 80049d8:	f000 f86c 	bl	8004ab4 <_fwalk_sglue>
 80049dc:	bd10      	pop	{r4, pc}
 80049de:	46c0      	nop			@ (mov r8, r8)
 80049e0:	2000017c 	.word	0x2000017c
 80049e4:	080051b1 	.word	0x080051b1
 80049e8:	2000018c 	.word	0x2000018c

080049ec <cleanup_stdio>:
 80049ec:	6841      	ldr	r1, [r0, #4]
 80049ee:	4b0b      	ldr	r3, [pc, #44]	@ (8004a1c <cleanup_stdio+0x30>)
 80049f0:	b510      	push	{r4, lr}
 80049f2:	0004      	movs	r4, r0
 80049f4:	4299      	cmp	r1, r3
 80049f6:	d001      	beq.n	80049fc <cleanup_stdio+0x10>
 80049f8:	f000 fbda 	bl	80051b0 <_fflush_r>
 80049fc:	68a1      	ldr	r1, [r4, #8]
 80049fe:	4b08      	ldr	r3, [pc, #32]	@ (8004a20 <cleanup_stdio+0x34>)
 8004a00:	4299      	cmp	r1, r3
 8004a02:	d002      	beq.n	8004a0a <cleanup_stdio+0x1e>
 8004a04:	0020      	movs	r0, r4
 8004a06:	f000 fbd3 	bl	80051b0 <_fflush_r>
 8004a0a:	68e1      	ldr	r1, [r4, #12]
 8004a0c:	4b05      	ldr	r3, [pc, #20]	@ (8004a24 <cleanup_stdio+0x38>)
 8004a0e:	4299      	cmp	r1, r3
 8004a10:	d002      	beq.n	8004a18 <cleanup_stdio+0x2c>
 8004a12:	0020      	movs	r0, r4
 8004a14:	f000 fbcc 	bl	80051b0 <_fflush_r>
 8004a18:	bd10      	pop	{r4, pc}
 8004a1a:	46c0      	nop			@ (mov r8, r8)
 8004a1c:	20000eb0 	.word	0x20000eb0
 8004a20:	20000f18 	.word	0x20000f18
 8004a24:	20000f80 	.word	0x20000f80

08004a28 <global_stdio_init.part.0>:
 8004a28:	b510      	push	{r4, lr}
 8004a2a:	4b09      	ldr	r3, [pc, #36]	@ (8004a50 <global_stdio_init.part.0+0x28>)
 8004a2c:	4a09      	ldr	r2, [pc, #36]	@ (8004a54 <global_stdio_init.part.0+0x2c>)
 8004a2e:	2104      	movs	r1, #4
 8004a30:	601a      	str	r2, [r3, #0]
 8004a32:	4809      	ldr	r0, [pc, #36]	@ (8004a58 <global_stdio_init.part.0+0x30>)
 8004a34:	2200      	movs	r2, #0
 8004a36:	f7ff ff95 	bl	8004964 <std>
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	2109      	movs	r1, #9
 8004a3e:	4807      	ldr	r0, [pc, #28]	@ (8004a5c <global_stdio_init.part.0+0x34>)
 8004a40:	f7ff ff90 	bl	8004964 <std>
 8004a44:	2202      	movs	r2, #2
 8004a46:	2112      	movs	r1, #18
 8004a48:	4805      	ldr	r0, [pc, #20]	@ (8004a60 <global_stdio_init.part.0+0x38>)
 8004a4a:	f7ff ff8b 	bl	8004964 <std>
 8004a4e:	bd10      	pop	{r4, pc}
 8004a50:	20000fe8 	.word	0x20000fe8
 8004a54:	080049d1 	.word	0x080049d1
 8004a58:	20000eb0 	.word	0x20000eb0
 8004a5c:	20000f18 	.word	0x20000f18
 8004a60:	20000f80 	.word	0x20000f80

08004a64 <__sfp_lock_acquire>:
 8004a64:	b510      	push	{r4, lr}
 8004a66:	4802      	ldr	r0, [pc, #8]	@ (8004a70 <__sfp_lock_acquire+0xc>)
 8004a68:	f000 fa0d 	bl	8004e86 <__retarget_lock_acquire_recursive>
 8004a6c:	bd10      	pop	{r4, pc}
 8004a6e:	46c0      	nop			@ (mov r8, r8)
 8004a70:	20000ff1 	.word	0x20000ff1

08004a74 <__sfp_lock_release>:
 8004a74:	b510      	push	{r4, lr}
 8004a76:	4802      	ldr	r0, [pc, #8]	@ (8004a80 <__sfp_lock_release+0xc>)
 8004a78:	f000 fa06 	bl	8004e88 <__retarget_lock_release_recursive>
 8004a7c:	bd10      	pop	{r4, pc}
 8004a7e:	46c0      	nop			@ (mov r8, r8)
 8004a80:	20000ff1 	.word	0x20000ff1

08004a84 <__sinit>:
 8004a84:	b510      	push	{r4, lr}
 8004a86:	0004      	movs	r4, r0
 8004a88:	f7ff ffec 	bl	8004a64 <__sfp_lock_acquire>
 8004a8c:	6a23      	ldr	r3, [r4, #32]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d002      	beq.n	8004a98 <__sinit+0x14>
 8004a92:	f7ff ffef 	bl	8004a74 <__sfp_lock_release>
 8004a96:	bd10      	pop	{r4, pc}
 8004a98:	4b04      	ldr	r3, [pc, #16]	@ (8004aac <__sinit+0x28>)
 8004a9a:	6223      	str	r3, [r4, #32]
 8004a9c:	4b04      	ldr	r3, [pc, #16]	@ (8004ab0 <__sinit+0x2c>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d1f6      	bne.n	8004a92 <__sinit+0xe>
 8004aa4:	f7ff ffc0 	bl	8004a28 <global_stdio_init.part.0>
 8004aa8:	e7f3      	b.n	8004a92 <__sinit+0xe>
 8004aaa:	46c0      	nop			@ (mov r8, r8)
 8004aac:	080049ed 	.word	0x080049ed
 8004ab0:	20000fe8 	.word	0x20000fe8

08004ab4 <_fwalk_sglue>:
 8004ab4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ab6:	0014      	movs	r4, r2
 8004ab8:	2600      	movs	r6, #0
 8004aba:	9000      	str	r0, [sp, #0]
 8004abc:	9101      	str	r1, [sp, #4]
 8004abe:	68a5      	ldr	r5, [r4, #8]
 8004ac0:	6867      	ldr	r7, [r4, #4]
 8004ac2:	3f01      	subs	r7, #1
 8004ac4:	d504      	bpl.n	8004ad0 <_fwalk_sglue+0x1c>
 8004ac6:	6824      	ldr	r4, [r4, #0]
 8004ac8:	2c00      	cmp	r4, #0
 8004aca:	d1f8      	bne.n	8004abe <_fwalk_sglue+0xa>
 8004acc:	0030      	movs	r0, r6
 8004ace:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004ad0:	89ab      	ldrh	r3, [r5, #12]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d908      	bls.n	8004ae8 <_fwalk_sglue+0x34>
 8004ad6:	220e      	movs	r2, #14
 8004ad8:	5eab      	ldrsh	r3, [r5, r2]
 8004ada:	3301      	adds	r3, #1
 8004adc:	d004      	beq.n	8004ae8 <_fwalk_sglue+0x34>
 8004ade:	0029      	movs	r1, r5
 8004ae0:	9800      	ldr	r0, [sp, #0]
 8004ae2:	9b01      	ldr	r3, [sp, #4]
 8004ae4:	4798      	blx	r3
 8004ae6:	4306      	orrs	r6, r0
 8004ae8:	3568      	adds	r5, #104	@ 0x68
 8004aea:	e7ea      	b.n	8004ac2 <_fwalk_sglue+0xe>

08004aec <_puts_r>:
 8004aec:	6a03      	ldr	r3, [r0, #32]
 8004aee:	b570      	push	{r4, r5, r6, lr}
 8004af0:	0005      	movs	r5, r0
 8004af2:	000e      	movs	r6, r1
 8004af4:	6884      	ldr	r4, [r0, #8]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <_puts_r+0x12>
 8004afa:	f7ff ffc3 	bl	8004a84 <__sinit>
 8004afe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004b00:	07db      	lsls	r3, r3, #31
 8004b02:	d405      	bmi.n	8004b10 <_puts_r+0x24>
 8004b04:	89a3      	ldrh	r3, [r4, #12]
 8004b06:	059b      	lsls	r3, r3, #22
 8004b08:	d402      	bmi.n	8004b10 <_puts_r+0x24>
 8004b0a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b0c:	f000 f9bb 	bl	8004e86 <__retarget_lock_acquire_recursive>
 8004b10:	89a3      	ldrh	r3, [r4, #12]
 8004b12:	071b      	lsls	r3, r3, #28
 8004b14:	d502      	bpl.n	8004b1c <_puts_r+0x30>
 8004b16:	6923      	ldr	r3, [r4, #16]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d11f      	bne.n	8004b5c <_puts_r+0x70>
 8004b1c:	0021      	movs	r1, r4
 8004b1e:	0028      	movs	r0, r5
 8004b20:	f000 f8d2 	bl	8004cc8 <__swsetup_r>
 8004b24:	2800      	cmp	r0, #0
 8004b26:	d019      	beq.n	8004b5c <_puts_r+0x70>
 8004b28:	2501      	movs	r5, #1
 8004b2a:	426d      	negs	r5, r5
 8004b2c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004b2e:	07db      	lsls	r3, r3, #31
 8004b30:	d405      	bmi.n	8004b3e <_puts_r+0x52>
 8004b32:	89a3      	ldrh	r3, [r4, #12]
 8004b34:	059b      	lsls	r3, r3, #22
 8004b36:	d402      	bmi.n	8004b3e <_puts_r+0x52>
 8004b38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b3a:	f000 f9a5 	bl	8004e88 <__retarget_lock_release_recursive>
 8004b3e:	0028      	movs	r0, r5
 8004b40:	bd70      	pop	{r4, r5, r6, pc}
 8004b42:	3601      	adds	r6, #1
 8004b44:	60a3      	str	r3, [r4, #8]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	da04      	bge.n	8004b54 <_puts_r+0x68>
 8004b4a:	69a2      	ldr	r2, [r4, #24]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	dc16      	bgt.n	8004b7e <_puts_r+0x92>
 8004b50:	290a      	cmp	r1, #10
 8004b52:	d014      	beq.n	8004b7e <_puts_r+0x92>
 8004b54:	6823      	ldr	r3, [r4, #0]
 8004b56:	1c5a      	adds	r2, r3, #1
 8004b58:	6022      	str	r2, [r4, #0]
 8004b5a:	7019      	strb	r1, [r3, #0]
 8004b5c:	68a3      	ldr	r3, [r4, #8]
 8004b5e:	7831      	ldrb	r1, [r6, #0]
 8004b60:	3b01      	subs	r3, #1
 8004b62:	2900      	cmp	r1, #0
 8004b64:	d1ed      	bne.n	8004b42 <_puts_r+0x56>
 8004b66:	60a3      	str	r3, [r4, #8]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	da0f      	bge.n	8004b8c <_puts_r+0xa0>
 8004b6c:	0022      	movs	r2, r4
 8004b6e:	0028      	movs	r0, r5
 8004b70:	310a      	adds	r1, #10
 8004b72:	f000 f867 	bl	8004c44 <__swbuf_r>
 8004b76:	3001      	adds	r0, #1
 8004b78:	d0d6      	beq.n	8004b28 <_puts_r+0x3c>
 8004b7a:	250a      	movs	r5, #10
 8004b7c:	e7d6      	b.n	8004b2c <_puts_r+0x40>
 8004b7e:	0022      	movs	r2, r4
 8004b80:	0028      	movs	r0, r5
 8004b82:	f000 f85f 	bl	8004c44 <__swbuf_r>
 8004b86:	3001      	adds	r0, #1
 8004b88:	d1e8      	bne.n	8004b5c <_puts_r+0x70>
 8004b8a:	e7cd      	b.n	8004b28 <_puts_r+0x3c>
 8004b8c:	6823      	ldr	r3, [r4, #0]
 8004b8e:	1c5a      	adds	r2, r3, #1
 8004b90:	6022      	str	r2, [r4, #0]
 8004b92:	220a      	movs	r2, #10
 8004b94:	701a      	strb	r2, [r3, #0]
 8004b96:	e7f0      	b.n	8004b7a <_puts_r+0x8e>

08004b98 <puts>:
 8004b98:	b510      	push	{r4, lr}
 8004b9a:	4b03      	ldr	r3, [pc, #12]	@ (8004ba8 <puts+0x10>)
 8004b9c:	0001      	movs	r1, r0
 8004b9e:	6818      	ldr	r0, [r3, #0]
 8004ba0:	f7ff ffa4 	bl	8004aec <_puts_r>
 8004ba4:	bd10      	pop	{r4, pc}
 8004ba6:	46c0      	nop			@ (mov r8, r8)
 8004ba8:	20000188 	.word	0x20000188

08004bac <__sread>:
 8004bac:	b570      	push	{r4, r5, r6, lr}
 8004bae:	000c      	movs	r4, r1
 8004bb0:	250e      	movs	r5, #14
 8004bb2:	5f49      	ldrsh	r1, [r1, r5]
 8004bb4:	f000 f914 	bl	8004de0 <_read_r>
 8004bb8:	2800      	cmp	r0, #0
 8004bba:	db03      	blt.n	8004bc4 <__sread+0x18>
 8004bbc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004bbe:	181b      	adds	r3, r3, r0
 8004bc0:	6563      	str	r3, [r4, #84]	@ 0x54
 8004bc2:	bd70      	pop	{r4, r5, r6, pc}
 8004bc4:	89a3      	ldrh	r3, [r4, #12]
 8004bc6:	4a02      	ldr	r2, [pc, #8]	@ (8004bd0 <__sread+0x24>)
 8004bc8:	4013      	ands	r3, r2
 8004bca:	81a3      	strh	r3, [r4, #12]
 8004bcc:	e7f9      	b.n	8004bc2 <__sread+0x16>
 8004bce:	46c0      	nop			@ (mov r8, r8)
 8004bd0:	ffffefff 	.word	0xffffefff

08004bd4 <__swrite>:
 8004bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bd6:	001f      	movs	r7, r3
 8004bd8:	898b      	ldrh	r3, [r1, #12]
 8004bda:	0005      	movs	r5, r0
 8004bdc:	000c      	movs	r4, r1
 8004bde:	0016      	movs	r6, r2
 8004be0:	05db      	lsls	r3, r3, #23
 8004be2:	d505      	bpl.n	8004bf0 <__swrite+0x1c>
 8004be4:	230e      	movs	r3, #14
 8004be6:	5ec9      	ldrsh	r1, [r1, r3]
 8004be8:	2200      	movs	r2, #0
 8004bea:	2302      	movs	r3, #2
 8004bec:	f000 f8e4 	bl	8004db8 <_lseek_r>
 8004bf0:	89a3      	ldrh	r3, [r4, #12]
 8004bf2:	4a05      	ldr	r2, [pc, #20]	@ (8004c08 <__swrite+0x34>)
 8004bf4:	0028      	movs	r0, r5
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	81a3      	strh	r3, [r4, #12]
 8004bfa:	0032      	movs	r2, r6
 8004bfc:	230e      	movs	r3, #14
 8004bfe:	5ee1      	ldrsh	r1, [r4, r3]
 8004c00:	003b      	movs	r3, r7
 8004c02:	f000 f901 	bl	8004e08 <_write_r>
 8004c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c08:	ffffefff 	.word	0xffffefff

08004c0c <__sseek>:
 8004c0c:	b570      	push	{r4, r5, r6, lr}
 8004c0e:	000c      	movs	r4, r1
 8004c10:	250e      	movs	r5, #14
 8004c12:	5f49      	ldrsh	r1, [r1, r5]
 8004c14:	f000 f8d0 	bl	8004db8 <_lseek_r>
 8004c18:	89a3      	ldrh	r3, [r4, #12]
 8004c1a:	1c42      	adds	r2, r0, #1
 8004c1c:	d103      	bne.n	8004c26 <__sseek+0x1a>
 8004c1e:	4a05      	ldr	r2, [pc, #20]	@ (8004c34 <__sseek+0x28>)
 8004c20:	4013      	ands	r3, r2
 8004c22:	81a3      	strh	r3, [r4, #12]
 8004c24:	bd70      	pop	{r4, r5, r6, pc}
 8004c26:	2280      	movs	r2, #128	@ 0x80
 8004c28:	0152      	lsls	r2, r2, #5
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	81a3      	strh	r3, [r4, #12]
 8004c2e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004c30:	e7f8      	b.n	8004c24 <__sseek+0x18>
 8004c32:	46c0      	nop			@ (mov r8, r8)
 8004c34:	ffffefff 	.word	0xffffefff

08004c38 <__sclose>:
 8004c38:	b510      	push	{r4, lr}
 8004c3a:	230e      	movs	r3, #14
 8004c3c:	5ec9      	ldrsh	r1, [r1, r3]
 8004c3e:	f000 f8a9 	bl	8004d94 <_close_r>
 8004c42:	bd10      	pop	{r4, pc}

08004c44 <__swbuf_r>:
 8004c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c46:	0006      	movs	r6, r0
 8004c48:	000d      	movs	r5, r1
 8004c4a:	0014      	movs	r4, r2
 8004c4c:	2800      	cmp	r0, #0
 8004c4e:	d004      	beq.n	8004c5a <__swbuf_r+0x16>
 8004c50:	6a03      	ldr	r3, [r0, #32]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d101      	bne.n	8004c5a <__swbuf_r+0x16>
 8004c56:	f7ff ff15 	bl	8004a84 <__sinit>
 8004c5a:	69a3      	ldr	r3, [r4, #24]
 8004c5c:	60a3      	str	r3, [r4, #8]
 8004c5e:	89a3      	ldrh	r3, [r4, #12]
 8004c60:	071b      	lsls	r3, r3, #28
 8004c62:	d502      	bpl.n	8004c6a <__swbuf_r+0x26>
 8004c64:	6923      	ldr	r3, [r4, #16]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d109      	bne.n	8004c7e <__swbuf_r+0x3a>
 8004c6a:	0021      	movs	r1, r4
 8004c6c:	0030      	movs	r0, r6
 8004c6e:	f000 f82b 	bl	8004cc8 <__swsetup_r>
 8004c72:	2800      	cmp	r0, #0
 8004c74:	d003      	beq.n	8004c7e <__swbuf_r+0x3a>
 8004c76:	2501      	movs	r5, #1
 8004c78:	426d      	negs	r5, r5
 8004c7a:	0028      	movs	r0, r5
 8004c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c7e:	6923      	ldr	r3, [r4, #16]
 8004c80:	6820      	ldr	r0, [r4, #0]
 8004c82:	b2ef      	uxtb	r7, r5
 8004c84:	1ac0      	subs	r0, r0, r3
 8004c86:	6963      	ldr	r3, [r4, #20]
 8004c88:	b2ed      	uxtb	r5, r5
 8004c8a:	4283      	cmp	r3, r0
 8004c8c:	dc05      	bgt.n	8004c9a <__swbuf_r+0x56>
 8004c8e:	0021      	movs	r1, r4
 8004c90:	0030      	movs	r0, r6
 8004c92:	f000 fa8d 	bl	80051b0 <_fflush_r>
 8004c96:	2800      	cmp	r0, #0
 8004c98:	d1ed      	bne.n	8004c76 <__swbuf_r+0x32>
 8004c9a:	68a3      	ldr	r3, [r4, #8]
 8004c9c:	3001      	adds	r0, #1
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	60a3      	str	r3, [r4, #8]
 8004ca2:	6823      	ldr	r3, [r4, #0]
 8004ca4:	1c5a      	adds	r2, r3, #1
 8004ca6:	6022      	str	r2, [r4, #0]
 8004ca8:	701f      	strb	r7, [r3, #0]
 8004caa:	6963      	ldr	r3, [r4, #20]
 8004cac:	4283      	cmp	r3, r0
 8004cae:	d004      	beq.n	8004cba <__swbuf_r+0x76>
 8004cb0:	89a3      	ldrh	r3, [r4, #12]
 8004cb2:	07db      	lsls	r3, r3, #31
 8004cb4:	d5e1      	bpl.n	8004c7a <__swbuf_r+0x36>
 8004cb6:	2d0a      	cmp	r5, #10
 8004cb8:	d1df      	bne.n	8004c7a <__swbuf_r+0x36>
 8004cba:	0021      	movs	r1, r4
 8004cbc:	0030      	movs	r0, r6
 8004cbe:	f000 fa77 	bl	80051b0 <_fflush_r>
 8004cc2:	2800      	cmp	r0, #0
 8004cc4:	d0d9      	beq.n	8004c7a <__swbuf_r+0x36>
 8004cc6:	e7d6      	b.n	8004c76 <__swbuf_r+0x32>

08004cc8 <__swsetup_r>:
 8004cc8:	4b2d      	ldr	r3, [pc, #180]	@ (8004d80 <__swsetup_r+0xb8>)
 8004cca:	b570      	push	{r4, r5, r6, lr}
 8004ccc:	0005      	movs	r5, r0
 8004cce:	6818      	ldr	r0, [r3, #0]
 8004cd0:	000c      	movs	r4, r1
 8004cd2:	2800      	cmp	r0, #0
 8004cd4:	d004      	beq.n	8004ce0 <__swsetup_r+0x18>
 8004cd6:	6a03      	ldr	r3, [r0, #32]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d101      	bne.n	8004ce0 <__swsetup_r+0x18>
 8004cdc:	f7ff fed2 	bl	8004a84 <__sinit>
 8004ce0:	230c      	movs	r3, #12
 8004ce2:	5ee2      	ldrsh	r2, [r4, r3]
 8004ce4:	0713      	lsls	r3, r2, #28
 8004ce6:	d423      	bmi.n	8004d30 <__swsetup_r+0x68>
 8004ce8:	06d3      	lsls	r3, r2, #27
 8004cea:	d407      	bmi.n	8004cfc <__swsetup_r+0x34>
 8004cec:	2309      	movs	r3, #9
 8004cee:	602b      	str	r3, [r5, #0]
 8004cf0:	2340      	movs	r3, #64	@ 0x40
 8004cf2:	2001      	movs	r0, #1
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	81a3      	strh	r3, [r4, #12]
 8004cf8:	4240      	negs	r0, r0
 8004cfa:	e03a      	b.n	8004d72 <__swsetup_r+0xaa>
 8004cfc:	0752      	lsls	r2, r2, #29
 8004cfe:	d513      	bpl.n	8004d28 <__swsetup_r+0x60>
 8004d00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004d02:	2900      	cmp	r1, #0
 8004d04:	d008      	beq.n	8004d18 <__swsetup_r+0x50>
 8004d06:	0023      	movs	r3, r4
 8004d08:	3344      	adds	r3, #68	@ 0x44
 8004d0a:	4299      	cmp	r1, r3
 8004d0c:	d002      	beq.n	8004d14 <__swsetup_r+0x4c>
 8004d0e:	0028      	movs	r0, r5
 8004d10:	f000 f8cc 	bl	8004eac <_free_r>
 8004d14:	2300      	movs	r3, #0
 8004d16:	6363      	str	r3, [r4, #52]	@ 0x34
 8004d18:	2224      	movs	r2, #36	@ 0x24
 8004d1a:	89a3      	ldrh	r3, [r4, #12]
 8004d1c:	4393      	bics	r3, r2
 8004d1e:	81a3      	strh	r3, [r4, #12]
 8004d20:	2300      	movs	r3, #0
 8004d22:	6063      	str	r3, [r4, #4]
 8004d24:	6923      	ldr	r3, [r4, #16]
 8004d26:	6023      	str	r3, [r4, #0]
 8004d28:	2308      	movs	r3, #8
 8004d2a:	89a2      	ldrh	r2, [r4, #12]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	81a3      	strh	r3, [r4, #12]
 8004d30:	6923      	ldr	r3, [r4, #16]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10b      	bne.n	8004d4e <__swsetup_r+0x86>
 8004d36:	21a0      	movs	r1, #160	@ 0xa0
 8004d38:	2280      	movs	r2, #128	@ 0x80
 8004d3a:	89a3      	ldrh	r3, [r4, #12]
 8004d3c:	0089      	lsls	r1, r1, #2
 8004d3e:	0092      	lsls	r2, r2, #2
 8004d40:	400b      	ands	r3, r1
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d003      	beq.n	8004d4e <__swsetup_r+0x86>
 8004d46:	0021      	movs	r1, r4
 8004d48:	0028      	movs	r0, r5
 8004d4a:	f000 fa87 	bl	800525c <__smakebuf_r>
 8004d4e:	230c      	movs	r3, #12
 8004d50:	5ee2      	ldrsh	r2, [r4, r3]
 8004d52:	2101      	movs	r1, #1
 8004d54:	0013      	movs	r3, r2
 8004d56:	400b      	ands	r3, r1
 8004d58:	420a      	tst	r2, r1
 8004d5a:	d00b      	beq.n	8004d74 <__swsetup_r+0xac>
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	60a3      	str	r3, [r4, #8]
 8004d60:	6963      	ldr	r3, [r4, #20]
 8004d62:	425b      	negs	r3, r3
 8004d64:	61a3      	str	r3, [r4, #24]
 8004d66:	2000      	movs	r0, #0
 8004d68:	6923      	ldr	r3, [r4, #16]
 8004d6a:	4283      	cmp	r3, r0
 8004d6c:	d101      	bne.n	8004d72 <__swsetup_r+0xaa>
 8004d6e:	0613      	lsls	r3, r2, #24
 8004d70:	d4be      	bmi.n	8004cf0 <__swsetup_r+0x28>
 8004d72:	bd70      	pop	{r4, r5, r6, pc}
 8004d74:	0791      	lsls	r1, r2, #30
 8004d76:	d400      	bmi.n	8004d7a <__swsetup_r+0xb2>
 8004d78:	6963      	ldr	r3, [r4, #20]
 8004d7a:	60a3      	str	r3, [r4, #8]
 8004d7c:	e7f3      	b.n	8004d66 <__swsetup_r+0x9e>
 8004d7e:	46c0      	nop			@ (mov r8, r8)
 8004d80:	20000188 	.word	0x20000188

08004d84 <memset>:
 8004d84:	0003      	movs	r3, r0
 8004d86:	1882      	adds	r2, r0, r2
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d100      	bne.n	8004d8e <memset+0xa>
 8004d8c:	4770      	bx	lr
 8004d8e:	7019      	strb	r1, [r3, #0]
 8004d90:	3301      	adds	r3, #1
 8004d92:	e7f9      	b.n	8004d88 <memset+0x4>

08004d94 <_close_r>:
 8004d94:	2300      	movs	r3, #0
 8004d96:	b570      	push	{r4, r5, r6, lr}
 8004d98:	4d06      	ldr	r5, [pc, #24]	@ (8004db4 <_close_r+0x20>)
 8004d9a:	0004      	movs	r4, r0
 8004d9c:	0008      	movs	r0, r1
 8004d9e:	602b      	str	r3, [r5, #0]
 8004da0:	f7fb fe24 	bl	80009ec <_close>
 8004da4:	1c43      	adds	r3, r0, #1
 8004da6:	d103      	bne.n	8004db0 <_close_r+0x1c>
 8004da8:	682b      	ldr	r3, [r5, #0]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d000      	beq.n	8004db0 <_close_r+0x1c>
 8004dae:	6023      	str	r3, [r4, #0]
 8004db0:	bd70      	pop	{r4, r5, r6, pc}
 8004db2:	46c0      	nop			@ (mov r8, r8)
 8004db4:	20000fec 	.word	0x20000fec

08004db8 <_lseek_r>:
 8004db8:	b570      	push	{r4, r5, r6, lr}
 8004dba:	0004      	movs	r4, r0
 8004dbc:	0008      	movs	r0, r1
 8004dbe:	0011      	movs	r1, r2
 8004dc0:	001a      	movs	r2, r3
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	4d05      	ldr	r5, [pc, #20]	@ (8004ddc <_lseek_r+0x24>)
 8004dc6:	602b      	str	r3, [r5, #0]
 8004dc8:	f7fb fe1a 	bl	8000a00 <_lseek>
 8004dcc:	1c43      	adds	r3, r0, #1
 8004dce:	d103      	bne.n	8004dd8 <_lseek_r+0x20>
 8004dd0:	682b      	ldr	r3, [r5, #0]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d000      	beq.n	8004dd8 <_lseek_r+0x20>
 8004dd6:	6023      	str	r3, [r4, #0]
 8004dd8:	bd70      	pop	{r4, r5, r6, pc}
 8004dda:	46c0      	nop			@ (mov r8, r8)
 8004ddc:	20000fec 	.word	0x20000fec

08004de0 <_read_r>:
 8004de0:	b570      	push	{r4, r5, r6, lr}
 8004de2:	0004      	movs	r4, r0
 8004de4:	0008      	movs	r0, r1
 8004de6:	0011      	movs	r1, r2
 8004de8:	001a      	movs	r2, r3
 8004dea:	2300      	movs	r3, #0
 8004dec:	4d05      	ldr	r5, [pc, #20]	@ (8004e04 <_read_r+0x24>)
 8004dee:	602b      	str	r3, [r5, #0]
 8004df0:	f7fb fde2 	bl	80009b8 <_read>
 8004df4:	1c43      	adds	r3, r0, #1
 8004df6:	d103      	bne.n	8004e00 <_read_r+0x20>
 8004df8:	682b      	ldr	r3, [r5, #0]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d000      	beq.n	8004e00 <_read_r+0x20>
 8004dfe:	6023      	str	r3, [r4, #0]
 8004e00:	bd70      	pop	{r4, r5, r6, pc}
 8004e02:	46c0      	nop			@ (mov r8, r8)
 8004e04:	20000fec 	.word	0x20000fec

08004e08 <_write_r>:
 8004e08:	b570      	push	{r4, r5, r6, lr}
 8004e0a:	0004      	movs	r4, r0
 8004e0c:	0008      	movs	r0, r1
 8004e0e:	0011      	movs	r1, r2
 8004e10:	001a      	movs	r2, r3
 8004e12:	2300      	movs	r3, #0
 8004e14:	4d05      	ldr	r5, [pc, #20]	@ (8004e2c <_write_r+0x24>)
 8004e16:	602b      	str	r3, [r5, #0]
 8004e18:	f7fb fddb 	bl	80009d2 <_write>
 8004e1c:	1c43      	adds	r3, r0, #1
 8004e1e:	d103      	bne.n	8004e28 <_write_r+0x20>
 8004e20:	682b      	ldr	r3, [r5, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d000      	beq.n	8004e28 <_write_r+0x20>
 8004e26:	6023      	str	r3, [r4, #0]
 8004e28:	bd70      	pop	{r4, r5, r6, pc}
 8004e2a:	46c0      	nop			@ (mov r8, r8)
 8004e2c:	20000fec 	.word	0x20000fec

08004e30 <__errno>:
 8004e30:	4b01      	ldr	r3, [pc, #4]	@ (8004e38 <__errno+0x8>)
 8004e32:	6818      	ldr	r0, [r3, #0]
 8004e34:	4770      	bx	lr
 8004e36:	46c0      	nop			@ (mov r8, r8)
 8004e38:	20000188 	.word	0x20000188

08004e3c <__libc_init_array>:
 8004e3c:	b570      	push	{r4, r5, r6, lr}
 8004e3e:	2600      	movs	r6, #0
 8004e40:	4c0c      	ldr	r4, [pc, #48]	@ (8004e74 <__libc_init_array+0x38>)
 8004e42:	4d0d      	ldr	r5, [pc, #52]	@ (8004e78 <__libc_init_array+0x3c>)
 8004e44:	1b64      	subs	r4, r4, r5
 8004e46:	10a4      	asrs	r4, r4, #2
 8004e48:	42a6      	cmp	r6, r4
 8004e4a:	d109      	bne.n	8004e60 <__libc_init_array+0x24>
 8004e4c:	2600      	movs	r6, #0
 8004e4e:	f000 fa7d 	bl	800534c <_init>
 8004e52:	4c0a      	ldr	r4, [pc, #40]	@ (8004e7c <__libc_init_array+0x40>)
 8004e54:	4d0a      	ldr	r5, [pc, #40]	@ (8004e80 <__libc_init_array+0x44>)
 8004e56:	1b64      	subs	r4, r4, r5
 8004e58:	10a4      	asrs	r4, r4, #2
 8004e5a:	42a6      	cmp	r6, r4
 8004e5c:	d105      	bne.n	8004e6a <__libc_init_array+0x2e>
 8004e5e:	bd70      	pop	{r4, r5, r6, pc}
 8004e60:	00b3      	lsls	r3, r6, #2
 8004e62:	58eb      	ldr	r3, [r5, r3]
 8004e64:	4798      	blx	r3
 8004e66:	3601      	adds	r6, #1
 8004e68:	e7ee      	b.n	8004e48 <__libc_init_array+0xc>
 8004e6a:	00b3      	lsls	r3, r6, #2
 8004e6c:	58eb      	ldr	r3, [r5, r3]
 8004e6e:	4798      	blx	r3
 8004e70:	3601      	adds	r6, #1
 8004e72:	e7f2      	b.n	8004e5a <__libc_init_array+0x1e>
 8004e74:	08005428 	.word	0x08005428
 8004e78:	08005428 	.word	0x08005428
 8004e7c:	0800542c 	.word	0x0800542c
 8004e80:	08005428 	.word	0x08005428

08004e84 <__retarget_lock_init_recursive>:
 8004e84:	4770      	bx	lr

08004e86 <__retarget_lock_acquire_recursive>:
 8004e86:	4770      	bx	lr

08004e88 <__retarget_lock_release_recursive>:
 8004e88:	4770      	bx	lr

08004e8a <strcpy>:
 8004e8a:	0003      	movs	r3, r0
 8004e8c:	780a      	ldrb	r2, [r1, #0]
 8004e8e:	3101      	adds	r1, #1
 8004e90:	701a      	strb	r2, [r3, #0]
 8004e92:	3301      	adds	r3, #1
 8004e94:	2a00      	cmp	r2, #0
 8004e96:	d1f9      	bne.n	8004e8c <strcpy+0x2>
 8004e98:	4770      	bx	lr

08004e9a <memcpy>:
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	b510      	push	{r4, lr}
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d100      	bne.n	8004ea4 <memcpy+0xa>
 8004ea2:	bd10      	pop	{r4, pc}
 8004ea4:	5ccc      	ldrb	r4, [r1, r3]
 8004ea6:	54c4      	strb	r4, [r0, r3]
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	e7f8      	b.n	8004e9e <memcpy+0x4>

08004eac <_free_r>:
 8004eac:	b570      	push	{r4, r5, r6, lr}
 8004eae:	0005      	movs	r5, r0
 8004eb0:	1e0c      	subs	r4, r1, #0
 8004eb2:	d010      	beq.n	8004ed6 <_free_r+0x2a>
 8004eb4:	3c04      	subs	r4, #4
 8004eb6:	6823      	ldr	r3, [r4, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	da00      	bge.n	8004ebe <_free_r+0x12>
 8004ebc:	18e4      	adds	r4, r4, r3
 8004ebe:	0028      	movs	r0, r5
 8004ec0:	f000 f8e0 	bl	8005084 <__malloc_lock>
 8004ec4:	4a1d      	ldr	r2, [pc, #116]	@ (8004f3c <_free_r+0x90>)
 8004ec6:	6813      	ldr	r3, [r2, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d105      	bne.n	8004ed8 <_free_r+0x2c>
 8004ecc:	6063      	str	r3, [r4, #4]
 8004ece:	6014      	str	r4, [r2, #0]
 8004ed0:	0028      	movs	r0, r5
 8004ed2:	f000 f8df 	bl	8005094 <__malloc_unlock>
 8004ed6:	bd70      	pop	{r4, r5, r6, pc}
 8004ed8:	42a3      	cmp	r3, r4
 8004eda:	d908      	bls.n	8004eee <_free_r+0x42>
 8004edc:	6820      	ldr	r0, [r4, #0]
 8004ede:	1821      	adds	r1, r4, r0
 8004ee0:	428b      	cmp	r3, r1
 8004ee2:	d1f3      	bne.n	8004ecc <_free_r+0x20>
 8004ee4:	6819      	ldr	r1, [r3, #0]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	1809      	adds	r1, r1, r0
 8004eea:	6021      	str	r1, [r4, #0]
 8004eec:	e7ee      	b.n	8004ecc <_free_r+0x20>
 8004eee:	001a      	movs	r2, r3
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d001      	beq.n	8004efa <_free_r+0x4e>
 8004ef6:	42a3      	cmp	r3, r4
 8004ef8:	d9f9      	bls.n	8004eee <_free_r+0x42>
 8004efa:	6811      	ldr	r1, [r2, #0]
 8004efc:	1850      	adds	r0, r2, r1
 8004efe:	42a0      	cmp	r0, r4
 8004f00:	d10b      	bne.n	8004f1a <_free_r+0x6e>
 8004f02:	6820      	ldr	r0, [r4, #0]
 8004f04:	1809      	adds	r1, r1, r0
 8004f06:	1850      	adds	r0, r2, r1
 8004f08:	6011      	str	r1, [r2, #0]
 8004f0a:	4283      	cmp	r3, r0
 8004f0c:	d1e0      	bne.n	8004ed0 <_free_r+0x24>
 8004f0e:	6818      	ldr	r0, [r3, #0]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	1841      	adds	r1, r0, r1
 8004f14:	6011      	str	r1, [r2, #0]
 8004f16:	6053      	str	r3, [r2, #4]
 8004f18:	e7da      	b.n	8004ed0 <_free_r+0x24>
 8004f1a:	42a0      	cmp	r0, r4
 8004f1c:	d902      	bls.n	8004f24 <_free_r+0x78>
 8004f1e:	230c      	movs	r3, #12
 8004f20:	602b      	str	r3, [r5, #0]
 8004f22:	e7d5      	b.n	8004ed0 <_free_r+0x24>
 8004f24:	6820      	ldr	r0, [r4, #0]
 8004f26:	1821      	adds	r1, r4, r0
 8004f28:	428b      	cmp	r3, r1
 8004f2a:	d103      	bne.n	8004f34 <_free_r+0x88>
 8004f2c:	6819      	ldr	r1, [r3, #0]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	1809      	adds	r1, r1, r0
 8004f32:	6021      	str	r1, [r4, #0]
 8004f34:	6063      	str	r3, [r4, #4]
 8004f36:	6054      	str	r4, [r2, #4]
 8004f38:	e7ca      	b.n	8004ed0 <_free_r+0x24>
 8004f3a:	46c0      	nop			@ (mov r8, r8)
 8004f3c:	20000ff8 	.word	0x20000ff8

08004f40 <sbrk_aligned>:
 8004f40:	b570      	push	{r4, r5, r6, lr}
 8004f42:	4e0f      	ldr	r6, [pc, #60]	@ (8004f80 <sbrk_aligned+0x40>)
 8004f44:	000d      	movs	r5, r1
 8004f46:	6831      	ldr	r1, [r6, #0]
 8004f48:	0004      	movs	r4, r0
 8004f4a:	2900      	cmp	r1, #0
 8004f4c:	d102      	bne.n	8004f54 <sbrk_aligned+0x14>
 8004f4e:	f000 f9eb 	bl	8005328 <_sbrk_r>
 8004f52:	6030      	str	r0, [r6, #0]
 8004f54:	0029      	movs	r1, r5
 8004f56:	0020      	movs	r0, r4
 8004f58:	f000 f9e6 	bl	8005328 <_sbrk_r>
 8004f5c:	1c43      	adds	r3, r0, #1
 8004f5e:	d103      	bne.n	8004f68 <sbrk_aligned+0x28>
 8004f60:	2501      	movs	r5, #1
 8004f62:	426d      	negs	r5, r5
 8004f64:	0028      	movs	r0, r5
 8004f66:	bd70      	pop	{r4, r5, r6, pc}
 8004f68:	2303      	movs	r3, #3
 8004f6a:	1cc5      	adds	r5, r0, #3
 8004f6c:	439d      	bics	r5, r3
 8004f6e:	42a8      	cmp	r0, r5
 8004f70:	d0f8      	beq.n	8004f64 <sbrk_aligned+0x24>
 8004f72:	1a29      	subs	r1, r5, r0
 8004f74:	0020      	movs	r0, r4
 8004f76:	f000 f9d7 	bl	8005328 <_sbrk_r>
 8004f7a:	3001      	adds	r0, #1
 8004f7c:	d1f2      	bne.n	8004f64 <sbrk_aligned+0x24>
 8004f7e:	e7ef      	b.n	8004f60 <sbrk_aligned+0x20>
 8004f80:	20000ff4 	.word	0x20000ff4

08004f84 <_malloc_r>:
 8004f84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f86:	2203      	movs	r2, #3
 8004f88:	1ccb      	adds	r3, r1, #3
 8004f8a:	4393      	bics	r3, r2
 8004f8c:	3308      	adds	r3, #8
 8004f8e:	0005      	movs	r5, r0
 8004f90:	001f      	movs	r7, r3
 8004f92:	2b0c      	cmp	r3, #12
 8004f94:	d234      	bcs.n	8005000 <_malloc_r+0x7c>
 8004f96:	270c      	movs	r7, #12
 8004f98:	42b9      	cmp	r1, r7
 8004f9a:	d833      	bhi.n	8005004 <_malloc_r+0x80>
 8004f9c:	0028      	movs	r0, r5
 8004f9e:	f000 f871 	bl	8005084 <__malloc_lock>
 8004fa2:	4e37      	ldr	r6, [pc, #220]	@ (8005080 <_malloc_r+0xfc>)
 8004fa4:	6833      	ldr	r3, [r6, #0]
 8004fa6:	001c      	movs	r4, r3
 8004fa8:	2c00      	cmp	r4, #0
 8004faa:	d12f      	bne.n	800500c <_malloc_r+0x88>
 8004fac:	0039      	movs	r1, r7
 8004fae:	0028      	movs	r0, r5
 8004fb0:	f7ff ffc6 	bl	8004f40 <sbrk_aligned>
 8004fb4:	0004      	movs	r4, r0
 8004fb6:	1c43      	adds	r3, r0, #1
 8004fb8:	d15f      	bne.n	800507a <_malloc_r+0xf6>
 8004fba:	6834      	ldr	r4, [r6, #0]
 8004fbc:	9400      	str	r4, [sp, #0]
 8004fbe:	9b00      	ldr	r3, [sp, #0]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d14a      	bne.n	800505a <_malloc_r+0xd6>
 8004fc4:	2c00      	cmp	r4, #0
 8004fc6:	d052      	beq.n	800506e <_malloc_r+0xea>
 8004fc8:	6823      	ldr	r3, [r4, #0]
 8004fca:	0028      	movs	r0, r5
 8004fcc:	18e3      	adds	r3, r4, r3
 8004fce:	9900      	ldr	r1, [sp, #0]
 8004fd0:	9301      	str	r3, [sp, #4]
 8004fd2:	f000 f9a9 	bl	8005328 <_sbrk_r>
 8004fd6:	9b01      	ldr	r3, [sp, #4]
 8004fd8:	4283      	cmp	r3, r0
 8004fda:	d148      	bne.n	800506e <_malloc_r+0xea>
 8004fdc:	6823      	ldr	r3, [r4, #0]
 8004fde:	0028      	movs	r0, r5
 8004fe0:	1aff      	subs	r7, r7, r3
 8004fe2:	0039      	movs	r1, r7
 8004fe4:	f7ff ffac 	bl	8004f40 <sbrk_aligned>
 8004fe8:	3001      	adds	r0, #1
 8004fea:	d040      	beq.n	800506e <_malloc_r+0xea>
 8004fec:	6823      	ldr	r3, [r4, #0]
 8004fee:	19db      	adds	r3, r3, r7
 8004ff0:	6023      	str	r3, [r4, #0]
 8004ff2:	6833      	ldr	r3, [r6, #0]
 8004ff4:	685a      	ldr	r2, [r3, #4]
 8004ff6:	2a00      	cmp	r2, #0
 8004ff8:	d133      	bne.n	8005062 <_malloc_r+0xde>
 8004ffa:	9b00      	ldr	r3, [sp, #0]
 8004ffc:	6033      	str	r3, [r6, #0]
 8004ffe:	e019      	b.n	8005034 <_malloc_r+0xb0>
 8005000:	2b00      	cmp	r3, #0
 8005002:	dac9      	bge.n	8004f98 <_malloc_r+0x14>
 8005004:	230c      	movs	r3, #12
 8005006:	602b      	str	r3, [r5, #0]
 8005008:	2000      	movs	r0, #0
 800500a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800500c:	6821      	ldr	r1, [r4, #0]
 800500e:	1bc9      	subs	r1, r1, r7
 8005010:	d420      	bmi.n	8005054 <_malloc_r+0xd0>
 8005012:	290b      	cmp	r1, #11
 8005014:	d90a      	bls.n	800502c <_malloc_r+0xa8>
 8005016:	19e2      	adds	r2, r4, r7
 8005018:	6027      	str	r7, [r4, #0]
 800501a:	42a3      	cmp	r3, r4
 800501c:	d104      	bne.n	8005028 <_malloc_r+0xa4>
 800501e:	6032      	str	r2, [r6, #0]
 8005020:	6863      	ldr	r3, [r4, #4]
 8005022:	6011      	str	r1, [r2, #0]
 8005024:	6053      	str	r3, [r2, #4]
 8005026:	e005      	b.n	8005034 <_malloc_r+0xb0>
 8005028:	605a      	str	r2, [r3, #4]
 800502a:	e7f9      	b.n	8005020 <_malloc_r+0x9c>
 800502c:	6862      	ldr	r2, [r4, #4]
 800502e:	42a3      	cmp	r3, r4
 8005030:	d10e      	bne.n	8005050 <_malloc_r+0xcc>
 8005032:	6032      	str	r2, [r6, #0]
 8005034:	0028      	movs	r0, r5
 8005036:	f000 f82d 	bl	8005094 <__malloc_unlock>
 800503a:	0020      	movs	r0, r4
 800503c:	2207      	movs	r2, #7
 800503e:	300b      	adds	r0, #11
 8005040:	1d23      	adds	r3, r4, #4
 8005042:	4390      	bics	r0, r2
 8005044:	1ac2      	subs	r2, r0, r3
 8005046:	4298      	cmp	r0, r3
 8005048:	d0df      	beq.n	800500a <_malloc_r+0x86>
 800504a:	1a1b      	subs	r3, r3, r0
 800504c:	50a3      	str	r3, [r4, r2]
 800504e:	e7dc      	b.n	800500a <_malloc_r+0x86>
 8005050:	605a      	str	r2, [r3, #4]
 8005052:	e7ef      	b.n	8005034 <_malloc_r+0xb0>
 8005054:	0023      	movs	r3, r4
 8005056:	6864      	ldr	r4, [r4, #4]
 8005058:	e7a6      	b.n	8004fa8 <_malloc_r+0x24>
 800505a:	9c00      	ldr	r4, [sp, #0]
 800505c:	6863      	ldr	r3, [r4, #4]
 800505e:	9300      	str	r3, [sp, #0]
 8005060:	e7ad      	b.n	8004fbe <_malloc_r+0x3a>
 8005062:	001a      	movs	r2, r3
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	42a3      	cmp	r3, r4
 8005068:	d1fb      	bne.n	8005062 <_malloc_r+0xde>
 800506a:	2300      	movs	r3, #0
 800506c:	e7da      	b.n	8005024 <_malloc_r+0xa0>
 800506e:	230c      	movs	r3, #12
 8005070:	0028      	movs	r0, r5
 8005072:	602b      	str	r3, [r5, #0]
 8005074:	f000 f80e 	bl	8005094 <__malloc_unlock>
 8005078:	e7c6      	b.n	8005008 <_malloc_r+0x84>
 800507a:	6007      	str	r7, [r0, #0]
 800507c:	e7da      	b.n	8005034 <_malloc_r+0xb0>
 800507e:	46c0      	nop			@ (mov r8, r8)
 8005080:	20000ff8 	.word	0x20000ff8

08005084 <__malloc_lock>:
 8005084:	b510      	push	{r4, lr}
 8005086:	4802      	ldr	r0, [pc, #8]	@ (8005090 <__malloc_lock+0xc>)
 8005088:	f7ff fefd 	bl	8004e86 <__retarget_lock_acquire_recursive>
 800508c:	bd10      	pop	{r4, pc}
 800508e:	46c0      	nop			@ (mov r8, r8)
 8005090:	20000ff0 	.word	0x20000ff0

08005094 <__malloc_unlock>:
 8005094:	b510      	push	{r4, lr}
 8005096:	4802      	ldr	r0, [pc, #8]	@ (80050a0 <__malloc_unlock+0xc>)
 8005098:	f7ff fef6 	bl	8004e88 <__retarget_lock_release_recursive>
 800509c:	bd10      	pop	{r4, pc}
 800509e:	46c0      	nop			@ (mov r8, r8)
 80050a0:	20000ff0 	.word	0x20000ff0

080050a4 <__sflush_r>:
 80050a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050a6:	220c      	movs	r2, #12
 80050a8:	5e8b      	ldrsh	r3, [r1, r2]
 80050aa:	0005      	movs	r5, r0
 80050ac:	000c      	movs	r4, r1
 80050ae:	071a      	lsls	r2, r3, #28
 80050b0:	d456      	bmi.n	8005160 <__sflush_r+0xbc>
 80050b2:	684a      	ldr	r2, [r1, #4]
 80050b4:	2a00      	cmp	r2, #0
 80050b6:	dc02      	bgt.n	80050be <__sflush_r+0x1a>
 80050b8:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80050ba:	2a00      	cmp	r2, #0
 80050bc:	dd4e      	ble.n	800515c <__sflush_r+0xb8>
 80050be:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80050c0:	2f00      	cmp	r7, #0
 80050c2:	d04b      	beq.n	800515c <__sflush_r+0xb8>
 80050c4:	2200      	movs	r2, #0
 80050c6:	2080      	movs	r0, #128	@ 0x80
 80050c8:	682e      	ldr	r6, [r5, #0]
 80050ca:	602a      	str	r2, [r5, #0]
 80050cc:	001a      	movs	r2, r3
 80050ce:	0140      	lsls	r0, r0, #5
 80050d0:	6a21      	ldr	r1, [r4, #32]
 80050d2:	4002      	ands	r2, r0
 80050d4:	4203      	tst	r3, r0
 80050d6:	d033      	beq.n	8005140 <__sflush_r+0x9c>
 80050d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80050da:	89a3      	ldrh	r3, [r4, #12]
 80050dc:	075b      	lsls	r3, r3, #29
 80050de:	d506      	bpl.n	80050ee <__sflush_r+0x4a>
 80050e0:	6863      	ldr	r3, [r4, #4]
 80050e2:	1ad2      	subs	r2, r2, r3
 80050e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d001      	beq.n	80050ee <__sflush_r+0x4a>
 80050ea:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80050ec:	1ad2      	subs	r2, r2, r3
 80050ee:	2300      	movs	r3, #0
 80050f0:	0028      	movs	r0, r5
 80050f2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80050f4:	6a21      	ldr	r1, [r4, #32]
 80050f6:	47b8      	blx	r7
 80050f8:	89a2      	ldrh	r2, [r4, #12]
 80050fa:	1c43      	adds	r3, r0, #1
 80050fc:	d106      	bne.n	800510c <__sflush_r+0x68>
 80050fe:	6829      	ldr	r1, [r5, #0]
 8005100:	291d      	cmp	r1, #29
 8005102:	d846      	bhi.n	8005192 <__sflush_r+0xee>
 8005104:	4b29      	ldr	r3, [pc, #164]	@ (80051ac <__sflush_r+0x108>)
 8005106:	410b      	asrs	r3, r1
 8005108:	07db      	lsls	r3, r3, #31
 800510a:	d442      	bmi.n	8005192 <__sflush_r+0xee>
 800510c:	2300      	movs	r3, #0
 800510e:	6063      	str	r3, [r4, #4]
 8005110:	6923      	ldr	r3, [r4, #16]
 8005112:	6023      	str	r3, [r4, #0]
 8005114:	04d2      	lsls	r2, r2, #19
 8005116:	d505      	bpl.n	8005124 <__sflush_r+0x80>
 8005118:	1c43      	adds	r3, r0, #1
 800511a:	d102      	bne.n	8005122 <__sflush_r+0x7e>
 800511c:	682b      	ldr	r3, [r5, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d100      	bne.n	8005124 <__sflush_r+0x80>
 8005122:	6560      	str	r0, [r4, #84]	@ 0x54
 8005124:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005126:	602e      	str	r6, [r5, #0]
 8005128:	2900      	cmp	r1, #0
 800512a:	d017      	beq.n	800515c <__sflush_r+0xb8>
 800512c:	0023      	movs	r3, r4
 800512e:	3344      	adds	r3, #68	@ 0x44
 8005130:	4299      	cmp	r1, r3
 8005132:	d002      	beq.n	800513a <__sflush_r+0x96>
 8005134:	0028      	movs	r0, r5
 8005136:	f7ff feb9 	bl	8004eac <_free_r>
 800513a:	2300      	movs	r3, #0
 800513c:	6363      	str	r3, [r4, #52]	@ 0x34
 800513e:	e00d      	b.n	800515c <__sflush_r+0xb8>
 8005140:	2301      	movs	r3, #1
 8005142:	0028      	movs	r0, r5
 8005144:	47b8      	blx	r7
 8005146:	0002      	movs	r2, r0
 8005148:	1c43      	adds	r3, r0, #1
 800514a:	d1c6      	bne.n	80050da <__sflush_r+0x36>
 800514c:	682b      	ldr	r3, [r5, #0]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d0c3      	beq.n	80050da <__sflush_r+0x36>
 8005152:	2b1d      	cmp	r3, #29
 8005154:	d001      	beq.n	800515a <__sflush_r+0xb6>
 8005156:	2b16      	cmp	r3, #22
 8005158:	d11a      	bne.n	8005190 <__sflush_r+0xec>
 800515a:	602e      	str	r6, [r5, #0]
 800515c:	2000      	movs	r0, #0
 800515e:	e01e      	b.n	800519e <__sflush_r+0xfa>
 8005160:	690e      	ldr	r6, [r1, #16]
 8005162:	2e00      	cmp	r6, #0
 8005164:	d0fa      	beq.n	800515c <__sflush_r+0xb8>
 8005166:	680f      	ldr	r7, [r1, #0]
 8005168:	600e      	str	r6, [r1, #0]
 800516a:	1bba      	subs	r2, r7, r6
 800516c:	9201      	str	r2, [sp, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	079b      	lsls	r3, r3, #30
 8005172:	d100      	bne.n	8005176 <__sflush_r+0xd2>
 8005174:	694a      	ldr	r2, [r1, #20]
 8005176:	60a2      	str	r2, [r4, #8]
 8005178:	9b01      	ldr	r3, [sp, #4]
 800517a:	2b00      	cmp	r3, #0
 800517c:	ddee      	ble.n	800515c <__sflush_r+0xb8>
 800517e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005180:	0032      	movs	r2, r6
 8005182:	001f      	movs	r7, r3
 8005184:	0028      	movs	r0, r5
 8005186:	9b01      	ldr	r3, [sp, #4]
 8005188:	6a21      	ldr	r1, [r4, #32]
 800518a:	47b8      	blx	r7
 800518c:	2800      	cmp	r0, #0
 800518e:	dc07      	bgt.n	80051a0 <__sflush_r+0xfc>
 8005190:	89a2      	ldrh	r2, [r4, #12]
 8005192:	2340      	movs	r3, #64	@ 0x40
 8005194:	2001      	movs	r0, #1
 8005196:	4313      	orrs	r3, r2
 8005198:	b21b      	sxth	r3, r3
 800519a:	81a3      	strh	r3, [r4, #12]
 800519c:	4240      	negs	r0, r0
 800519e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80051a0:	9b01      	ldr	r3, [sp, #4]
 80051a2:	1836      	adds	r6, r6, r0
 80051a4:	1a1b      	subs	r3, r3, r0
 80051a6:	9301      	str	r3, [sp, #4]
 80051a8:	e7e6      	b.n	8005178 <__sflush_r+0xd4>
 80051aa:	46c0      	nop			@ (mov r8, r8)
 80051ac:	dfbffffe 	.word	0xdfbffffe

080051b0 <_fflush_r>:
 80051b0:	690b      	ldr	r3, [r1, #16]
 80051b2:	b570      	push	{r4, r5, r6, lr}
 80051b4:	0005      	movs	r5, r0
 80051b6:	000c      	movs	r4, r1
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d102      	bne.n	80051c2 <_fflush_r+0x12>
 80051bc:	2500      	movs	r5, #0
 80051be:	0028      	movs	r0, r5
 80051c0:	bd70      	pop	{r4, r5, r6, pc}
 80051c2:	2800      	cmp	r0, #0
 80051c4:	d004      	beq.n	80051d0 <_fflush_r+0x20>
 80051c6:	6a03      	ldr	r3, [r0, #32]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d101      	bne.n	80051d0 <_fflush_r+0x20>
 80051cc:	f7ff fc5a 	bl	8004a84 <__sinit>
 80051d0:	220c      	movs	r2, #12
 80051d2:	5ea3      	ldrsh	r3, [r4, r2]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d0f1      	beq.n	80051bc <_fflush_r+0xc>
 80051d8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80051da:	07d2      	lsls	r2, r2, #31
 80051dc:	d404      	bmi.n	80051e8 <_fflush_r+0x38>
 80051de:	059b      	lsls	r3, r3, #22
 80051e0:	d402      	bmi.n	80051e8 <_fflush_r+0x38>
 80051e2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80051e4:	f7ff fe4f 	bl	8004e86 <__retarget_lock_acquire_recursive>
 80051e8:	0028      	movs	r0, r5
 80051ea:	0021      	movs	r1, r4
 80051ec:	f7ff ff5a 	bl	80050a4 <__sflush_r>
 80051f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80051f2:	0005      	movs	r5, r0
 80051f4:	07db      	lsls	r3, r3, #31
 80051f6:	d4e2      	bmi.n	80051be <_fflush_r+0xe>
 80051f8:	89a3      	ldrh	r3, [r4, #12]
 80051fa:	059b      	lsls	r3, r3, #22
 80051fc:	d4df      	bmi.n	80051be <_fflush_r+0xe>
 80051fe:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005200:	f7ff fe42 	bl	8004e88 <__retarget_lock_release_recursive>
 8005204:	e7db      	b.n	80051be <_fflush_r+0xe>
	...

08005208 <__swhatbuf_r>:
 8005208:	b570      	push	{r4, r5, r6, lr}
 800520a:	000e      	movs	r6, r1
 800520c:	001d      	movs	r5, r3
 800520e:	230e      	movs	r3, #14
 8005210:	5ec9      	ldrsh	r1, [r1, r3]
 8005212:	0014      	movs	r4, r2
 8005214:	b096      	sub	sp, #88	@ 0x58
 8005216:	2900      	cmp	r1, #0
 8005218:	da0c      	bge.n	8005234 <__swhatbuf_r+0x2c>
 800521a:	89b2      	ldrh	r2, [r6, #12]
 800521c:	2380      	movs	r3, #128	@ 0x80
 800521e:	0011      	movs	r1, r2
 8005220:	4019      	ands	r1, r3
 8005222:	421a      	tst	r2, r3
 8005224:	d114      	bne.n	8005250 <__swhatbuf_r+0x48>
 8005226:	2380      	movs	r3, #128	@ 0x80
 8005228:	00db      	lsls	r3, r3, #3
 800522a:	2000      	movs	r0, #0
 800522c:	6029      	str	r1, [r5, #0]
 800522e:	6023      	str	r3, [r4, #0]
 8005230:	b016      	add	sp, #88	@ 0x58
 8005232:	bd70      	pop	{r4, r5, r6, pc}
 8005234:	466a      	mov	r2, sp
 8005236:	f000 f853 	bl	80052e0 <_fstat_r>
 800523a:	2800      	cmp	r0, #0
 800523c:	dbed      	blt.n	800521a <__swhatbuf_r+0x12>
 800523e:	23f0      	movs	r3, #240	@ 0xf0
 8005240:	9901      	ldr	r1, [sp, #4]
 8005242:	021b      	lsls	r3, r3, #8
 8005244:	4019      	ands	r1, r3
 8005246:	4b04      	ldr	r3, [pc, #16]	@ (8005258 <__swhatbuf_r+0x50>)
 8005248:	18c9      	adds	r1, r1, r3
 800524a:	424b      	negs	r3, r1
 800524c:	4159      	adcs	r1, r3
 800524e:	e7ea      	b.n	8005226 <__swhatbuf_r+0x1e>
 8005250:	2100      	movs	r1, #0
 8005252:	2340      	movs	r3, #64	@ 0x40
 8005254:	e7e9      	b.n	800522a <__swhatbuf_r+0x22>
 8005256:	46c0      	nop			@ (mov r8, r8)
 8005258:	ffffe000 	.word	0xffffe000

0800525c <__smakebuf_r>:
 800525c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800525e:	2602      	movs	r6, #2
 8005260:	898b      	ldrh	r3, [r1, #12]
 8005262:	0005      	movs	r5, r0
 8005264:	000c      	movs	r4, r1
 8005266:	b085      	sub	sp, #20
 8005268:	4233      	tst	r3, r6
 800526a:	d007      	beq.n	800527c <__smakebuf_r+0x20>
 800526c:	0023      	movs	r3, r4
 800526e:	3347      	adds	r3, #71	@ 0x47
 8005270:	6023      	str	r3, [r4, #0]
 8005272:	6123      	str	r3, [r4, #16]
 8005274:	2301      	movs	r3, #1
 8005276:	6163      	str	r3, [r4, #20]
 8005278:	b005      	add	sp, #20
 800527a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800527c:	ab03      	add	r3, sp, #12
 800527e:	aa02      	add	r2, sp, #8
 8005280:	f7ff ffc2 	bl	8005208 <__swhatbuf_r>
 8005284:	9f02      	ldr	r7, [sp, #8]
 8005286:	9001      	str	r0, [sp, #4]
 8005288:	0039      	movs	r1, r7
 800528a:	0028      	movs	r0, r5
 800528c:	f7ff fe7a 	bl	8004f84 <_malloc_r>
 8005290:	2800      	cmp	r0, #0
 8005292:	d108      	bne.n	80052a6 <__smakebuf_r+0x4a>
 8005294:	220c      	movs	r2, #12
 8005296:	5ea3      	ldrsh	r3, [r4, r2]
 8005298:	059a      	lsls	r2, r3, #22
 800529a:	d4ed      	bmi.n	8005278 <__smakebuf_r+0x1c>
 800529c:	2203      	movs	r2, #3
 800529e:	4393      	bics	r3, r2
 80052a0:	431e      	orrs	r6, r3
 80052a2:	81a6      	strh	r6, [r4, #12]
 80052a4:	e7e2      	b.n	800526c <__smakebuf_r+0x10>
 80052a6:	2380      	movs	r3, #128	@ 0x80
 80052a8:	89a2      	ldrh	r2, [r4, #12]
 80052aa:	6020      	str	r0, [r4, #0]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	81a3      	strh	r3, [r4, #12]
 80052b0:	9b03      	ldr	r3, [sp, #12]
 80052b2:	6120      	str	r0, [r4, #16]
 80052b4:	6167      	str	r7, [r4, #20]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00c      	beq.n	80052d4 <__smakebuf_r+0x78>
 80052ba:	0028      	movs	r0, r5
 80052bc:	230e      	movs	r3, #14
 80052be:	5ee1      	ldrsh	r1, [r4, r3]
 80052c0:	f000 f820 	bl	8005304 <_isatty_r>
 80052c4:	2800      	cmp	r0, #0
 80052c6:	d005      	beq.n	80052d4 <__smakebuf_r+0x78>
 80052c8:	2303      	movs	r3, #3
 80052ca:	89a2      	ldrh	r2, [r4, #12]
 80052cc:	439a      	bics	r2, r3
 80052ce:	3b02      	subs	r3, #2
 80052d0:	4313      	orrs	r3, r2
 80052d2:	81a3      	strh	r3, [r4, #12]
 80052d4:	89a3      	ldrh	r3, [r4, #12]
 80052d6:	9a01      	ldr	r2, [sp, #4]
 80052d8:	4313      	orrs	r3, r2
 80052da:	81a3      	strh	r3, [r4, #12]
 80052dc:	e7cc      	b.n	8005278 <__smakebuf_r+0x1c>
	...

080052e0 <_fstat_r>:
 80052e0:	2300      	movs	r3, #0
 80052e2:	b570      	push	{r4, r5, r6, lr}
 80052e4:	4d06      	ldr	r5, [pc, #24]	@ (8005300 <_fstat_r+0x20>)
 80052e6:	0004      	movs	r4, r0
 80052e8:	0008      	movs	r0, r1
 80052ea:	0011      	movs	r1, r2
 80052ec:	602b      	str	r3, [r5, #0]
 80052ee:	f7fb fb80 	bl	80009f2 <_fstat>
 80052f2:	1c43      	adds	r3, r0, #1
 80052f4:	d103      	bne.n	80052fe <_fstat_r+0x1e>
 80052f6:	682b      	ldr	r3, [r5, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d000      	beq.n	80052fe <_fstat_r+0x1e>
 80052fc:	6023      	str	r3, [r4, #0]
 80052fe:	bd70      	pop	{r4, r5, r6, pc}
 8005300:	20000fec 	.word	0x20000fec

08005304 <_isatty_r>:
 8005304:	2300      	movs	r3, #0
 8005306:	b570      	push	{r4, r5, r6, lr}
 8005308:	4d06      	ldr	r5, [pc, #24]	@ (8005324 <_isatty_r+0x20>)
 800530a:	0004      	movs	r4, r0
 800530c:	0008      	movs	r0, r1
 800530e:	602b      	str	r3, [r5, #0]
 8005310:	f7fb fb74 	bl	80009fc <_isatty>
 8005314:	1c43      	adds	r3, r0, #1
 8005316:	d103      	bne.n	8005320 <_isatty_r+0x1c>
 8005318:	682b      	ldr	r3, [r5, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d000      	beq.n	8005320 <_isatty_r+0x1c>
 800531e:	6023      	str	r3, [r4, #0]
 8005320:	bd70      	pop	{r4, r5, r6, pc}
 8005322:	46c0      	nop			@ (mov r8, r8)
 8005324:	20000fec 	.word	0x20000fec

08005328 <_sbrk_r>:
 8005328:	2300      	movs	r3, #0
 800532a:	b570      	push	{r4, r5, r6, lr}
 800532c:	4d06      	ldr	r5, [pc, #24]	@ (8005348 <_sbrk_r+0x20>)
 800532e:	0004      	movs	r4, r0
 8005330:	0008      	movs	r0, r1
 8005332:	602b      	str	r3, [r5, #0]
 8005334:	f7fb fb66 	bl	8000a04 <_sbrk>
 8005338:	1c43      	adds	r3, r0, #1
 800533a:	d103      	bne.n	8005344 <_sbrk_r+0x1c>
 800533c:	682b      	ldr	r3, [r5, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d000      	beq.n	8005344 <_sbrk_r+0x1c>
 8005342:	6023      	str	r3, [r4, #0]
 8005344:	bd70      	pop	{r4, r5, r6, pc}
 8005346:	46c0      	nop			@ (mov r8, r8)
 8005348:	20000fec 	.word	0x20000fec

0800534c <_init>:
 800534c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800534e:	46c0      	nop			@ (mov r8, r8)
 8005350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005352:	bc08      	pop	{r3}
 8005354:	469e      	mov	lr, r3
 8005356:	4770      	bx	lr

08005358 <_fini>:
 8005358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800535a:	46c0      	nop			@ (mov r8, r8)
 800535c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800535e:	bc08      	pop	{r3}
 8005360:	469e      	mov	lr, r3
 8005362:	4770      	bx	lr
